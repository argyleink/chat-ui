/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!****************************************!*\
  !*** ./app/js/utilities/shorthands.js ***!
  \****************************************/
/*! exports provided: $, $$, setAttributes */
/*! exports used: $, $$, setAttributes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("// short querySelector: $('.foo') $('.child', context_node)\nconst $ = (query, context = document) => context.querySelector(query);\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = $;\n\n\n// shorthand querySelectorAll: $$('.foo') $$('.child', context_node)\nconst $$ = (query, context = document) => context.querySelectorAll(query);\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = $$;\n\n\n// set multiple attributes on a node\nconst setAttributes = (el, attrs) => Object.keys(attrs).forEach(key => el.setAttribute(key, attrs[key]));\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = setAttributes;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvdXRpbGl0aWVzL3Nob3J0aGFuZHMuanM/NDRjMCJdLCJuYW1lcyI6WyIkIiwicXVlcnkiLCJjb250ZXh0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiJCQiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0QXR0cmlidXRlcyIsImVsIiwiYXR0cnMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDTyxNQUFNQSxJQUFJLENBQUNDLEtBQUQsRUFBUUMsVUFBVUMsUUFBbEIsS0FDZkQsUUFBUUUsYUFBUixDQUFzQkgsS0FBdEIsQ0FESztBQUFBO0FBQUE7O0FBR1A7QUFDTyxNQUFNSSxLQUFLLENBQUNKLEtBQUQsRUFBUUMsVUFBVUMsUUFBbEIsS0FDaEJELFFBQVFJLGdCQUFSLENBQXlCTCxLQUF6QixDQURLO0FBQUE7QUFBQTs7QUFHUDtBQUNPLE1BQU1NLGdCQUFnQixDQUFDQyxFQUFELEVBQUtDLEtBQUwsS0FDM0JDLE9BQU9DLElBQVAsQ0FBWUYsS0FBWixFQUFtQkcsT0FBbkIsQ0FBMkJDLE9BQ3pCTCxHQUFHTSxZQUFILENBQWdCRCxHQUFoQixFQUFxQkosTUFBTUksR0FBTixDQUFyQixDQURGLENBREssQyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hvcnQgcXVlcnlTZWxlY3RvcjogJCgnLmZvbycpICQoJy5jaGlsZCcsIGNvbnRleHRfbm9kZSlcbmV4cG9ydCBjb25zdCAkID0gKHF1ZXJ5LCBjb250ZXh0ID0gZG9jdW1lbnQpID0+IFxuICBjb250ZXh0LnF1ZXJ5U2VsZWN0b3IocXVlcnkpXG5cbi8vIHNob3J0aGFuZCBxdWVyeVNlbGVjdG9yQWxsOiAkJCgnLmZvbycpICQkKCcuY2hpbGQnLCBjb250ZXh0X25vZGUpXG5leHBvcnQgY29uc3QgJCQgPSAocXVlcnksIGNvbnRleHQgPSBkb2N1bWVudCkgPT4gXG4gIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChxdWVyeSlcblxuLy8gc2V0IG11bHRpcGxlIGF0dHJpYnV0ZXMgb24gYSBub2RlXG5leHBvcnQgY29uc3Qgc2V0QXR0cmlidXRlcyA9IChlbCwgYXR0cnMpID0+XG4gIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGtleSA9PiBcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy91dGlsaXRpZXMvc2hvcnRoYW5kcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!********************************************!*\
  !*** ./node_modules/ragrid/ragrid.min.css ***!
  \********************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFncmlkL3JhZ3JpZC5taW4uY3NzPzYxODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmFncmlkL3JhZ3JpZC5taW4uY3NzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!******************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/index.js ***!
  \******************************************************/
/*! exports provided: HTML, ChatMedia, Image, ChatGallery, Gallery, ChatCards, Card */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__html__ = __webpack_require__(/*! ./html */ 16);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"HTML\", function() { return __WEBPACK_IMPORTED_MODULE_0__html__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__media__ = __webpack_require__(/*! ./media */ 3);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"ChatMedia\", function() { return __WEBPACK_IMPORTED_MODULE_1__media__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Image\", function() { return __WEBPACK_IMPORTED_MODULE_1__media__[\"b\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gallery___ = __webpack_require__(/*! ./gallery/ */ 4);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"ChatGallery\", function() { return __WEBPACK_IMPORTED_MODULE_2__gallery___[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Gallery\", function() { return __WEBPACK_IMPORTED_MODULE_2__gallery___[\"b\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__card___ = __webpack_require__(/*! ./card/ */ 5);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"ChatCards\", function() { return __WEBPACK_IMPORTED_MODULE_3__card___[\"c\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Card\", function() { return __WEBPACK_IMPORTED_MODULE_3__card___[\"b\"]; });\n\n\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9pbmRleC5qcz9kOWM3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtIVE1MfSBmcm9tICcuL2h0bWwnXG5leHBvcnQge0NoYXRNZWRpYSwgSW1hZ2VUZW1wbGF0ZSBhcyBJbWFnZX0gZnJvbSAnLi9tZWRpYSdcbmV4cG9ydCB7Q2hhdEdhbGxlcnksIEdhbGxlcnlUZW1wbGF0ZSBhcyBHYWxsZXJ5fSBmcm9tICcuL2dhbGxlcnkvJ1xuZXhwb3J0IHtDaGF0Q2FyZHMsIENhcmRzVGVtcGxhdGUgYXMgQ2FyZH0gZnJvbSAnLi9jYXJkLydcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvcmVuZGVyZXJzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/media/index.js ***!
  \************************************************************/
/*! exports provided: ChatMedia, MediaItem, ImageTemplate */
/*! exports used: ChatMedia, ImageTemplate, MediaItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chat_media_element__ = __webpack_require__(/*! ./chat-media.element */ 18);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__chat_media_element__[\"ChatMedia\"]; });\n\n\nconst MediaItem = ({ avatar, image }) => `\n  <figure>\n    <img src=\"${image}\">\n    <figcaption>\n      <chat-avatar src='${avatar}'></chat-avatar>\n    </figcaption>\n  </figure>\n`;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = MediaItem;\n\n\nconst ImageTemplate = ({ mine = false, author, image }) => `\n  <chat-media\n    ${mine ? 'mine' : ''}\n    avatar='${author.avatar}'\n    image='${image}'\n  ></chat-media>\n`;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = ImageTemplate;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9tZWRpYS9pbmRleC5qcz9mZjk5Il0sIm5hbWVzIjpbIk1lZGlhSXRlbSIsImF2YXRhciIsImltYWdlIiwiSW1hZ2VUZW1wbGF0ZSIsIm1pbmUiLCJhdXRob3IiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRU8sTUFBTUEsWUFBWSxDQUFDLEVBQUNDLE1BQUQsRUFBU0MsS0FBVCxFQUFELEtBQXNCOztnQkFFL0JBLEtBQU07OzBCQUVJRCxNQUFPOzs7Q0FKMUI7QUFBQTtBQUFBOztBQVNBLE1BQU1FLGdCQUFnQixDQUFDLEVBQUNDLE9BQU8sS0FBUixFQUFlQyxNQUFmLEVBQXVCSCxLQUF2QixFQUFELEtBQW9DOztNQUUzREUsT0FBTyxNQUFQLEdBQWdCLEVBQUc7Y0FDWEMsT0FBT0osTUFBTzthQUNmQyxLQUFNOztDQUpaLEMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7Q2hhdE1lZGlhfSBmcm9tICcuL2NoYXQtbWVkaWEuZWxlbWVudCdcblxuZXhwb3J0IGNvbnN0IE1lZGlhSXRlbSA9ICh7YXZhdGFyLCBpbWFnZX0pID0+IGBcbiAgPGZpZ3VyZT5cbiAgICA8aW1nIHNyYz1cIiR7aW1hZ2V9XCI+XG4gICAgPGZpZ2NhcHRpb24+XG4gICAgICA8Y2hhdC1hdmF0YXIgc3JjPScke2F2YXRhcn0nPjwvY2hhdC1hdmF0YXI+XG4gICAgPC9maWdjYXB0aW9uPlxuICA8L2ZpZ3VyZT5cbmBcblxuZXhwb3J0IGNvbnN0IEltYWdlVGVtcGxhdGUgPSAoe21pbmUgPSBmYWxzZSwgYXV0aG9yLCBpbWFnZX0pID0+IGBcbiAgPGNoYXQtbWVkaWFcbiAgICAke21pbmUgPyAnbWluZScgOiAnJ31cbiAgICBhdmF0YXI9JyR7YXV0aG9yLmF2YXRhcn0nXG4gICAgaW1hZ2U9JyR7aW1hZ2V9J1xuICA+PC9jaGF0LW1lZGlhPlxuYFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvcmVuZGVyZXJzL21lZGlhL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!**************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/gallery/index.js ***!
  \**************************************************************/
/*! exports provided: ChatGallery, Image, GalleryTemplate */
/*! exports used: ChatGallery, GalleryTemplate, Image */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chat_gallery_element__ = __webpack_require__(/*! ./chat-gallery.element */ 20);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__chat_gallery_element__[\"ChatGallery\"]; });\n\n\nconst Image = image => `\n  <chat-gallery-image>\n    <figure>\n      <img src=\"${image}\">\n    </figure>\n  </chat-gallery-image>\n`;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = Image;\n\n\nconst GalleryTemplate = ({ mine = false, author, images }) => `\n  <chat-gallery\n    ${mine ? 'mine' : ''}\n    avatar='${author.avatar}'\n    images='${JSON.stringify(images)}'\n  ></chat-gallery>\n`;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = GalleryTemplate;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9nYWxsZXJ5L2luZGV4LmpzP2U3M2MiXSwibmFtZXMiOlsiSW1hZ2UiLCJpbWFnZSIsIkdhbGxlcnlUZW1wbGF0ZSIsIm1pbmUiLCJhdXRob3IiLCJpbWFnZXMiLCJhdmF0YXIiLCJKU09OIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVPLE1BQU1BLFFBQVFDLFNBQVU7OztrQkFHYkEsS0FBTTs7O0NBSGpCO0FBQUE7QUFBQTs7QUFRQSxNQUFNQyxrQkFBa0IsQ0FBQyxFQUFDQyxPQUFPLEtBQVIsRUFBZUMsTUFBZixFQUF1QkMsTUFBdkIsRUFBRCxLQUFxQzs7TUFFOURGLE9BQU8sTUFBUCxHQUFnQixFQUFHO2NBQ1hDLE9BQU9FLE1BQU87Y0FDZEMsS0FBS0MsU0FBTCxDQUFlSCxNQUFmLENBQXVCOztDQUo5QixDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge0NoYXRHYWxsZXJ5fSBmcm9tICcuL2NoYXQtZ2FsbGVyeS5lbGVtZW50J1xuXG5leHBvcnQgY29uc3QgSW1hZ2UgPSBpbWFnZSA9PiBgXG4gIDxjaGF0LWdhbGxlcnktaW1hZ2U+XG4gICAgPGZpZ3VyZT5cbiAgICAgIDxpbWcgc3JjPVwiJHtpbWFnZX1cIj5cbiAgICA8L2ZpZ3VyZT5cbiAgPC9jaGF0LWdhbGxlcnktaW1hZ2U+XG5gXG5cbmV4cG9ydCBjb25zdCBHYWxsZXJ5VGVtcGxhdGUgPSAoe21pbmUgPSBmYWxzZSwgYXV0aG9yLCBpbWFnZXN9KSA9PiBgXG4gIDxjaGF0LWdhbGxlcnlcbiAgICAke21pbmUgPyAnbWluZScgOiAnJ31cbiAgICBhdmF0YXI9JyR7YXV0aG9yLmF2YXRhcn0nXG4gICAgaW1hZ2VzPScke0pTT04uc3RyaW5naWZ5KGltYWdlcyl9J1xuICA+PC9jaGF0LWdhbGxlcnk+XG5gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9yZW5kZXJlcnMvZ2FsbGVyeS9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!***********************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/card/index.js ***!
  \***********************************************************/
/*! exports provided: ChatCards, Card, CardsTemplate */
/*! exports used: Card, CardsTemplate, ChatCards */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chat_cards_element__ = __webpack_require__(/*! ./chat-cards.element */ 22);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return __WEBPACK_IMPORTED_MODULE_0__chat_cards_element__[\"ChatCards\"]; });\n\n\n// async image loading strategy\nconst Card = ({ avatar, image, text }) => `\n  <chat-card grid=\"rows\" vertically-distributed=\"equal\">\n    <div class=\"card-content\">\n      <img src=\"${image}\"/>\n      <p>${text}</p>\n    </div>\n    <div class=\"card-footer\" grid vertically-aligned=\"center\">\n      <a href=\"href\">Like</a>\n      <a href=\"href\">Comment</a>\n    </div>\n  </chat-card>\n`;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Card;\n\n\nconst CardsTemplate = ({ mine = false, author, username, cards }) => `\n  <chat-cards\n    ${mine ? 'mine' : ''}\n    avatar='${author.avatar}'\n    username='${username}'\n    cards='${JSON.stringify(cards)}'\n  ></chat-cards>\n`;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = CardsTemplate;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9jYXJkL2luZGV4LmpzP2Y5MTUiXSwibmFtZXMiOlsiQ2FyZCIsImF2YXRhciIsImltYWdlIiwidGV4dCIsIkNhcmRzVGVtcGxhdGUiLCJtaW5lIiwiYXV0aG9yIiwidXNlcm5hbWUiLCJjYXJkcyIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDTyxNQUFNQSxPQUFPLENBQUMsRUFBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQWdCQyxJQUFoQixFQUFELEtBQTRCOzs7a0JBRzlCRCxLQUFNO1dBQ2JDLElBQUs7Ozs7Ozs7Q0FKVDtBQUFBO0FBQUE7O0FBYUEsTUFBTUMsZ0JBQWdCLENBQUMsRUFBQ0MsT0FBTyxLQUFSLEVBQWVDLE1BQWYsRUFBdUJDLFFBQXZCLEVBQWlDQyxLQUFqQyxFQUFELEtBQThDOztNQUVyRUgsT0FBTyxNQUFQLEdBQWdCLEVBQUc7Y0FDWEMsT0FBT0wsTUFBTztnQkFDWk0sUUFBUzthQUNaRSxLQUFLQyxTQUFMLENBQWVGLEtBQWYsQ0FBc0I7O0NBTDVCLEMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7Q2hhdENhcmRzfSBmcm9tICcuL2NoYXQtY2FyZHMuZWxlbWVudCdcblxuLy8gYXN5bmMgaW1hZ2UgbG9hZGluZyBzdHJhdGVneVxuZXhwb3J0IGNvbnN0IENhcmQgPSAoe2F2YXRhciwgaW1hZ2UsIHRleHR9KSA9PiBgXG4gIDxjaGF0LWNhcmQgZ3JpZD1cInJvd3NcIiB2ZXJ0aWNhbGx5LWRpc3RyaWJ1dGVkPVwiZXF1YWxcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1jb250ZW50XCI+XG4gICAgICA8aW1nIHNyYz1cIiR7aW1hZ2V9XCIvPlxuICAgICAgPHA+JHt0ZXh0fTwvcD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIiBncmlkIHZlcnRpY2FsbHktYWxpZ25lZD1cImNlbnRlclwiPlxuICAgICAgPGEgaHJlZj1cImhyZWZcIj5MaWtlPC9hPlxuICAgICAgPGEgaHJlZj1cImhyZWZcIj5Db21tZW50PC9hPlxuICAgIDwvZGl2PlxuICA8L2NoYXQtY2FyZD5cbmBcblxuZXhwb3J0IGNvbnN0IENhcmRzVGVtcGxhdGUgPSAoe21pbmUgPSBmYWxzZSwgYXV0aG9yLCB1c2VybmFtZSwgY2FyZHN9KSA9PiBgXG4gIDxjaGF0LWNhcmRzXG4gICAgJHttaW5lID8gJ21pbmUnIDogJyd9XG4gICAgYXZhdGFyPScke2F1dGhvci5hdmF0YXJ9J1xuICAgIHVzZXJuYW1lPScke3VzZXJuYW1lfSdcbiAgICBjYXJkcz0nJHtKU09OLnN0cmluZ2lmeShjYXJkcyl9J1xuICA+PC9jaGF0LWNhcmRzPlxuYFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9yZW5kZXJlcnMvY2FyZC9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*************************!*\
  !*** ./app/js/index.js ***!
  \*************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__css_body_css__ = __webpack_require__(/*! ../css/body.css */ 7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__css_body_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__css_body_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ragrid__ = __webpack_require__(/*! ragrid */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ragrid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_ragrid__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_components_chat_ui_chat_ui_element__ = __webpack_require__(/*! components/chat-ui/chat-ui.element */ 8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_demo_narrative__ = __webpack_require__(/*! demo/narrative */ 32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_demo_samples__ = __webpack_require__(/*! demo/samples */ 33);\n\n\n\n\n\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvaW5kZXguanM/YmFlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi4vY3NzL2JvZHkuY3NzJ1xuXG5pbXBvcnQgJ3JhZ3JpZCdcbmltcG9ydCAnY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtdWkuZWxlbWVudCdcblxuaW1wb3J0ICdkZW1vL25hcnJhdGl2ZSdcbmltcG9ydCAnZGVtby9zYW1wbGVzJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2pzL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!**************************!*\
  !*** ./app/css/body.css ***!
  \**************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY3NzL2JvZHkuY3NzPzI2MjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvY3NzL2JvZHkuY3NzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!******************************************************!*\
  !*** ./app/js/components/chat-ui/chat-ui.element.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chat_titlebar_chat_titlebar_element__ = __webpack_require__(/*! ./chat-titlebar/chat-titlebar.element */ 9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__chat_authoring_chat_authoring_element__ = __webpack_require__(/*! ./chat-authoring/chat-authoring.element */ 11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__chat_scrollview_chat_scrollview_element__ = __webpack_require__(/*! ./chat-scrollview/chat-scrollview.element */ 13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__chat_messagelist_chat_messagelist_element__ = __webpack_require__(/*! ./chat-messagelist/chat-messagelist.element */ 15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__chat_message_chat_message_element__ = __webpack_require__(/*! ./chat-message/chat-message.element */ 25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__chat_cluster_chat_cluster_element__ = __webpack_require__(/*! ./chat-cluster/chat-cluster.element */ 27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chat_avatar_chat_avatar_element__ = __webpack_require__(/*! ./chat-avatar/chat-avatar.element */ 29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_ragrid__ = __webpack_require__(/*! ragrid */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_ragrid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_ragrid__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__styles_css__ = __webpack_require__(/*! ./styles.css */ 31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__styles_css__);\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ChatUI extends HTMLElement {\n  createdCallback() {\n    this.classList.add('loading');\n\n    this.Scrollview = Object(__WEBPACK_IMPORTED_MODULE_7_utilities_shorthands__[\"a\" /* $ */])('chat-scrollview', this);\n    this.Messages = Object(__WEBPACK_IMPORTED_MODULE_7_utilities_shorthands__[\"a\" /* $ */])('chat-messagelist', this);\n  }\n\n  attachedCallback() {}\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  init(messages) {\n    // TODO:\n    // create vnode holder for loop result\n    // iterate over messages\n    // create clusters for sequental alternating messages\n    // append clusters to vnode\n    // drop vnode results into this.innerHTML\n    this.Scrollview.scrollToLatest();\n\n    // TODO: remove loading after all children have rendered\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/whenDefined\n    // ALSO\n    // https://developers.google.com/web/fundamentals/web-components/customelements\n    // Fetch all the children of <share-buttons> that are not defined yet.\n    // let undefinedChildren = this.querySelectorAll(':not(:defined)');\n\n    // let promises = [...undefinedChildren].map(socialButton => {\n    //   return customElements.whenDefined(socialButton.localName)\n    // ))\n\n    // // Wait for all the social-buttons to be upgraded.\n    // Promise.all(promises).then(() => {\n    //   // All children are ready.\n    // })\n    this.classList.remove('loading');\n  }\n\n  newMessage(payload) {\n    this.Messages.add(payload);\n    this.Scrollview.scrollToLatest();\n\n    if (payload.mine) this.dispatchEvent(new CustomEvent('outbound-message', { detail: payload, bubbles: false }));\n  }\n\n  // TODO: move this logic to the cluster class\n  writing(isWriting = true) {\n    if (isWriting) {\n      let indeterminateFeedback = this.Messages.newCluster({\n        author: {\n          name: '${bot_name}',\n          avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif'\n        }\n      });\n      indeterminateFeedback.setAttribute('indeterminate', '');\n\n      Object(__WEBPACK_IMPORTED_MODULE_7_utilities_shorthands__[\"a\" /* $ */])('section', indeterminateFeedback).appendChild(indeterminateFeedback.createMessage({\n        type: 'HTML',\n        contents: '..'\n      }));\n\n      this.Messages.appendChild(indeterminateFeedback);\n\n      // if at end of scroll (dont want to disrupt user during scrolling history)\n      // force scroll to show indicator\n      if (this.Scrollview.atBottom()) this.Scrollview.scrollToLatest();\n    } else {\n      let indeterminateFeedback = Object(__WEBPACK_IMPORTED_MODULE_7_utilities_shorthands__[\"a\" /* $ */])('chat-cluster[indeterminate]', this);\n      if (!indeterminateFeedback) return;\n\n      indeterminateFeedback.setAttribute('removed', '');\n\n      Object(__WEBPACK_IMPORTED_MODULE_7_utilities_shorthands__[\"a\" /* $ */])('chat-message', indeterminateFeedback).addEventListener('animationend', e => indeterminateFeedback.remove());\n    }\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-ui', ChatUI);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtdWkuZWxlbWVudC5qcz9lYTY4Il0sIm5hbWVzIjpbIkNoYXRVSSIsIkhUTUxFbGVtZW50IiwiY3JlYXRlZENhbGxiYWNrIiwiY2xhc3NMaXN0IiwiYWRkIiwiU2Nyb2xsdmlldyIsIiQiLCJNZXNzYWdlcyIsImF0dGFjaGVkQ2FsbGJhY2siLCJkZXRhY2hlZENhbGxiYWNrIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0ciIsIm9sZFZhbCIsIm5ld1ZhbCIsImluaXQiLCJtZXNzYWdlcyIsInNjcm9sbFRvTGF0ZXN0IiwicmVtb3ZlIiwibmV3TWVzc2FnZSIsInBheWxvYWQiLCJtaW5lIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiYnViYmxlcyIsIndyaXRpbmciLCJpc1dyaXRpbmciLCJpbmRldGVybWluYXRlRmVlZGJhY2siLCJuZXdDbHVzdGVyIiwiYXV0aG9yIiwibmFtZSIsImF2YXRhciIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlTWVzc2FnZSIsInR5cGUiLCJjb250ZW50cyIsImF0Qm90dG9tIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJkb2N1bWVudCIsInJlZ2lzdGVyRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFZSxNQUFNQSxNQUFOLFNBQXFCQyxXQUFyQixDQUFpQztBQUM5Q0Msb0JBQWtCO0FBQ2hCLFNBQUtDLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixTQUFuQjs7QUFFQSxTQUFLQyxVQUFMLEdBQWtCLHVFQUFBQyxDQUFFLGlCQUFGLEVBQXFCLElBQXJCLENBQWxCO0FBQ0EsU0FBS0MsUUFBTCxHQUFrQix1RUFBQUQsQ0FBRSxrQkFBRixFQUFzQixJQUF0QixDQUFsQjtBQUNEOztBQUVERSxxQkFBbUIsQ0FBRTtBQUNyQkMscUJBQW1CLENBQUU7QUFDckJDLDJCQUF5QkMsSUFBekIsRUFBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQyxDQUFFOztBQUVqREMsT0FBS0MsUUFBTCxFQUFlO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBS1YsVUFBTCxDQUFnQlcsY0FBaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUtiLFNBQUwsQ0FBZWMsTUFBZixDQUFzQixTQUF0QjtBQUNEOztBQUVEQyxhQUFXQyxPQUFYLEVBQW9CO0FBQ2xCLFNBQUtaLFFBQUwsQ0FBY0gsR0FBZCxDQUFrQmUsT0FBbEI7QUFDQSxTQUFLZCxVQUFMLENBQWdCVyxjQUFoQjs7QUFFQSxRQUFJRyxRQUFRQyxJQUFaLEVBQ0UsS0FBS0MsYUFBTCxDQUNFLElBQUlDLFdBQUosQ0FBZ0Isa0JBQWhCLEVBQ0UsRUFBRUMsUUFBUUosT0FBVixFQUFtQkssU0FBUyxLQUE1QixFQURGLENBREY7QUFHSDs7QUFFRDtBQUNBQyxVQUFRQyxZQUFZLElBQXBCLEVBQTBCO0FBQ3hCLFFBQUlBLFNBQUosRUFBZTtBQUNiLFVBQUlDLHdCQUF3QixLQUFLcEIsUUFBTCxDQUFjcUIsVUFBZCxDQUF5QjtBQUNuREMsZ0JBQVE7QUFDTkMsZ0JBQU0sYUFEQTtBQUVOQyxrQkFBUTtBQUZGO0FBRDJDLE9BQXpCLENBQTVCO0FBTUFKLDRCQUFzQkssWUFBdEIsQ0FBbUMsZUFBbkMsRUFBb0QsRUFBcEQ7O0FBRUExQixNQUFBLHVFQUFBQSxDQUFFLFNBQUYsRUFBYXFCLHFCQUFiLEVBQ0dNLFdBREgsQ0FFSU4sc0JBQXNCTyxhQUF0QixDQUFvQztBQUNsQ0MsY0FBTSxNQUQ0QjtBQUVsQ0Msa0JBQVU7QUFGd0IsT0FBcEMsQ0FGSjs7QUFPQSxXQUFLN0IsUUFBTCxDQUFjMEIsV0FBZCxDQUEwQk4scUJBQTFCOztBQUVBO0FBQ0E7QUFDQSxVQUFJLEtBQUt0QixVQUFMLENBQWdCZ0MsUUFBaEIsRUFBSixFQUNFLEtBQUtoQyxVQUFMLENBQWdCVyxjQUFoQjtBQUNILEtBdEJELE1BdUJLO0FBQ0gsVUFBSVcsd0JBQXdCLHVFQUFBckIsQ0FBRSw2QkFBRixFQUFpQyxJQUFqQyxDQUE1QjtBQUNBLFVBQUksQ0FBQ3FCLHFCQUFMLEVBQTRCOztBQUU1QkEsNEJBQXNCSyxZQUF0QixDQUFtQyxTQUFuQyxFQUE4QyxFQUE5Qzs7QUFFQTFCLE1BQUEsdUVBQUFBLENBQUUsY0FBRixFQUFrQnFCLHFCQUFsQixFQUNHVyxnQkFESCxDQUNvQixjQURwQixFQUNvQ0MsS0FDaENaLHNCQUFzQlYsTUFBdEIsRUFGSjtBQUdEO0FBQ0Y7QUFwRjZDO0FBQUE7QUFBQTs7QUF1RmhEdUIsU0FBU0MsZUFBVCxDQUF5QixTQUF6QixFQUFvQ3pDLE1BQXBDIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vY2hhdC10aXRsZWJhci9jaGF0LXRpdGxlYmFyLmVsZW1lbnQnXG5pbXBvcnQgJy4vY2hhdC1hdXRob3JpbmcvY2hhdC1hdXRob3JpbmcuZWxlbWVudCdcbmltcG9ydCAnLi9jaGF0LXNjcm9sbHZpZXcvY2hhdC1zY3JvbGx2aWV3LmVsZW1lbnQnXG5pbXBvcnQgJy4vY2hhdC1tZXNzYWdlbGlzdC9jaGF0LW1lc3NhZ2VsaXN0LmVsZW1lbnQnXG5pbXBvcnQgJy4vY2hhdC1tZXNzYWdlL2NoYXQtbWVzc2FnZS5lbGVtZW50J1xuaW1wb3J0ICcuL2NoYXQtY2x1c3Rlci9jaGF0LWNsdXN0ZXIuZWxlbWVudCdcbmltcG9ydCAnLi9jaGF0LWF2YXRhci9jaGF0LWF2YXRhci5lbGVtZW50J1xuXG5pbXBvcnQgeyAkIH0gZnJvbSAndXRpbGl0aWVzL3Nob3J0aGFuZHMnXG5cbmltcG9ydCAncmFncmlkJ1xuaW1wb3J0ICcuL3N0eWxlcy5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXRVSSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY3JlYXRlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbG9hZGluZycpXG5cbiAgICB0aGlzLlNjcm9sbHZpZXcgPSAkKCdjaGF0LXNjcm9sbHZpZXcnLCB0aGlzKVxuICAgIHRoaXMuTWVzc2FnZXMgICA9ICQoJ2NoYXQtbWVzc2FnZWxpc3QnLCB0aGlzKVxuICB9XG5cbiAgYXR0YWNoZWRDYWxsYmFjaygpIHt9XG4gIGRldGFjaGVkQ2FsbGJhY2soKSB7fVxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHt9XG5cbiAgaW5pdChtZXNzYWdlcykge1xuICAgIC8vIFRPRE86XG4gICAgLy8gY3JlYXRlIHZub2RlIGhvbGRlciBmb3IgbG9vcCByZXN1bHRcbiAgICAvLyBpdGVyYXRlIG92ZXIgbWVzc2FnZXNcbiAgICAvLyBjcmVhdGUgY2x1c3RlcnMgZm9yIHNlcXVlbnRhbCBhbHRlcm5hdGluZyBtZXNzYWdlc1xuICAgIC8vIGFwcGVuZCBjbHVzdGVycyB0byB2bm9kZVxuICAgIC8vIGRyb3Agdm5vZGUgcmVzdWx0cyBpbnRvIHRoaXMuaW5uZXJIVE1MXG4gICAgdGhpcy5TY3JvbGx2aWV3LnNjcm9sbFRvTGF0ZXN0KClcblxuICAgIC8vIFRPRE86IHJlbW92ZSBsb2FkaW5nIGFmdGVyIGFsbCBjaGlsZHJlbiBoYXZlIHJlbmRlcmVkXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUVsZW1lbnRSZWdpc3RyeS93aGVuRGVmaW5lZFxuICAgIC8vIEFMU09cbiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL3dlYi1jb21wb25lbnRzL2N1c3RvbWVsZW1lbnRzXG4gICAgLy8gRmV0Y2ggYWxsIHRoZSBjaGlsZHJlbiBvZiA8c2hhcmUtYnV0dG9ucz4gdGhhdCBhcmUgbm90IGRlZmluZWQgeWV0LlxuICAgIC8vIGxldCB1bmRlZmluZWRDaGlsZHJlbiA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnOm5vdCg6ZGVmaW5lZCknKTtcblxuICAgIC8vIGxldCBwcm9taXNlcyA9IFsuLi51bmRlZmluZWRDaGlsZHJlbl0ubWFwKHNvY2lhbEJ1dHRvbiA9PiB7XG4gICAgLy8gICByZXR1cm4gY3VzdG9tRWxlbWVudHMud2hlbkRlZmluZWQoc29jaWFsQnV0dG9uLmxvY2FsTmFtZSlcbiAgICAvLyApKVxuXG4gICAgLy8gLy8gV2FpdCBmb3IgYWxsIHRoZSBzb2NpYWwtYnV0dG9ucyB0byBiZSB1cGdyYWRlZC5cbiAgICAvLyBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgLy8gICAvLyBBbGwgY2hpbGRyZW4gYXJlIHJlYWR5LlxuICAgIC8vIH0pXG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkaW5nJylcbiAgfVxuXG4gIG5ld01lc3NhZ2UocGF5bG9hZCkge1xuICAgIHRoaXMuTWVzc2FnZXMuYWRkKHBheWxvYWQpXG4gICAgdGhpcy5TY3JvbGx2aWV3LnNjcm9sbFRvTGF0ZXN0KClcbiAgICBcbiAgICBpZiAocGF5bG9hZC5taW5lKSBcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KCdvdXRib3VuZC1tZXNzYWdlJywgXG4gICAgICAgICAgeyBkZXRhaWw6IHBheWxvYWQsIGJ1YmJsZXM6IGZhbHNlIH0pKVxuICB9XG5cbiAgLy8gVE9ETzogbW92ZSB0aGlzIGxvZ2ljIHRvIHRoZSBjbHVzdGVyIGNsYXNzXG4gIHdyaXRpbmcoaXNXcml0aW5nID0gdHJ1ZSkge1xuICAgIGlmIChpc1dyaXRpbmcpIHtcbiAgICAgIGxldCBpbmRldGVybWluYXRlRmVlZGJhY2sgPSB0aGlzLk1lc3NhZ2VzLm5ld0NsdXN0ZXIoe1xuICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICBuYW1lOiAnJHtib3RfbmFtZX0nLFxuICAgICAgICAgIGF2YXRhcjogJ2h0dHBzOi8vY2RuLmRyaWJiYmxlLmNvbS91c2Vycy8zNzUzMC9zY3JlZW5zaG90cy8yOTM3ODU4L2RyaWJfYmxpbmtfYm90LmdpZidcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGluZGV0ZXJtaW5hdGVGZWVkYmFjay5zZXRBdHRyaWJ1dGUoJ2luZGV0ZXJtaW5hdGUnLCAnJylcbiAgICAgIFxuICAgICAgJCgnc2VjdGlvbicsIGluZGV0ZXJtaW5hdGVGZWVkYmFjaylcbiAgICAgICAgLmFwcGVuZENoaWxkKFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGVGZWVkYmFjay5jcmVhdGVNZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6ICdIVE1MJyxcbiAgICAgICAgICAgIGNvbnRlbnRzOiAnLi4nXG4gICAgICAgICAgfSkpXG5cbiAgICAgIHRoaXMuTWVzc2FnZXMuYXBwZW5kQ2hpbGQoaW5kZXRlcm1pbmF0ZUZlZWRiYWNrKVxuICAgICAgXG4gICAgICAvLyBpZiBhdCBlbmQgb2Ygc2Nyb2xsIChkb250IHdhbnQgdG8gZGlzcnVwdCB1c2VyIGR1cmluZyBzY3JvbGxpbmcgaGlzdG9yeSlcbiAgICAgIC8vIGZvcmNlIHNjcm9sbCB0byBzaG93IGluZGljYXRvclxuICAgICAgaWYgKHRoaXMuU2Nyb2xsdmlldy5hdEJvdHRvbSgpKVxuICAgICAgICB0aGlzLlNjcm9sbHZpZXcuc2Nyb2xsVG9MYXRlc3QoKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxldCBpbmRldGVybWluYXRlRmVlZGJhY2sgPSAkKCdjaGF0LWNsdXN0ZXJbaW5kZXRlcm1pbmF0ZV0nLCB0aGlzKVxuICAgICAgaWYgKCFpbmRldGVybWluYXRlRmVlZGJhY2spIHJldHVyblxuXG4gICAgICBpbmRldGVybWluYXRlRmVlZGJhY2suc2V0QXR0cmlidXRlKCdyZW1vdmVkJywgJycpXG5cbiAgICAgICQoJ2NoYXQtbWVzc2FnZScsIGluZGV0ZXJtaW5hdGVGZWVkYmFjaylcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGUgPT4gXG4gICAgICAgICAgaW5kZXRlcm1pbmF0ZUZlZWRiYWNrLnJlbW92ZSgpKVxuICAgIH1cbiAgfVxufVxuXG5kb2N1bWVudC5yZWdpc3RlckVsZW1lbnQoJ2NoYXQtdWknLCBDaGF0VUkpXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9jaGF0LXVpLmVsZW1lbnQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!**************************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-titlebar/chat-titlebar.element.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__styles_css__ = __webpack_require__(/*! ./styles.css */ 10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__styles_css__);\n\n\nclass ChatTitlebar extends HTMLElement {\n  createdCallback() {\n    this.classList.add('loading');\n\n    this.setAttribute('grid', '');\n    this.setAttribute('vertically-aligned', 'center');\n    this.setAttribute('horizontally-distributed', 'between');\n\n    this.render();\n  }\n\n  attachedCallback() {\n    this.classList.remove('loading');\n  }\n\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  render() {\n    this.innerHTML = `\n      <h5>${this.getAttribute('title')}</h5>\n      <chat-avatar src='${this.getAttribute('avatar')}'></chat-avatar>\n    `;\n  }\n\n  show() {\n    this.removeAttribute('hide');\n  }\n\n  hide() {\n    this.setAttribute('hide', '');\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-titlebar', ChatTitlebar);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtdGl0bGViYXIvY2hhdC10aXRsZWJhci5lbGVtZW50LmpzP2U3MmMiXSwibmFtZXMiOlsiQ2hhdFRpdGxlYmFyIiwiSFRNTEVsZW1lbnQiLCJjcmVhdGVkQ2FsbGJhY2siLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJyZW5kZXIiLCJhdHRhY2hlZENhbGxiYWNrIiwicmVtb3ZlIiwiZGV0YWNoZWRDYWxsYmFjayIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImF0dHIiLCJvbGRWYWwiLCJuZXdWYWwiLCJpbm5lckhUTUwiLCJnZXRBdHRyaWJ1dGUiLCJzaG93IiwicmVtb3ZlQXR0cmlidXRlIiwiaGlkZSIsImRvY3VtZW50IiwicmVnaXN0ZXJFbGVtZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVlLE1BQU1BLFlBQU4sU0FBMkJDLFdBQTNCLENBQXVDO0FBQ3BEQyxvQkFBa0I7QUFDaEIsU0FBS0MsU0FBTCxDQUFlQyxHQUFmLENBQW1CLFNBQW5COztBQUVBLFNBQUtDLFlBQUwsQ0FBa0IsTUFBbEIsRUFBMEIsRUFBMUI7QUFDQSxTQUFLQSxZQUFMLENBQWtCLG9CQUFsQixFQUF3QyxRQUF4QztBQUNBLFNBQUtBLFlBQUwsQ0FBa0IsMEJBQWxCLEVBQThDLFNBQTlDOztBQUVBLFNBQUtDLE1BQUw7QUFDRDs7QUFFREMscUJBQW1CO0FBQ2pCLFNBQUtKLFNBQUwsQ0FBZUssTUFBZixDQUFzQixTQUF0QjtBQUNEOztBQUVEQyxxQkFBbUIsQ0FBRTtBQUNyQkMsMkJBQXlCQyxJQUF6QixFQUErQkMsTUFBL0IsRUFBdUNDLE1BQXZDLEVBQStDLENBQUU7O0FBRWpEUCxXQUFTO0FBQ1AsU0FBS1EsU0FBTCxHQUFrQjtZQUNWLEtBQUtDLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBMkI7MEJBQ2IsS0FBS0EsWUFBTCxDQUFrQixRQUFsQixDQUE0QjtLQUZsRDtBQUlEOztBQUVEQyxTQUFPO0FBQ0wsU0FBS0MsZUFBTCxDQUFxQixNQUFyQjtBQUNEOztBQUVEQyxTQUFPO0FBQ0wsU0FBS2IsWUFBTCxDQUFrQixNQUFsQixFQUEwQixFQUExQjtBQUNEO0FBL0JtRDtBQUFBO0FBQUE7O0FBa0N0RGMsU0FBU0MsZUFBVCxDQUF5QixlQUF6QixFQUEwQ3BCLFlBQTFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vc3R5bGVzLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhdFRpdGxlYmFyIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjcmVhdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdsb2FkaW5nJylcblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdncmlkJywgJycpXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3ZlcnRpY2FsbHktYWxpZ25lZCcsICdjZW50ZXInKVxuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdob3Jpem9udGFsbHktZGlzdHJpYnV0ZWQnLCAnYmV0d2VlbicpXG5cbiAgICB0aGlzLnJlbmRlcigpXG4gIH1cblxuICBhdHRhY2hlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGluZycpXG4gIH1cblxuICBkZXRhY2hlZENhbGxiYWNrKCkge31cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIG9sZFZhbCwgbmV3VmFsKSB7fVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IGBcbiAgICAgIDxoNT4ke3RoaXMuZ2V0QXR0cmlidXRlKCd0aXRsZScpfTwvaDU+XG4gICAgICA8Y2hhdC1hdmF0YXIgc3JjPScke3RoaXMuZ2V0QXR0cmlidXRlKCdhdmF0YXInKX0nPjwvY2hhdC1hdmF0YXI+XG4gICAgYFxuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnaGlkZScpXG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdoaWRlJywgJycpXG4gIH1cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LXRpdGxlYmFyJywgQ2hhdFRpdGxlYmFyKVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvY2hhdC10aXRsZWJhci9jaGF0LXRpdGxlYmFyLmVsZW1lbnQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-titlebar/styles.css ***!
  \************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtdGl0bGViYXIvc3R5bGVzLmNzcz85NDVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvY2hhdC10aXRsZWJhci9zdHlsZXMuY3NzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!****************************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-authoring/chat-authoring.element.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css__ = __webpack_require__(/*! ./styles.css */ 12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__styles_css__);\n\n\n\n// TODO:\n// image upload?\n// markdown support?\nclass ChatAuthoring extends HTMLElement {\n  attachedCallback() {\n    this.setAttribute('contenteditable', '');\n  }\n\n  createdCallback() {\n    this.ChatUI = this.parentNode;\n    this.Scrollview = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-scrollview', this.parentNode);\n\n    this.addEventListener('focus', e => this.Scrollview.scrollToLatest());\n\n    this.addEventListener('keydown', e => {\n      let key = e.which || e.keyCode;\n\n      if (key === 13 && !e.shiftKey) {\n        e.preventDefault();\n        this.send();\n      }\n    });\n  }\n\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  send() {\n    this.ChatUI.newMessage({\n      mine: true,\n      type: 'HTML',\n      contents: this.innerHTML\n    });\n\n    this.innerHTML = '';\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-authoring', ChatAuthoring);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXV0aG9yaW5nL2NoYXQtYXV0aG9yaW5nLmVsZW1lbnQuanM/YWFhYiJdLCJuYW1lcyI6WyJDaGF0QXV0aG9yaW5nIiwiSFRNTEVsZW1lbnQiLCJhdHRhY2hlZENhbGxiYWNrIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlZENhbGxiYWNrIiwiQ2hhdFVJIiwicGFyZW50Tm9kZSIsIlNjcm9sbHZpZXciLCIkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzY3JvbGxUb0xhdGVzdCIsImtleSIsIndoaWNoIiwia2V5Q29kZSIsInNoaWZ0S2V5IiwicHJldmVudERlZmF1bHQiLCJzZW5kIiwiZGV0YWNoZWRDYWxsYmFjayIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImF0dHIiLCJvbGRWYWwiLCJuZXdWYWwiLCJuZXdNZXNzYWdlIiwibWluZSIsInR5cGUiLCJjb250ZW50cyIsImlubmVySFRNTCIsImRvY3VtZW50IiwicmVnaXN0ZXJFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNlLE1BQU1BLGFBQU4sU0FBNEJDLFdBQTVCLENBQXdDO0FBQ3JEQyxxQkFBbUI7QUFDakIsU0FBS0MsWUFBTCxDQUFrQixpQkFBbEIsRUFBcUMsRUFBckM7QUFDRDs7QUFFREMsb0JBQWtCO0FBQ2hCLFNBQUtDLE1BQUwsR0FBb0IsS0FBS0MsVUFBekI7QUFDQSxTQUFLQyxVQUFMLEdBQW9CLHVFQUFBQyxDQUFFLGlCQUFGLEVBQXFCLEtBQUtGLFVBQTFCLENBQXBCOztBQUVBLFNBQUtHLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCQyxLQUM3QixLQUFLSCxVQUFMLENBQWdCSSxjQUFoQixFQURGOztBQUdBLFNBQUtGLGdCQUFMLENBQXNCLFNBQXRCLEVBQWlDQyxLQUFLO0FBQ3BDLFVBQUlFLE1BQU1GLEVBQUVHLEtBQUYsSUFBV0gsRUFBRUksT0FBdkI7O0FBRUEsVUFBSUYsUUFBUSxFQUFSLElBQWMsQ0FBQ0YsRUFBRUssUUFBckIsRUFBK0I7QUFDN0JMLFVBQUVNLGNBQUY7QUFDQSxhQUFLQyxJQUFMO0FBQ0Q7QUFDRixLQVBEO0FBUUQ7O0FBRURDLHFCQUFtQixDQUFFO0FBQ3JCQywyQkFBeUJDLElBQXpCLEVBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0MsQ0FBRTs7QUFFakRMLFNBQU87QUFDTCxTQUFLWixNQUFMLENBQVlrQixVQUFaLENBQXVCO0FBQ3JCQyxZQUFVLElBRFc7QUFFckJDLFlBQVUsTUFGVztBQUdyQkMsZ0JBQVUsS0FBS0M7QUFITSxLQUF2Qjs7QUFNQSxTQUFLQSxTQUFMLEdBQWlCLEVBQWpCO0FBQ0Q7QUFqQ29EO0FBQUE7QUFBQTs7QUFvQ3ZEQyxTQUFTQyxlQUFULENBQXlCLGdCQUF6QixFQUEyQzdCLGFBQTNDIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCB9IGZyb20gJ3V0aWxpdGllcy9zaG9ydGhhbmRzJ1xuaW1wb3J0ICcuL3N0eWxlcy5jc3MnXG5cbi8vIFRPRE86XG4vLyBpbWFnZSB1cGxvYWQ/XG4vLyBtYXJrZG93biBzdXBwb3J0P1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhdEF1dGhvcmluZyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgYXR0YWNoZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgJycpXG4gIH1cblxuICBjcmVhdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5DaGF0VUkgICAgICAgPSB0aGlzLnBhcmVudE5vZGVcbiAgICB0aGlzLlNjcm9sbHZpZXcgICA9ICQoJ2NoYXQtc2Nyb2xsdmlldycsIHRoaXMucGFyZW50Tm9kZSlcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBlID0+IFxuICAgICAgdGhpcy5TY3JvbGx2aWV3LnNjcm9sbFRvTGF0ZXN0KCkpXG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICAgIGxldCBrZXkgPSBlLndoaWNoIHx8IGUua2V5Q29kZVxuXG4gICAgICBpZiAoa2V5ID09PSAxMyAmJiAhZS5zaGlmdEtleSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgdGhpcy5zZW5kKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZGV0YWNoZWRDYWxsYmFjaygpIHt9XG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBvbGRWYWwsIG5ld1ZhbCkge31cblxuICBzZW5kKCkge1xuICAgIHRoaXMuQ2hhdFVJLm5ld01lc3NhZ2Uoe1xuICAgICAgbWluZTogICAgIHRydWUsXG4gICAgICB0eXBlOiAgICAgJ0hUTUwnLFxuICAgICAgY29udGVudHM6IHRoaXMuaW5uZXJIVE1MXG4gICAgfSlcblxuICAgIHRoaXMuaW5uZXJIVE1MID0gJydcbiAgfVxufVxuXG5kb2N1bWVudC5yZWdpc3RlckVsZW1lbnQoJ2NoYXQtYXV0aG9yaW5nJywgQ2hhdEF1dGhvcmluZylcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXV0aG9yaW5nL2NoYXQtYXV0aG9yaW5nLmVsZW1lbnQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!*************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-authoring/styles.css ***!
  \*************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXV0aG9yaW5nL3N0eWxlcy5jc3M/MWZiMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXV0aG9yaW5nL3N0eWxlcy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!******************************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-scrollview/chat-scrollview.element.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css__ = __webpack_require__(/*! ./styles.css */ 14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__styles_css__);\n\n\n\nclass ChatScrollview extends HTMLElement {\n  attachedCallback() {}\n\n  createdCallback() {\n    this.Titlebar = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-titlebar', this.parentNode);\n\n    // show/hide based on scroll direction\n    // todo: debounce\n    this.onscroll = e => {\n      if (this.oldScroll > e.currentTarget.scrollTop && this.clientHeight + this.scrollTop != this.scrollHeight) this.Titlebar.hide();else this.Titlebar.show();\n\n      this.oldScroll = e.currentTarget.scrollTop;\n    };\n  }\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  scrollToLatest() {\n    Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-messagelist > *:last-child', this).scrollIntoView(); // {behavior:'smooth'}\n  }\n\n  atBottom() {\n    // 52 is the authoring component plus the margins around it\n    return this.clientHeight + this.scrollTop + 52 >= this.scrollHeight;\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-scrollview', ChatScrollview);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtc2Nyb2xsdmlldy9jaGF0LXNjcm9sbHZpZXcuZWxlbWVudC5qcz9lZjI3Il0sIm5hbWVzIjpbIkNoYXRTY3JvbGx2aWV3IiwiSFRNTEVsZW1lbnQiLCJhdHRhY2hlZENhbGxiYWNrIiwiY3JlYXRlZENhbGxiYWNrIiwiVGl0bGViYXIiLCIkIiwicGFyZW50Tm9kZSIsIm9uc2Nyb2xsIiwiZSIsIm9sZFNjcm9sbCIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxUb3AiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJoaWRlIiwic2hvdyIsImRldGFjaGVkQ2FsbGJhY2siLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJhdHRyIiwib2xkVmFsIiwibmV3VmFsIiwic2Nyb2xsVG9MYXRlc3QiLCJzY3JvbGxJbnRvVmlldyIsImF0Qm90dG9tIiwiZG9jdW1lbnQiLCJyZWdpc3RlckVsZW1lbnQiXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7O0FBRWUsTUFBTUEsY0FBTixTQUE2QkMsV0FBN0IsQ0FBeUM7QUFDdERDLHFCQUFtQixDQUFFOztBQUVyQkMsb0JBQWtCO0FBQ2hCLFNBQUtDLFFBQUwsR0FBZ0IsdUVBQUFDLENBQUUsZUFBRixFQUFtQixLQUFLQyxVQUF4QixDQUFoQjs7QUFFQTtBQUNBO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkMsS0FBSztBQUNuQixVQUFJLEtBQUtDLFNBQUwsR0FBaUJELEVBQUVFLGFBQUYsQ0FBZ0JDLFNBQWpDLElBQThDLEtBQUtDLFlBQUwsR0FBb0IsS0FBS0QsU0FBekIsSUFBc0MsS0FBS0UsWUFBN0YsRUFDRSxLQUFLVCxRQUFMLENBQWNVLElBQWQsR0FERixLQUdFLEtBQUtWLFFBQUwsQ0FBY1csSUFBZDs7QUFFRixXQUFLTixTQUFMLEdBQWlCRCxFQUFFRSxhQUFGLENBQWdCQyxTQUFqQztBQUNELEtBUEQ7QUFRRDtBQUNESyxxQkFBbUIsQ0FBRTtBQUNyQkMsMkJBQXlCQyxJQUF6QixFQUErQkMsTUFBL0IsRUFBdUNDLE1BQXZDLEVBQStDLENBQUU7O0FBRWpEQyxtQkFBaUI7QUFDZmhCLElBQUEsdUVBQUFBLENBQUUsaUNBQUYsRUFBcUMsSUFBckMsRUFDR2lCLGNBREgsR0FEZSxDQUVLO0FBQ3JCOztBQUVEQyxhQUFXO0FBQ1Q7QUFDQSxXQUFPLEtBQUtYLFlBQUwsR0FBb0IsS0FBS0QsU0FBekIsR0FBcUMsRUFBckMsSUFBMkMsS0FBS0UsWUFBdkQ7QUFDRDtBQTVCcUQ7QUFBQTtBQUFBOztBQStCeERXLFNBQVNDLGVBQVQsQ0FBeUIsaUJBQXpCLEVBQTRDekIsY0FBNUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAkIH0gZnJvbSAndXRpbGl0aWVzL3Nob3J0aGFuZHMnXG5pbXBvcnQgJy4vc3R5bGVzLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhdFNjcm9sbHZpZXcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGF0dGFjaGVkQ2FsbGJhY2soKSB7fVxuXG4gIGNyZWF0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLlRpdGxlYmFyID0gJCgnY2hhdC10aXRsZWJhcicsIHRoaXMucGFyZW50Tm9kZSlcblxuICAgIC8vIHNob3cvaGlkZSBiYXNlZCBvbiBzY3JvbGwgZGlyZWN0aW9uXG4gICAgLy8gdG9kbzogZGVib3VuY2VcbiAgICB0aGlzLm9uc2Nyb2xsID0gZSA9PiB7XG4gICAgICBpZiAodGhpcy5vbGRTY3JvbGwgPiBlLmN1cnJlbnRUYXJnZXQuc2Nyb2xsVG9wICYmIHRoaXMuY2xpZW50SGVpZ2h0ICsgdGhpcy5zY3JvbGxUb3AgIT0gdGhpcy5zY3JvbGxIZWlnaHQpXG4gICAgICAgIHRoaXMuVGl0bGViYXIuaGlkZSgpXG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuVGl0bGViYXIuc2hvdygpXG5cbiAgICAgIHRoaXMub2xkU2Nyb2xsID0gZS5jdXJyZW50VGFyZ2V0LnNjcm9sbFRvcFxuICAgIH1cbiAgfVxuICBkZXRhY2hlZENhbGxiYWNrKCkge31cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIG9sZFZhbCwgbmV3VmFsKSB7fVxuXG4gIHNjcm9sbFRvTGF0ZXN0KCkge1xuICAgICQoJ2NoYXQtbWVzc2FnZWxpc3QgPiAqOmxhc3QtY2hpbGQnLCB0aGlzKVxuICAgICAgLnNjcm9sbEludG9WaWV3KCkgLy8ge2JlaGF2aW9yOidzbW9vdGgnfVxuICB9XG5cbiAgYXRCb3R0b20oKSB7XG4gICAgLy8gNTIgaXMgdGhlIGF1dGhvcmluZyBjb21wb25lbnQgcGx1cyB0aGUgbWFyZ2lucyBhcm91bmQgaXRcbiAgICByZXR1cm4gdGhpcy5jbGllbnRIZWlnaHQgKyB0aGlzLnNjcm9sbFRvcCArIDUyID49IHRoaXMuc2Nyb2xsSGVpZ2h0XG4gIH1cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LXNjcm9sbHZpZXcnLCBDaGF0U2Nyb2xsdmlldylcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtc2Nyb2xsdmlldy9jaGF0LXNjcm9sbHZpZXcuZWxlbWVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!**************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-scrollview/styles.css ***!
  \**************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtc2Nyb2xsdmlldy9zdHlsZXMuY3NzPzQyOTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9jaGF0LXNjcm9sbHZpZXcvc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!********************************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-messagelist/chat-messagelist.element.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__renderers___ = __webpack_require__(/*! ../renderers/ */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css__ = __webpack_require__(/*! ./styles.css */ 24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_css__);\n\n\n\n\nclass ChatMessagelist extends HTMLElement {\n  attachedCallback() {}\n\n  createdCallback() {\n    Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"c\" /* setAttributes */])(this, {\n      'grid': 'rows',\n      'horizontally-aligned': 'right'\n    });\n\n    // loading strategy for when initialized but empty\n  }\n\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  add(payload) {\n    // HMmmmmm.. render logic needs to go here for:\n    // cards, images, and pretty much anything rich\n    if (payload.type !== 'Text' && payload.type !== 'HTML') {\n      let image_cluster = document.createElement('div');\n      image_cluster.innerHTML = __WEBPACK_IMPORTED_MODULE_1__renderers___[payload.type](payload);\n\n      // escape looking for latest cluster, dont need it with rich render types\n      return this.appendChild(image_cluster.children[0]);\n    }\n\n    // logic below will determine target cluster\n    let latest_cluster = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-cluster:last-of-type', this),\n        target_cluster;\n\n    // TODO: extract below logic flow to a testable function\n    // and unit test it\n\n    // determine proper cluster for incoming message based on messagelist state\n    if (payload.mine) {\n      // add to my current cluster (latest cluster is mine, message is mine)\n      if (latest_cluster.hasAttribute('mine')) target_cluster = latest_cluster;\n      // add to my current cluster and not a new one if they're only typing\n      else if (latest_cluster.hasAttribute('indeterminate')) {\n          // double check edge case (friend is writing, also latest cluster)\n          var doublecheck = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"b\" /* $$ */])('chat-cluster:not([indeterminate])', this);\n          // is the 2nd from end of the list mine or not?\n          if (!doublecheck[doublecheck.length - 1].hasAttribute('mine')) {\n            target_cluster = this.newCluster(payload);\n            this.appendChild(target_cluster);\n          } else {\n            // passed double check, target cluster is my most recent cluster\n            let mines = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"b\" /* $$ */])('chat-cluster[mine]', this);\n            target_cluster = mines[mines.length - 1];\n          }\n        }\n        // start new cluster for me (their cluster is latest, newest message is mine)\n        else {\n            target_cluster = this.newCluster(payload);\n            this.appendChild(target_cluster);\n          }\n    } else {\n      // add to their cluster (their cluster is latest, message is theirs)\n      if (!latest_cluster.hasAttribute('mine') && !latest_cluster.hasAttribute('indeterminate')) target_cluster = latest_cluster;\n      // add to their indeterminate cluster, remove indeterminate state\n      else if (latest_cluster.hasAttribute('indeterminate')) {\n          // double check that the cluster above the indeterminate cluster is not mine\n          var doublecheck = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"b\" /* $$ */])('chat-cluster:not([indeterminate])', this);\n          if (!doublecheck[doublecheck.length - 1].hasAttribute('mine')) {\n            target_cluster = doublecheck[doublecheck.length - 1];\n            // we're not indeterminate anymore\n            latest_cluster.remove();\n          } else {\n            // replace the message since it's already in a new cluster\n            target_cluster = latest_cluster;\n            Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-message', latest_cluster).remove();\n            latest_cluster.removeAttribute('indeterminate');\n          }\n        } else if (Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-cluster[indeterminate]:not([mine])', this)) {\n          Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-cluster[indeterminate]:not([mine])', this).remove();\n          target_cluster = this.newCluster(payload);\n          this.appendChild(target_cluster);\n        }\n        // start new cluster for them (mine is latest, newest message is theirs)\n        else {\n            target_cluster = this.newCluster(payload);\n            this.appendChild(target_cluster);\n          }\n    }\n\n    // finally pass payload to appropriate cluster\n    target_cluster.add(payload);\n  }\n\n  // TODO: move this logic to the ChatCluster class\n  newCluster({ mine = false, author = '' }) {\n    let cluster = document.createElement('chat-cluster');\n\n    // TODO: cross check author name instead of mine flag\n    // maybe even have done that check before calling this function\n    if (mine) cluster.setAttribute('mine', '');\n\n    cluster.innerHTML = `\n      <chat-avatar src='${author.avatar || ''}'></chat-avatar>\n      <section>\n        <h3>${author.name || ''}</h3>\n      </section>\n    `;\n\n    return cluster;\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-messagelist', ChatMessagelist);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/*!*****************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/html.js ***!
  \*****************************************************/
/*! exports provided: HTML */
/*! exports used: HTML */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_autolinker__ = __webpack_require__(/*! autolinker */ 17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_autolinker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_autolinker__);\n\n// TODO: \n// sanitize\nconst HTML = contents => Object(__WEBPACK_IMPORTED_MODULE_0_autolinker__[\"link\"])(contents);\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = HTML;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9odG1sLmpzPzM4ODUiXSwibmFtZXMiOlsiSFRNTCIsImNvbnRlbnRzIiwibGluayJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxPQUFPQyxZQUFZLHdEQUFBQyxDQUFLRCxRQUFMLENBQXpCLEMiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2xpbmt9IGZyb20gJ2F1dG9saW5rZXInXG4vLyBUT0RPOiBcbi8vIHNhbml0aXplXG5leHBvcnQgY29uc3QgSFRNTCA9IGNvbnRlbnRzID0+IGxpbmsoY29udGVudHMpXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9yZW5kZXJlcnMvaHRtbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!****************************************************!*\
  !*** ./node_modules/autolinker/dist/Autolinker.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! exports used: link */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Autolinker.js\n * 1.6.0\n *\n * Copyright(c) 2017 Gregory Jacobs <greg@greg-jacobs.com>\n * MIT License\n *\n * https://github.com/gregjacobs/Autolinker.js\n */\n;(function (root, factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.Autolinker = factory();\n\t}\n})(this, function () {\n\t/**\n  * @class Autolinker\n  * @extends Object\n  *\n  * Utility class used to process a given string of text, and wrap the matches in\n  * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n  *\n  * Any of the configuration options may be provided in an Object (map) provided\n  * to the Autolinker constructor, which will configure how the {@link #link link()}\n  * method will process the links.\n  *\n  * For example:\n  *\n  *     var autolinker = new Autolinker( {\n  *         newWindow : false,\n  *         truncate  : 30\n  *     } );\n  *\n  *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n  *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n  *\n  *\n  * The {@link #static-link static link()} method may also be used to inline\n  * options into a single call, which may be more convenient for one-off uses.\n  * For example:\n  *\n  *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n  *         newWindow : false,\n  *         truncate  : 30\n  *     } );\n  *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n  *\n  *\n  * ## Custom Replacements of Links\n  *\n  * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n  * may be provided to fully customize the output of Autolinker. This function is\n  * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram)\n  * match that is encountered.\n  *\n  * For example:\n  *\n  *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram)\n  *\n  *     var linkedText = Autolinker.link( input, {\n  *         replaceFn : function( match ) {\n  *             console.log( \"href = \", match.getAnchorHref() );\n  *             console.log( \"text = \", match.getAnchorText() );\n  *\n  *             switch( match.getType() ) {\n  *                 case 'url' :\n  *                     console.log( \"url: \", match.getUrl() );\n  *\n  *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n  *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n  *                         tag.setAttr( 'rel', 'nofollow' );\n  *                         tag.addClass( 'external-link' );\n  *\n  *                         return tag;\n  *\n  *                     } else {\n  *                         return true;  // let Autolinker perform its normal anchor tag replacement\n  *                     }\n  *\n  *                 case 'email' :\n  *                     var email = match.getEmail();\n  *                     console.log( \"email: \", email );\n  *\n  *                     if( email === \"my@own.address\" ) {\n  *                         return false;  // don't auto-link this particular email address; leave as-is\n  *                     } else {\n  *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n  *                     }\n  *\n  *                 case 'phone' :\n  *                     var phoneNumber = match.getPhoneNumber();\n  *                     console.log( phoneNumber );\n  *\n  *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n  *\n  *                 case 'hashtag' :\n  *                     var hashtag = match.getHashtag();\n  *                     console.log( hashtag );\n  *\n  *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n  *\n  *                 case 'mention' :\n  *                     var mention = match.getMention();\n  *                     console.log( mention );\n  *\n  *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n  *             }\n  *         }\n  *     } );\n  *\n  *\n  * The function may return the following values:\n  *\n  * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n  *   would.\n  * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n  * - Any String: If a string is returned from the function, the string will be\n  *   used directly as the replacement HTML for the match.\n  * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n  *   an HTML tag before writing out its HTML text.\n  *\n  * @constructor\n  * @param {Object} [cfg] The configuration options for the Autolinker instance,\n  *   specified in an Object (map).\n  */\n\tvar Autolinker = function (cfg) {\n\t\tcfg = cfg || {};\n\n\t\tthis.version = Autolinker.version;\n\n\t\tthis.urls = this.normalizeUrlsCfg(cfg.urls);\n\t\tthis.email = typeof cfg.email === 'boolean' ? cfg.email : true;\n\t\tthis.phone = typeof cfg.phone === 'boolean' ? cfg.phone : true;\n\t\tthis.hashtag = cfg.hashtag || false;\n\t\tthis.mention = cfg.mention || false;\n\t\tthis.newWindow = typeof cfg.newWindow === 'boolean' ? cfg.newWindow : true;\n\t\tthis.stripPrefix = this.normalizeStripPrefixCfg(cfg.stripPrefix);\n\t\tthis.stripTrailingSlash = typeof cfg.stripTrailingSlash === 'boolean' ? cfg.stripTrailingSlash : true;\n\t\tthis.decodePercentEncoding = typeof cfg.decodePercentEncoding === 'boolean' ? cfg.decodePercentEncoding : true;\n\n\t\t// Validate the value of the `mention` cfg\n\t\tvar mention = this.mention;\n\t\tif (mention !== false && mention !== 'twitter' && mention !== 'instagram') {\n\t\t\tthrow new Error(\"invalid `mention` cfg - see docs\");\n\t\t}\n\n\t\t// Validate the value of the `hashtag` cfg\n\t\tvar hashtag = this.hashtag;\n\t\tif (hashtag !== false && hashtag !== 'twitter' && hashtag !== 'facebook' && hashtag !== 'instagram') {\n\t\t\tthrow new Error(\"invalid `hashtag` cfg - see docs\");\n\t\t}\n\n\t\tthis.truncate = this.normalizeTruncateCfg(cfg.truncate);\n\t\tthis.className = cfg.className || '';\n\t\tthis.replaceFn = cfg.replaceFn || null;\n\t\tthis.context = cfg.context || this;\n\n\t\tthis.htmlParser = null;\n\t\tthis.matchers = null;\n\t\tthis.tagBuilder = null;\n\t};\n\n\t/**\n  * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n  * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n  * found within HTML tags.\n  *\n  * For instance, if given the text: `You should go to http://www.yahoo.com`,\n  * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n  *\n  * Example:\n  *\n  *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n  *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n  *\n  * @static\n  * @param {String} textOrHtml The HTML or text to find matches within (depending\n  *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n  *   {@link #hashtag}, and {@link #mention} options are enabled).\n  * @param {Object} [options] Any of the configuration options for the Autolinker\n  *   class, specified in an Object (map). See the class description for an\n  *   example call.\n  * @return {String} The HTML text, with matches automatically linked.\n  */\n\tAutolinker.link = function (textOrHtml, options) {\n\t\tvar autolinker = new Autolinker(options);\n\t\treturn autolinker.link(textOrHtml);\n\t};\n\n\t/**\n  * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n  * numbers, username handles, and hashtags (depending on the configuration\n  * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n  * objects describing those matches (without making any replacements).\n  *\n  * Note that if parsing multiple pieces of text, it is slightly more efficient\n  * to create an Autolinker instance, and use the instance-level {@link #parse}\n  * method.\n  *\n  * Example:\n  *\n  *     var matches = Autolinker.parse( \"Hello google.com, I am asdf@asdf.com\", {\n  *         urls: true,\n  *         email: true\n  *     } );\n  *\n  *     console.log( matches.length );           // 2\n  *     console.log( matches[ 0 ].getType() );   // 'url'\n  *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n  *     console.log( matches[ 1 ].getType() );   // 'email'\n  *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n  *\n  * @static\n  * @param {String} textOrHtml The HTML or text to find matches within\n  *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n  *   {@link #hashtag}, and {@link #mention} options are enabled).\n  * @param {Object} [options] Any of the configuration options for the Autolinker\n  *   class, specified in an Object (map). See the class description for an\n  *   example call.\n  * @return {Autolinker.match.Match[]} The array of Matches found in the\n  *   given input `textOrHtml`.\n  */\n\tAutolinker.parse = function (textOrHtml, options) {\n\t\tvar autolinker = new Autolinker(options);\n\t\treturn autolinker.parse(textOrHtml);\n\t};\n\n\t/**\n  * @static\n  * @property {String} version (readonly)\n  *\n  * The Autolinker version number in the form major.minor.patch\n  *\n  * Ex: 0.25.1\n  */\n\tAutolinker.version = '1.6.0';\n\n\tAutolinker.prototype = {\n\t\tconstructor: Autolinker, // fix constructor property\n\n\t\t/**\n   * @cfg {Boolean/Object} [urls]\n   *\n   * `true` if URLs should be automatically linked, `false` if they should not\n   * be. Defaults to `true`.\n   *\n   * Examples:\n   *\n   *     urls: true\n   *\n   *     // or\n   *\n   *     urls: {\n   *         schemeMatches : true,\n   *         wwwMatches    : true,\n   *         tldMatches    : true\n   *     }\n   *\n   * As shown above, this option also accepts an Object form with 3 properties\n   * to allow for more customization of what exactly gets linked. All default\n   * to `true`:\n   *\n   * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n   *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n   *   `false` to prevent these types of matches.\n   * @cfg {Boolean} [urls.wwwMatches] `true` to match urls found prefixed with\n   *   `'www.'`, i.e. `www.google.com`. `false` to prevent these types of\n   *   matches. Note that if the URL had a prefixed scheme, and\n   *   `schemeMatches` is true, it will still be linked.\n   * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n   *   level domains (.com, .net, etc.) that are not prefixed with a scheme or\n   *   `'www.'`. This option attempts to match anything that looks like a URL\n   *   in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc. `false`\n   *   to prevent these types of matches.\n   */\n\n\t\t/**\n   * @cfg {Boolean} [email=true]\n   *\n   * `true` if email addresses should be automatically linked, `false` if they\n   * should not be.\n   */\n\n\t\t/**\n   * @cfg {Boolean} [phone=true]\n   *\n   * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n   * `false` if they should not be.\n   */\n\n\t\t/**\n   * @cfg {Boolean/String} [hashtag=false]\n   *\n   * A string for the service name to have hashtags (ex: \"#myHashtag\")\n   * auto-linked to. The currently-supported values are:\n   *\n   * - 'twitter'\n   * - 'facebook'\n   * - 'instagram'\n   *\n   * Pass `false` to skip auto-linking of hashtags.\n   */\n\n\t\t/**\n   * @cfg {String/Boolean} [mention=false]\n   *\n   * A string for the service name to have mentions (ex: \"@myuser\")\n   * auto-linked to. The currently supported values are:\n   *\n   * - 'twitter'\n   * - 'instagram'\n   *\n   * Defaults to `false` to skip auto-linking of mentions.\n   */\n\n\t\t/**\n   * @cfg {Boolean} [newWindow=true]\n   *\n   * `true` if the links should open in a new window, `false` otherwise.\n   */\n\n\t\t/**\n   * @cfg {Boolean/Object} [stripPrefix]\n   *\n   * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n   * from the beginning of URL links' text, `false` otherwise. Defaults to\n   * `true`.\n   *\n   * Examples:\n   *\n   *     stripPrefix: true\n   *\n   *     // or\n   *\n   *     stripPrefix: {\n   *         scheme : true,\n   *         www    : true\n   *     }\n   *\n   * As shown above, this option also accepts an Object form with 2 properties\n   * to allow for more customization of what exactly is prevented from being\n   * displayed. Both default to `true`:\n   *\n   * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n   *   a URL match from being displayed to the user. Example:\n   *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n   *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n   *   will be removed, so as not to remove a potentially dangerous scheme\n   *   (such as `'file://'` or `'javascript:'`)\n   * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n   *   `'www.'` part of a URL match from being displayed to the user. Ex:\n   *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n   *   strip the `'www'`.\n   */\n\n\t\t/**\n   * @cfg {Boolean} [stripTrailingSlash=true]\n   *\n   * `true` to remove the trailing slash from URL matches, `false` to keep\n   *  the trailing slash.\n   *\n   *  Example when `true`: `http://google.com/` will be displayed as\n   *  `http://google.com`.\n   */\n\n\t\t/**\n   * @cfg {Boolean} [decodePercentEncoding=true]\n   *\n   * `true` to decode percent-encoded characters in URL matches, `false` to keep\n   *  the percent-encoded characters.\n   *\n   *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n   *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n   */\n\n\t\t/**\n   * @cfg {Number/Object} [truncate=0]\n   *\n   * ## Number Form\n   *\n   * A number for how many characters matched text should be truncated to\n   * inside the text of a link. If the matched text is over this number of\n   * characters, it will be truncated to this length by adding a two period\n   * ellipsis ('..') to the end of the string.\n   *\n   * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n   * truncated to 25 characters might look something like this:\n   * 'yahoo.com/some/long/pat..'\n   *\n   * Example Usage:\n   *\n   *     truncate: 25\n   *\n   *\n   *  Defaults to `0` for \"no truncation.\"\n   *\n   *\n   * ## Object Form\n   *\n   * An Object may also be provided with two properties: `length` (Number) and\n   * `location` (String). `location` may be one of the following: 'end'\n   * (default), 'middle', or 'smart'.\n   *\n   * Example Usage:\n   *\n   *     truncate: { length: 25, location: 'middle' }\n   *\n   * @cfg {Number} [truncate.length=0] How many characters to allow before\n   *   truncation will occur. Defaults to `0` for \"no truncation.\"\n   * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n   *\n   * - 'end' (default): will truncate up to the number of characters, and then\n   *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n   * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n   *   'yahoo.com/s..th/to/a/file'\n   * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n   *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n   *   attempting to make the URL human-readable before looking for a good\n   *   point to insert the ellipsis if it is still too long. Ex:\n   *   'yahoo.com/some..to/a/file'. For more details, see\n   *   {@link Autolinker.truncate.TruncateSmart}.\n   */\n\n\t\t/**\n   * @cfg {String} className\n   *\n   * A CSS class name to add to the generated links. This class will be added\n   * to all links, as well as this class plus match suffixes for styling\n   * url/email/phone/hashtag/mention links differently.\n   *\n   * For example, if this config is provided as \"myLink\", then:\n   *\n   * - URL links will have the CSS classes: \"myLink myLink-url\"\n   * - Email links will have the CSS classes: \"myLink myLink-email\", and\n   * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n   * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n   * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n   *   where [type] is either \"instagram\" or \"twitter\"\n   */\n\n\t\t/**\n   * @cfg {Function} replaceFn\n   *\n   * A function to individually process each match found in the input string.\n   *\n   * See the class's description for usage.\n   *\n   * The `replaceFn` can be called with a different context object (`this`\n   * reference) using the {@link #context} cfg.\n   *\n   * This function is called with the following parameter:\n   *\n   * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n   *   can be used to retrieve information about the match that the `replaceFn`\n   *   is currently processing. See {@link Autolinker.match.Match} subclasses\n   *   for details.\n   */\n\n\t\t/**\n   * @cfg {Object} context\n   *\n   * The context object (`this` reference) to call the `replaceFn` with.\n   *\n   * Defaults to this Autolinker instance.\n   */\n\n\t\t/**\n   * @property {String} version (readonly)\n   *\n   * The Autolinker version number in the form major.minor.patch\n   *\n   * Ex: 0.25.1\n   */\n\n\t\t/**\n   * @private\n   * @property {Autolinker.htmlParser.HtmlParser} htmlParser\n   *\n   * The HtmlParser instance used to skip over HTML tags, while finding text\n   * nodes to process. This is lazily instantiated in the {@link #getHtmlParser}\n   * method.\n   */\n\n\t\t/**\n   * @private\n   * @property {Autolinker.matcher.Matcher[]} matchers\n   *\n   * The {@link Autolinker.matcher.Matcher} instances for this Autolinker\n   * instance.\n   *\n   * This is lazily created in {@link #getMatchers}.\n   */\n\n\t\t/**\n   * @private\n   * @property {Autolinker.AnchorTagBuilder} tagBuilder\n   *\n   * The AnchorTagBuilder instance used to build match replacement anchor tags.\n   * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n   */\n\n\t\t/**\n   * Normalizes the {@link #urls} config into an Object with 3 properties:\n   * `schemeMatches`, `wwwMatches`, and `tldMatches`, all Booleans.\n   *\n   * See {@link #urls} config for details.\n   *\n   * @private\n   * @param {Boolean/Object} urls\n   * @return {Object}\n   */\n\t\tnormalizeUrlsCfg: function (urls) {\n\t\t\tif (urls == null) urls = true; // default to `true`\n\n\t\t\tif (typeof urls === 'boolean') {\n\t\t\t\treturn { schemeMatches: urls, wwwMatches: urls, tldMatches: urls };\n\t\t\t} else {\n\t\t\t\t// object form\n\t\t\t\treturn {\n\t\t\t\t\tschemeMatches: typeof urls.schemeMatches === 'boolean' ? urls.schemeMatches : true,\n\t\t\t\t\twwwMatches: typeof urls.wwwMatches === 'boolean' ? urls.wwwMatches : true,\n\t\t\t\t\ttldMatches: typeof urls.tldMatches === 'boolean' ? urls.tldMatches : true\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Normalizes the {@link #stripPrefix} config into an Object with 2\n   * properties: `scheme`, and `www` - both Booleans.\n   *\n   * See {@link #stripPrefix} config for details.\n   *\n   * @private\n   * @param {Boolean/Object} stripPrefix\n   * @return {Object}\n   */\n\t\tnormalizeStripPrefixCfg: function (stripPrefix) {\n\t\t\tif (stripPrefix == null) stripPrefix = true; // default to `true`\n\n\t\t\tif (typeof stripPrefix === 'boolean') {\n\t\t\t\treturn { scheme: stripPrefix, www: stripPrefix };\n\t\t\t} else {\n\t\t\t\t// object form\n\t\t\t\treturn {\n\t\t\t\t\tscheme: typeof stripPrefix.scheme === 'boolean' ? stripPrefix.scheme : true,\n\t\t\t\t\twww: typeof stripPrefix.www === 'boolean' ? stripPrefix.www : true\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Normalizes the {@link #truncate} config into an Object with 2 properties:\n   * `length` (Number), and `location` (String).\n   *\n   * See {@link #truncate} config for details.\n   *\n   * @private\n   * @param {Number/Object} truncate\n   * @return {Object}\n   */\n\t\tnormalizeTruncateCfg: function (truncate) {\n\t\t\tif (typeof truncate === 'number') {\n\t\t\t\treturn { length: truncate, location: 'end' };\n\t\t\t} else {\n\t\t\t\t// object, or undefined/null\n\t\t\t\treturn Autolinker.Util.defaults(truncate || {}, {\n\t\t\t\t\tlength: Number.POSITIVE_INFINITY,\n\t\t\t\t\tlocation: 'end'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches (without making any replacements).\n   *\n   * This method is used by the {@link #link} method, but can also be used to\n   * simply do parsing of the input in order to discover what kinds of links\n   * there are and how many.\n   *\n   * Example usage:\n   *\n   *     var autolinker = new Autolinker( {\n   *         urls: true,\n   *         email: true\n   *     } );\n   *\n   *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n   *\n   *     console.log( matches.length );           // 2\n   *     console.log( matches[ 0 ].getType() );   // 'url'\n   *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n   *     console.log( matches[ 1 ].getType() );   // 'email'\n   *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n   *\n   * @param {String} textOrHtml The HTML or text to find matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `textOrHtml`.\n   */\n\t\tparse: function (textOrHtml) {\n\t\t\tvar htmlParser = this.getHtmlParser(),\n\t\t\t    htmlNodes = htmlParser.parse(textOrHtml),\n\t\t\t    anchorTagStackCount = 0,\n\t\t\t    // used to only process text around anchor tags, and any inner text/html they may have;\n\t\t\tmatches = [];\n\n\t\t\t// Find all matches within the `textOrHtml` (but not matches that are\n\t\t\t// already nested within <a> tags)\n\t\t\tfor (var i = 0, len = htmlNodes.length; i < len; i++) {\n\t\t\t\tvar node = htmlNodes[i],\n\t\t\t\t    nodeType = node.getType();\n\n\t\t\t\tif (nodeType === 'element' && node.getTagName() === 'a') {\n\t\t\t\t\t// Process HTML anchor element nodes in the input `textOrHtml` to find out when we're within an <a> tag\n\t\t\t\t\tif (!node.isClosing()) {\n\t\t\t\t\t\t// it's the start <a> tag\n\t\t\t\t\t\tanchorTagStackCount++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it's the end </a> tag\n\t\t\t\t\t\tanchorTagStackCount = Math.max(anchorTagStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n\t\t\t\t\t}\n\t\t\t\t} else if (nodeType === 'text' && anchorTagStackCount === 0) {\n\t\t\t\t\t// Process text nodes that are not within an <a> tag\n\t\t\t\t\tvar textNodeMatches = this.parseText(node.getText(), node.getOffset());\n\n\t\t\t\t\tmatches.push.apply(matches, textNodeMatches);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// After we have found all matches, remove subsequent matches that\n\t\t\t// overlap with a previous match. This can happen for instance with URLs,\n\t\t\t// where the url 'google.com/#link' would match '#link' as a hashtag.\n\t\t\tmatches = this.compactMatches(matches);\n\n\t\t\t// And finally, remove matches for match types that have been turned\n\t\t\t// off. We needed to have all match types turned on initially so that\n\t\t\t// things like hashtags could be filtered out if they were really just\n\t\t\t// part of a URL match (for instance, as a named anchor).\n\t\t\tmatches = this.removeUnwantedMatches(matches);\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t/**\n   * After we have found all matches, we need to remove subsequent matches\n   * that overlap with a previous match. This can happen for instance with\n   * URLs, where the url 'google.com/#link' would match '#link' as a hashtag.\n   *\n   * @private\n   * @param {Autolinker.match.Match[]} matches\n   * @return {Autolinker.match.Match[]}\n   */\n\t\tcompactMatches: function (matches) {\n\t\t\t// First, the matches need to be sorted in order of offset\n\t\t\tmatches.sort(function (a, b) {\n\t\t\t\treturn a.getOffset() - b.getOffset();\n\t\t\t});\n\n\t\t\tfor (var i = 0; i < matches.length - 1; i++) {\n\t\t\t\tvar match = matches[i],\n\t\t\t\t    offset = match.getOffset(),\n\t\t\t\t    matchedTextLength = match.getMatchedText().length,\n\t\t\t\t    endIdx = offset + matchedTextLength;\n\n\t\t\t\tif (i + 1 < matches.length) {\n\t\t\t\t\t// Remove subsequent matches that equal offset with current match\n\t\t\t\t\tif (matches[i + 1].getOffset() === offset) {\n\t\t\t\t\t\tvar removeIdx = matches[i + 1].getMatchedText().length > matchedTextLength ? i : i + 1;\n\t\t\t\t\t\tmatches.splice(removeIdx, 1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove subsequent matches that overlap with the current match\n\t\t\t\t\tif (matches[i + 1].getOffset() <= endIdx) {\n\t\t\t\t\t\tmatches.splice(i + 1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t/**\n   * Removes matches for matchers that were turned off in the options. For\n   * example, if {@link #hashtag hashtags} were not to be matched, we'll\n   * remove them from the `matches` array here.\n   *\n   * @private\n   * @param {Autolinker.match.Match[]} matches The array of matches to remove\n   *   the unwanted matches from. Note: this array is mutated for the\n   *   removals.\n   * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n   */\n\t\tremoveUnwantedMatches: function (matches) {\n\t\t\tvar remove = Autolinker.Util.remove;\n\n\t\t\tif (!this.hashtag) remove(matches, function (match) {\n\t\t\t\treturn match.getType() === 'hashtag';\n\t\t\t});\n\t\t\tif (!this.email) remove(matches, function (match) {\n\t\t\t\treturn match.getType() === 'email';\n\t\t\t});\n\t\t\tif (!this.phone) remove(matches, function (match) {\n\t\t\t\treturn match.getType() === 'phone';\n\t\t\t});\n\t\t\tif (!this.mention) remove(matches, function (match) {\n\t\t\t\treturn match.getType() === 'mention';\n\t\t\t});\n\t\t\tif (!this.urls.schemeMatches) {\n\t\t\t\tremove(matches, function (m) {\n\t\t\t\t\treturn m.getType() === 'url' && m.getUrlMatchType() === 'scheme';\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (!this.urls.wwwMatches) {\n\t\t\t\tremove(matches, function (m) {\n\t\t\t\t\treturn m.getType() === 'url' && m.getUrlMatchType() === 'www';\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (!this.urls.tldMatches) {\n\t\t\t\tremove(matches, function (m) {\n\t\t\t\t\treturn m.getType() === 'url' && m.getUrlMatchType() === 'tld';\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t/**\n   * Parses the input `text` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches.\n   *\n   * This method processes a **non-HTML string**, and is used to parse and\n   * match within the text nodes of an HTML string. This method is used\n   * internally by {@link #parse}.\n   *\n   * @private\n   * @param {String} text The text to find matches within (depending on if the\n   *   {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n   * @param {Number} [offset=0] The offset of the text node within the\n   *   original string. This is used when parsing with the {@link #parse}\n   *   method to generate correct offsets within the {@link Autolinker.match.Match}\n   *   instances, but may be omitted if calling this method publicly.\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `text`.\n   */\n\t\tparseText: function (text, offset) {\n\t\t\toffset = offset || 0;\n\t\t\tvar matchers = this.getMatchers(),\n\t\t\t    matches = [];\n\n\t\t\tfor (var i = 0, numMatchers = matchers.length; i < numMatchers; i++) {\n\t\t\t\tvar textMatches = matchers[i].parseMatches(text);\n\n\t\t\t\t// Correct the offset of each of the matches. They are originally\n\t\t\t\t// the offset of the match within the provided text node, but we\n\t\t\t\t// need to correct them to be relative to the original HTML input\n\t\t\t\t// string (i.e. the one provided to #parse).\n\t\t\t\tfor (var j = 0, numTextMatches = textMatches.length; j < numTextMatches; j++) {\n\t\t\t\t\ttextMatches[j].setOffset(offset + textMatches[j].getOffset());\n\t\t\t\t}\n\n\t\t\t\tmatches.push.apply(matches, textMatches);\n\t\t\t}\n\t\t\treturn matches;\n\t\t},\n\n\t\t/**\n   * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n   * and Mentions (Twitter, Instagram) found in the given chunk of HTML. Does not link\n   * URLs found within HTML tags.\n   *\n   * For instance, if given the text: `You should go to http://www.yahoo.com`,\n   * then the result will be `You should go to\n   * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n   *\n   * This method finds the text around any HTML elements in the input\n   * `textOrHtml`, which will be the text that is processed. Any original HTML\n   * elements will be left as-is, as well as the text that is already wrapped\n   * in anchor (&lt;a&gt;) tags.\n   *\n   * @param {String} textOrHtml The HTML or text to autolink matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n   * @return {String} The HTML, with matches automatically linked.\n   */\n\t\tlink: function (textOrHtml) {\n\t\t\tif (!textOrHtml) {\n\t\t\t\treturn \"\";\n\t\t\t} // handle `null` and `undefined`\n\n\t\t\tvar matches = this.parse(textOrHtml),\n\t\t\t    newHtml = [],\n\t\t\t    lastIndex = 0;\n\n\t\t\tfor (var i = 0, len = matches.length; i < len; i++) {\n\t\t\t\tvar match = matches[i];\n\n\t\t\t\tnewHtml.push(textOrHtml.substring(lastIndex, match.getOffset()));\n\t\t\t\tnewHtml.push(this.createMatchReturnVal(match));\n\n\t\t\t\tlastIndex = match.getOffset() + match.getMatchedText().length;\n\t\t\t}\n\t\t\tnewHtml.push(textOrHtml.substring(lastIndex)); // handle the text after the last match\n\n\t\t\treturn newHtml.join('');\n\t\t},\n\n\t\t/**\n   * Creates the return string value for a given match in the input string.\n   *\n   * This method handles the {@link #replaceFn}, if one was provided.\n   *\n   * @private\n   * @param {Autolinker.match.Match} match The Match object that represents\n   *   the match.\n   * @return {String} The string that the `match` should be replaced with.\n   *   This is usually the anchor tag string, but may be the `matchStr` itself\n   *   if the match is not to be replaced.\n   */\n\t\tcreateMatchReturnVal: function (match) {\n\t\t\t// Handle a custom `replaceFn` being provided\n\t\t\tvar replaceFnResult;\n\t\t\tif (this.replaceFn) {\n\t\t\t\treplaceFnResult = this.replaceFn.call(this.context, match); // Autolinker instance is the context\n\t\t\t}\n\n\t\t\tif (typeof replaceFnResult === 'string') {\n\t\t\t\treturn replaceFnResult; // `replaceFn` returned a string, use that\n\t\t\t} else if (replaceFnResult === false) {\n\t\t\t\treturn match.getMatchedText(); // no replacement for the match\n\t\t\t} else if (replaceFnResult instanceof Autolinker.HtmlTag) {\n\t\t\t\treturn replaceFnResult.toAnchorString();\n\t\t\t} else {\n\t\t\t\t// replaceFnResult === true, or no/unknown return value from function\n\t\t\t\t// Perform Autolinker's default anchor tag generation\n\t\t\t\tvar anchorTag = match.buildTag(); // returns an Autolinker.HtmlTag instance\n\n\t\t\t\treturn anchorTag.toAnchorString();\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Lazily instantiates and returns the {@link #htmlParser} instance for this\n   * Autolinker instance.\n   *\n   * @protected\n   * @return {Autolinker.htmlParser.HtmlParser}\n   */\n\t\tgetHtmlParser: function () {\n\t\t\tvar htmlParser = this.htmlParser;\n\n\t\t\tif (!htmlParser) {\n\t\t\t\thtmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();\n\t\t\t}\n\n\t\t\treturn htmlParser;\n\t\t},\n\n\t\t/**\n   * Lazily instantiates and returns the {@link Autolinker.matcher.Matcher}\n   * instances for this Autolinker instance.\n   *\n   * @protected\n   * @return {Autolinker.matcher.Matcher[]}\n   */\n\t\tgetMatchers: function () {\n\t\t\tif (!this.matchers) {\n\t\t\t\tvar matchersNs = Autolinker.matcher,\n\t\t\t\t    tagBuilder = this.getTagBuilder();\n\n\t\t\t\tvar matchers = [new matchersNs.Hashtag({ tagBuilder: tagBuilder, serviceName: this.hashtag }), new matchersNs.Email({ tagBuilder: tagBuilder }), new matchersNs.Phone({ tagBuilder: tagBuilder }), new matchersNs.Mention({ tagBuilder: tagBuilder, serviceName: this.mention }), new matchersNs.Url({ tagBuilder: tagBuilder, stripPrefix: this.stripPrefix, stripTrailingSlash: this.stripTrailingSlash, decodePercentEncoding: this.decodePercentEncoding })];\n\n\t\t\t\treturn this.matchers = matchers;\n\t\t\t} else {\n\t\t\t\treturn this.matchers;\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it\n   * if it does not yet exist.\n   *\n   * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that\n   * Autolinker would normally generate, and then allow for modifications before returning it. For example:\n   *\n   *     var html = Autolinker.link( \"Test google.com\", {\n   *         replaceFn : function( match ) {\n   *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n   *             tag.setAttr( 'rel', 'nofollow' );\n   *\n   *             return tag;\n   *         }\n   *     } );\n   *\n   *     // generated html:\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n   *\n   * @return {Autolinker.AnchorTagBuilder}\n   */\n\t\tgetTagBuilder: function () {\n\t\t\tvar tagBuilder = this.tagBuilder;\n\n\t\t\tif (!tagBuilder) {\n\t\t\t\ttagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder({\n\t\t\t\t\tnewWindow: this.newWindow,\n\t\t\t\t\ttruncate: this.truncate,\n\t\t\t\t\tclassName: this.className\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn tagBuilder;\n\t\t}\n\n\t};\n\n\t// Autolinker Namespaces\n\n\tAutolinker.match = {};\n\tAutolinker.matcher = {};\n\tAutolinker.htmlParser = {};\n\tAutolinker.truncate = {};\n\n\t/*global Autolinker */\n\t/*jshint eqnull:true, boss:true */\n\t/**\n  * @class Autolinker.Util\n  * @singleton\n  *\n  * A few utility methods for Autolinker.\n  */\n\tAutolinker.Util = {\n\n\t\t/**\n   * @property {Function} abstractMethod\n   *\n   * A function object which represents an abstract method.\n   */\n\t\tabstractMethod: function () {\n\t\t\tthrow \"abstract\";\n\t\t},\n\n\t\t/**\n   * @private\n   * @property {RegExp} trimRegex\n   *\n   * The regular expression used to trim the leading and trailing whitespace\n   * from a string.\n   */\n\t\ttrimRegex: /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t\t/**\n   * Assigns (shallow copies) the properties of `src` onto `dest`.\n   *\n   * @param {Object} dest The destination object.\n   * @param {Object} src The source object.\n   * @return {Object} The destination object (`dest`)\n   */\n\t\tassign: function (dest, src) {\n\t\t\tfor (var prop in src) {\n\t\t\t\tif (src.hasOwnProperty(prop)) {\n\t\t\t\t\tdest[prop] = src[prop];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dest;\n\t\t},\n\n\t\t/**\n   * Assigns (shallow copies) the properties of `src` onto `dest`, if the\n   * corresponding property on `dest` === `undefined`.\n   *\n   * @param {Object} dest The destination object.\n   * @param {Object} src The source object.\n   * @return {Object} The destination object (`dest`)\n   */\n\t\tdefaults: function (dest, src) {\n\t\t\tfor (var prop in src) {\n\t\t\t\tif (src.hasOwnProperty(prop) && dest[prop] === undefined) {\n\t\t\t\t\tdest[prop] = src[prop];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dest;\n\t\t},\n\n\t\t/**\n   * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.\n   *\n   * @param {Function} superclass The constructor function for the superclass.\n   * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the\n   *   special property `constructor`, which will be used as the new subclass's constructor function.\n   * @return {Function} The new subclass function.\n   */\n\t\textend: function (superclass, protoProps) {\n\t\t\tvar superclassProto = superclass.prototype;\n\n\t\t\tvar F = function () {};\n\t\t\tF.prototype = superclassProto;\n\n\t\t\tvar subclass;\n\t\t\tif (protoProps.hasOwnProperty('constructor')) {\n\t\t\t\tsubclass = protoProps.constructor;\n\t\t\t} else {\n\t\t\t\tsubclass = function () {\n\t\t\t\t\tsuperclassProto.constructor.apply(this, arguments);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar subclassProto = subclass.prototype = new F(); // set up prototype chain\n\t\t\tsubclassProto.constructor = subclass; // fix constructor property\n\t\t\tsubclassProto.superclass = superclassProto;\n\n\t\t\tdelete protoProps.constructor; // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there\n\t\t\tAutolinker.Util.assign(subclassProto, protoProps);\n\n\t\t\treturn subclass;\n\t\t},\n\n\t\t/**\n   * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n   * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n   * `len`, the string will be returned unchanged.\n   *\n   * @param {String} str The string to truncate and add an ellipsis to.\n   * @param {Number} truncateLen The length to truncate the string at.\n   * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n   *   when truncated. Defaults to '...'\n   */\n\t\tellipsis: function (str, truncateLen, ellipsisChars) {\n\t\t\tvar ellipsisLength;\n\n\t\t\tif (str.length > truncateLen) {\n\t\t\t\tif (ellipsisChars == null) {\n\t\t\t\t\tellipsisChars = '&hellip;';\n\t\t\t\t\tellipsisLength = 3;\n\t\t\t\t} else {\n\t\t\t\t\tellipsisLength = ellipsisChars.length;\n\t\t\t\t}\n\n\t\t\t\tstr = str.substring(0, truncateLen - ellipsisLength) + ellipsisChars;\n\t\t\t}\n\t\t\treturn str;\n\t\t},\n\n\t\t/**\n   * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n   *\n   * @param {Array} arr The array to find an element of.\n   * @param {*} element The element to find in the array, and return the index of.\n   * @return {Number} The index of the `element`, or -1 if it was not found.\n   */\n\t\tindexOf: function (arr, element) {\n\t\t\tif (Array.prototype.indexOf) {\n\t\t\t\treturn arr.indexOf(element);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0, len = arr.length; i < len; i++) {\n\t\t\t\t\tif (arr[i] === element) return i;\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Removes array elements based on a filtering function. Mutates the input\n   * array.\n   *\n   * Using this instead of the ES5 Array.prototype.filter() function, to allow\n   * Autolinker compatibility with IE8, and also to prevent creating many new\n   * arrays in memory for filtering.\n   *\n   * @param {Array} arr The array to remove elements from. This array is\n   *   mutated.\n   * @param {Function} fn A function which should return `true` to\n   *   remove an element.\n   * @return {Array} The mutated input `arr`.\n   */\n\t\tremove: function (arr, fn) {\n\t\t\tfor (var i = arr.length - 1; i >= 0; i--) {\n\t\t\t\tif (fn(arr[i]) === true) {\n\t\t\t\t\tarr.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n   * with a regular expression that contains capturing parenthesis.\n   *\n   * For example:\n   *\n   *     // Modern browsers:\n   *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n   *\n   *     // Old IE (including IE8):\n   *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n   *\n   * This method emulates the functionality of modern browsers for the old IE case.\n   *\n   * @param {String} str The string to split.\n   * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n   *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\n   *   description of this method.\n   *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n   *   Note #2: for simplicity's sake, the regular expression does not need\n   *   to contain capturing parenthesis - it will be assumed that any match has them.\n   * @return {String[]} The split array of strings, with the splitting character(s) included.\n   */\n\t\tsplitAndCapture: function (str, splitRegex) {\n\t\t\tif (!splitRegex.global) throw new Error(\"`splitRegex` must have the 'g' flag set\");\n\n\t\t\tvar result = [],\n\t\t\t    lastIdx = 0,\n\t\t\t    match;\n\n\t\t\twhile (match = splitRegex.exec(str)) {\n\t\t\t\tresult.push(str.substring(lastIdx, match.index));\n\t\t\t\tresult.push(match[0]); // push the splitting char(s)\n\n\t\t\t\tlastIdx = match.index + match[0].length;\n\t\t\t}\n\t\t\tresult.push(str.substring(lastIdx));\n\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n   * Trims the leading and trailing whitespace from a string.\n   *\n   * @param {String} str The string to trim.\n   * @return {String}\n   */\n\t\ttrim: function (str) {\n\t\t\treturn str.replace(this.trimRegex, '');\n\t\t}\n\n\t};\n\n\t/*global Autolinker */\n\t/*jshint boss:true */\n\t/**\n  * @class Autolinker.HtmlTag\n  * @extends Object\n  *\n  * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n  *\n  * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n  * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n  *\n  * ## Examples\n  *\n  * Example instantiation:\n  *\n  *     var tag = new Autolinker.HtmlTag( {\n  *         tagName : 'a',\n  *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n  *         innerHtml : 'Google'\n  *     } );\n  *\n  *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n  *\n  *     // Individual accessor methods\n  *     tag.getTagName();                 // 'a'\n  *     tag.getAttr( 'href' );            // 'http://google.com'\n  *     tag.hasClass( 'external-link' );  // true\n  *\n  *\n  * Using mutator methods (which may be used in combination with instantiation config properties):\n  *\n  *     var tag = new Autolinker.HtmlTag();\n  *     tag.setTagName( 'a' );\n  *     tag.setAttr( 'href', 'http://google.com' );\n  *     tag.addClass( 'external-link' );\n  *     tag.setInnerHtml( 'Google' );\n  *\n  *     tag.getTagName();                 // 'a'\n  *     tag.getAttr( 'href' );            // 'http://google.com'\n  *     tag.hasClass( 'external-link' );  // true\n  *\n  *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n  *\n  *\n  * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n  *\n  *     var html = Autolinker.link( \"Test google.com\", {\n  *         replaceFn : function( match ) {\n  *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n  *             tag.setAttr( 'rel', 'nofollow' );\n  *\n  *             return tag;\n  *         }\n  *     } );\n  *\n  *     // generated html:\n  *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n  *\n  *\n  * ## Example use with a new tag for the replacement\n  *\n  *     var html = Autolinker.link( \"Test google.com\", {\n  *         replaceFn : function( match ) {\n  *             var tag = new Autolinker.HtmlTag( {\n  *                 tagName : 'button',\n  *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n  *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n  *             } );\n  *\n  *             return tag;\n  *         }\n  *     } );\n  *\n  *     // generated html:\n  *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n  */\n\tAutolinker.HtmlTag = Autolinker.Util.extend(Object, {\n\n\t\t/**\n   * @cfg {String} tagName\n   *\n   * The tag name. Ex: 'a', 'button', etc.\n   *\n   * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n   * is executed.\n   */\n\n\t\t/**\n   * @cfg {Object.<String, String>} attrs\n   *\n   * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n   * values are the attribute values.\n   */\n\n\t\t/**\n   * @cfg {String} innerHtml\n   *\n   * The inner HTML for the tag.\n   *\n   * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym\n   * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}\n   * if you prefer, but this one is recommended.\n   */\n\n\t\t/**\n   * @cfg {String} innerHTML\n   *\n   * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version\n   * for acronym names.\n   */\n\n\t\t/**\n   * @protected\n   * @property {RegExp} whitespaceRegex\n   *\n   * Regular expression used to match whitespace in a string of CSS classes.\n   */\n\t\twhitespaceRegex: /\\s+/,\n\n\t\t/**\n   * @constructor\n   * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.Util.assign(this, cfg);\n\n\t\t\tthis.innerHtml = this.innerHtml || this.innerHTML; // accept either the camelCased form or the fully capitalized acronym\n\t\t},\n\n\t\t/**\n   * Sets the tag name that will be used to generate the tag with.\n   *\n   * @param {String} tagName\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\tsetTagName: function (tagName) {\n\t\t\tthis.tagName = tagName;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n   * Retrieves the tag name.\n   *\n   * @return {String}\n   */\n\t\tgetTagName: function () {\n\t\t\treturn this.tagName || \"\";\n\t\t},\n\n\t\t/**\n   * Sets an attribute on the HtmlTag.\n   *\n   * @param {String} attrName The attribute name to set.\n   * @param {String} attrValue The attribute value to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\tsetAttr: function (attrName, attrValue) {\n\t\t\tvar tagAttrs = this.getAttrs();\n\t\t\ttagAttrs[attrName] = attrValue;\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n   * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n   *\n   * @param {String} attrName The attribute name to retrieve.\n   * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n   */\n\t\tgetAttr: function (attrName) {\n\t\t\treturn this.getAttrs()[attrName];\n\t\t},\n\n\t\t/**\n   * Sets one or more attributes on the HtmlTag.\n   *\n   * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\tsetAttrs: function (attrs) {\n\t\t\tvar tagAttrs = this.getAttrs();\n\t\t\tAutolinker.Util.assign(tagAttrs, attrs);\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n   * Retrieves the attributes Object (map) for the HtmlTag.\n   *\n   * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n   */\n\t\tgetAttrs: function () {\n\t\t\treturn this.attrs || (this.attrs = {});\n\t\t},\n\n\t\t/**\n   * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\tsetClass: function (cssClass) {\n\t\t\treturn this.setAttr('class', cssClass);\n\t\t},\n\n\t\t/**\n   * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to add.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\taddClass: function (cssClass) {\n\t\t\tvar classAttr = this.getClass(),\n\t\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t\t    indexOf = Autolinker.Util.indexOf,\n\t\t\t    // to support IE8 and below\n\t\t\tclasses = !classAttr ? [] : classAttr.split(whitespaceRegex),\n\t\t\t    newClasses = cssClass.split(whitespaceRegex),\n\t\t\t    newClass;\n\n\t\t\twhile (newClass = newClasses.shift()) {\n\t\t\t\tif (indexOf(classes, newClass) === -1) {\n\t\t\t\t\tclasses.push(newClass);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.getAttrs()['class'] = classes.join(\" \");\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n   * Convenience method to remove one or more CSS classes from the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to remove.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\tremoveClass: function (cssClass) {\n\t\t\tvar classAttr = this.getClass(),\n\t\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t\t    indexOf = Autolinker.Util.indexOf,\n\t\t\t    // to support IE8 and below\n\t\t\tclasses = !classAttr ? [] : classAttr.split(whitespaceRegex),\n\t\t\t    removeClasses = cssClass.split(whitespaceRegex),\n\t\t\t    removeClass;\n\n\t\t\twhile (classes.length && (removeClass = removeClasses.shift())) {\n\t\t\t\tvar idx = indexOf(classes, removeClass);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tclasses.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.getAttrs()['class'] = classes.join(\" \");\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n   * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n   * there are multiple.\n   *\n   * @return {String}\n   */\n\t\tgetClass: function () {\n\t\t\treturn this.getAttrs()['class'] || \"\";\n\t\t},\n\n\t\t/**\n   * Convenience method to check if the tag has a CSS class or not.\n   *\n   * @param {String} cssClass The CSS class to check for.\n   * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n   */\n\t\thasClass: function (cssClass) {\n\t\t\treturn (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n\t\t},\n\n\t\t/**\n   * Sets the inner HTML for the tag.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n\t\tsetInnerHtml: function (html) {\n\t\t\tthis.innerHtml = html;\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n   * Retrieves the inner HTML for the tag.\n   *\n   * @return {String}\n   */\n\t\tgetInnerHtml: function () {\n\t\t\treturn this.innerHtml || \"\";\n\t\t},\n\n\t\t/**\n   * Override of superclass method used to generate the HTML string for the tag.\n   *\n   * @return {String}\n   */\n\t\ttoAnchorString: function () {\n\t\t\tvar tagName = this.getTagName(),\n\t\t\t    attrsStr = this.buildAttrsStr();\n\n\t\t\tattrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n\n\t\t\treturn ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join(\"\");\n\t\t},\n\n\t\t/**\n   * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n   * the stringified HtmlTag.\n   *\n   * @protected\n   * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n   */\n\t\tbuildAttrsStr: function () {\n\t\t\tif (!this.attrs) return \"\"; // no `attrs` Object (map) has been set, return empty string\n\n\t\t\tvar attrs = this.getAttrs(),\n\t\t\t    attrsArr = [];\n\n\t\t\tfor (var prop in attrs) {\n\t\t\t\tif (attrs.hasOwnProperty(prop)) {\n\t\t\t\t\tattrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn attrsArr.join(\" \");\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.RegexLib\n  * @singleton\n  *\n  * Builds and stores a library of the common regular expressions used by the\n  * Autolinker utility.\n  *\n  * Other regular expressions may exist ad-hoc, but these are generally the\n  * regular expressions that are shared between source files.\n  */\n\tAutolinker.RegexLib = function () {\n\n\t\t/**\n   * The string form of a regular expression that would match all of the\n   * alphabetic (\"letter\") chars in the unicode character set when placed in a\n   * RegExp character class (`[]`). This includes all international alphabetic\n   * characters.\n   *\n   * These would be the characters matched by unicode regex engines `\\p{L}`\n   * escape (\"all letters\").\n   *\n   * Taken from the XRegExp library: http://xregexp.com/\n   * Specifically: http://xregexp.com/v/3.0.0/unicode-categories.js\n   *\n   * @private\n   * @type {String}\n   */\n\t\tvar alphaCharsStr = 'A-Za-z\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';\n\n\t\t/**\n   * The string form of a regular expression that would match all of the\n   * decimal number chars in the unicode character set when placed in a RegExp\n   * character class (`[]`).\n   *\n   * These would be the characters matched by unicode regex engines `\\p{Nd}`\n   * escape (\"all decimal numbers\")\n   *\n   * Taken from the XRegExp library: http://xregexp.com/\n   * Specifically: http://xregexp.com/v/3.0.0/unicode-categories.js\n   *\n   * @private\n   * @type {String}\n   */\n\t\tvar decimalNumbersStr = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\n\n\t\t// See documentation below\n\t\tvar alphaNumericCharsStr = alphaCharsStr + decimalNumbersStr;\n\n\t\t// Simplified IP regular expression\n\t\tvar ipRegex = new RegExp('(?:[' + decimalNumbersStr + ']{1,3}\\\\.){3}[' + decimalNumbersStr + ']{1,3}');\n\n\t\t// Protected domain label which do not allow \"-\" character on the beginning and the end of a single label\n\t\tvar domainLabelStr = '[' + alphaNumericCharsStr + '](?:[' + alphaNumericCharsStr + '\\\\-]*[' + alphaNumericCharsStr + '])?';\n\n\t\t// See documentation below\n\t\tvar domainNameRegex = new RegExp('(?:(?:(?:' + domainLabelStr + '\\\\.)*(?:' + domainLabelStr + '))|(?:' + ipRegex.source + '))');\n\n\t\treturn {\n\n\t\t\t/**\n    * The string form of a regular expression that would match all of the\n    * letters and decimal number chars in the unicode character set when placed\n    * in a RegExp character class (`[]`).\n    *\n    * These would be the characters matched by unicode regex engines `[\\p{L}\\p{Nd}]`\n    * escape (\"all letters and decimal numbers\")\n    *\n    * @property {String} alphaNumericCharsStr\n    */\n\t\t\talphaNumericCharsStr: alphaNumericCharsStr,\n\n\t\t\t/**\n    * The string form of a regular expression that would match all of the\n    * letters and in the unicode character set when placed\n    * in a RegExp character class (`[]`).\n    *\n    * These would be the characters matched by unicode regex engines `[\\p{L}]`\n    * escape (\"all letters\")\n    *\n    * @property {String} alphaCharsStr\n    */\n\t\t\talphaCharsStr: alphaCharsStr,\n\n\t\t\t/**\n    * A regular expression to match domain names of a URL or email address.\n    * Ex: 'google', 'yahoo', 'some-other-company', etc.\n    *\n    * @property {RegExp} domainNameRegex\n    */\n\t\t\tdomainNameRegex: domainNameRegex\n\n\t\t};\n\t}();\n\n\t/*global Autolinker */\n\t/*jshint sub:true */\n\t/**\n  * @protected\n  * @class Autolinker.AnchorTagBuilder\n  * @extends Object\n  *\n  * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\n  * found.\n  *\n  * Normally this class is instantiated, configured, and used internally by an\n  * {@link Autolinker} instance, but may actually be used indirectly in a\n  * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\n  * instances which may be modified before returning from the\n  * {@link Autolinker#replaceFn replaceFn}. For example:\n  *\n  *     var html = Autolinker.link( \"Test google.com\", {\n  *         replaceFn : function( match ) {\n  *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n  *             tag.setAttr( 'rel', 'nofollow' );\n  *\n  *             return tag;\n  *         }\n  *     } );\n  *\n  *     // generated html:\n  *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n  */\n\tAutolinker.AnchorTagBuilder = Autolinker.Util.extend(Object, {\n\n\t\t/**\n   * @cfg {Boolean} newWindow\n   * @inheritdoc Autolinker#newWindow\n   */\n\n\t\t/**\n   * @cfg {Object} truncate\n   * @inheritdoc Autolinker#truncate\n   */\n\n\t\t/**\n   * @cfg {String} className\n   * @inheritdoc Autolinker#className\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tcfg = cfg || {};\n\n\t\t\tthis.newWindow = cfg.newWindow;\n\t\t\tthis.truncate = cfg.truncate;\n\t\t\tthis.className = cfg.className;\n\t\t},\n\n\t\t/**\n   * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\n   * matched text, via its `match` object.\n   *\n   * @param {Autolinker.match.Match} match The Match instance to generate an\n   *   anchor tag from.\n   * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n   */\n\t\tbuild: function (match) {\n\t\t\treturn new Autolinker.HtmlTag({\n\t\t\t\ttagName: 'a',\n\t\t\t\tattrs: this.createAttrs(match),\n\t\t\t\tinnerHtml: this.processAnchorText(match.getAnchorText())\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\n   *   tag being generated.\n   *\n   * @protected\n   * @param {Autolinker.match.Match} match The Match instance to generate an\n   *   anchor tag from.\n   * @return {Object} A key/value Object (map) of the anchor tag's attributes.\n   */\n\t\tcreateAttrs: function (match) {\n\t\t\tvar attrs = {\n\t\t\t\t'href': match.getAnchorHref() // we'll always have the `href` attribute\n\t\t\t};\n\n\t\t\tvar cssClass = this.createCssClass(match);\n\t\t\tif (cssClass) {\n\t\t\t\tattrs['class'] = cssClass;\n\t\t\t}\n\t\t\tif (this.newWindow) {\n\t\t\t\tattrs['target'] = \"_blank\";\n\t\t\t\tattrs['rel'] = \"noopener noreferrer\";\n\t\t\t}\n\n\t\t\tif (this.truncate) {\n\t\t\t\tif (this.truncate.length && this.truncate.length < match.getAnchorText().length) {\n\t\t\t\t\tattrs['title'] = match.getAnchorHref();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn attrs;\n\t\t},\n\n\t\t/**\n   * Creates the CSS class that will be used for a given anchor tag, based on\n   * the `matchType` and the {@link #className} config.\n   *\n   * Example returns:\n   *\n   * - \"\"                                      // no {@link #className}\n   * - \"myLink myLink-url\"                     // url match\n   * - \"myLink myLink-email\"                   // email match\n   * - \"myLink myLink-phone\"                   // phone match\n   * - \"myLink myLink-hashtag\"                 // hashtag match\n   * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\n   *\n   * @private\n   * @param {Autolinker.match.Match} match The Match instance to generate an\n   *   anchor tag from.\n   * @return {String} The CSS class string for the link. Example return:\n   *   \"myLink myLink-url\". If no {@link #className} was configured, returns\n   *   an empty string.\n   */\n\t\tcreateCssClass: function (match) {\n\t\t\tvar className = this.className;\n\n\t\t\tif (!className) {\n\t\t\t\treturn \"\";\n\t\t\t} else {\n\t\t\t\tvar returnClasses = [className],\n\t\t\t\t    cssClassSuffixes = match.getCssClassSuffixes();\n\n\t\t\t\tfor (var i = 0, len = cssClassSuffixes.length; i < len; i++) {\n\t\t\t\t\treturnClasses.push(className + '-' + cssClassSuffixes[i]);\n\t\t\t\t}\n\t\t\t\treturn returnClasses.join(' ');\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Processes the `anchorText` by truncating the text according to the\n   * {@link #truncate} config.\n   *\n   * @private\n   * @param {String} anchorText The anchor tag's text (i.e. what will be\n   *   displayed).\n   * @return {String} The processed `anchorText`.\n   */\n\t\tprocessAnchorText: function (anchorText) {\n\t\t\tanchorText = this.doTruncate(anchorText);\n\n\t\t\treturn anchorText;\n\t\t},\n\n\t\t/**\n   * Performs the truncation of the `anchorText` based on the {@link #truncate}\n   * option. If the `anchorText` is longer than the length specified by the\n   * {@link #truncate} option, the truncation is performed based on the\n   * `location` property. See {@link #truncate} for details.\n   *\n   * @private\n   * @param {String} anchorText The anchor tag's text (i.e. what will be\n   *   displayed).\n   * @return {String} The truncated anchor text.\n   */\n\t\tdoTruncate: function (anchorText) {\n\t\t\tvar truncate = this.truncate;\n\t\t\tif (!truncate || !truncate.length) return anchorText;\n\n\t\t\tvar truncateLength = truncate.length,\n\t\t\t    truncateLocation = truncate.location;\n\n\t\t\tif (truncateLocation === 'smart') {\n\t\t\t\treturn Autolinker.truncate.TruncateSmart(anchorText, truncateLength);\n\t\t\t} else if (truncateLocation === 'middle') {\n\t\t\t\treturn Autolinker.truncate.TruncateMiddle(anchorText, truncateLength);\n\t\t\t} else {\n\t\t\t\treturn Autolinker.truncate.TruncateEnd(anchorText, truncateLength);\n\t\t\t}\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.htmlParser.HtmlParser\n  * @extends Object\n  *\n  * An HTML parser implementation which simply walks an HTML string and returns an array of\n  * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.\n  *\n  * Autolinker uses this to only link URLs/emails/mentions within text nodes, effectively ignoring / \"walking\n  * around\" HTML tags.\n  */\n\tAutolinker.htmlParser.HtmlParser = Autolinker.Util.extend(Object, {\n\n\t\t/**\n   * @private\n   * @property {RegExp} htmlRegex\n   *\n   * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and\n   * attribute names, as specified by http://www.w3.org/TR/html-markup/syntax.html.\n   *\n   * Capturing groups:\n   *\n   * 1. The \"!DOCTYPE\" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.\n   * 2. If it is an end tag, this group will have the '/'.\n   * 3. If it is a comment tag, this group will hold the comment text (i.e.\n   *    the text inside the `&lt;!--` and `--&gt;`.\n   * 4. The tag name for a tag without attributes (other than the &lt;!DOCTYPE&gt; tag)\n   * 5. The tag name for a tag with attributes (other than the &lt;!DOCTYPE&gt; tag)\n   */\n\t\thtmlRegex: function () {\n\t\t\tvar commentTagRegex = /!--([\\s\\S]+?)--/,\n\t\t\t    tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,\n\t\t\t    attrNameRegex = /[^\\s\"'>\\/=\\x00-\\x1F\\x7F]+/,\n\t\t\t    // the unicode range accounts for excluding control chars, and the delete char\n\t\t\tattrValueRegex = /(?:\"[^\"]*?\"|'[^']*?'|[^'\"=<>`\\s]+)/,\n\t\t\t    // double quoted, single quoted, or unquoted attribute values\n\t\t\tnameEqualsValueRegex = attrNameRegex.source + '(?:\\\\s*=\\\\s*' + attrValueRegex.source + ')?'; // optional '=[value]'\n\n\t\t\treturn new RegExp([\n\t\t\t// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">)\n\t\t\t'(?:', '<(!DOCTYPE)', // *** Capturing Group 1 - If it's a doctype tag\n\n\t\t\t// Zero or more attributes following the tag name\n\t\t\t'(?:', '\\\\s+', // one or more whitespace chars before an attribute\n\n\t\t\t// Either:\n\t\t\t// A. attr=\"value\", or\n\t\t\t// B. \"value\" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">)\n\t\t\t'(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')', ')*', '>', ')', '|',\n\n\t\t\t// All other HTML tags (i.e. tags that are not <!DOCTYPE>)\n\t\t\t'(?:', '<(/)?', // Beginning of a tag or comment. Either '<' for a start tag, or '</' for an end tag.\n\t\t\t// *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.\n\n\t\t\t'(?:', commentTagRegex.source, // *** Capturing Group 3 - A Comment Tag's Text\n\n\t\t\t'|',\n\n\t\t\t// Handle tag without attributes.\n\t\t\t// Doing this separately from a tag that has attributes\n\t\t\t// to fix a regex time complexity issue seen with the\n\t\t\t// example in https://github.com/gregjacobs/Autolinker.js/issues/172\n\t\t\t'(?:',\n\t\t\t// *** Capturing Group 4 - The tag name for a tag without attributes\n\t\t\t'(' + tagNameRegex.source + ')', '\\\\s*/?', // any trailing spaces and optional '/' before the closing '>'\n\t\t\t')', '|',\n\n\t\t\t// Handle tag with attributes\n\t\t\t// Doing this separately from a tag with no attributes\n\t\t\t// to fix a regex time complexity issue seen with the\n\t\t\t// example in https://github.com/gregjacobs/Autolinker.js/issues/172\n\t\t\t'(?:',\n\t\t\t// *** Capturing Group 5 - The tag name for a tag with attributes\n\t\t\t'(' + tagNameRegex.source + ')', '\\\\s+', // must have at least one space after the tag name to prevent ReDoS issue (issue #172)\n\n\t\t\t// Zero or more attributes following the tag name\n\t\t\t'(?:', '(?:\\\\s+|\\\\b)', // any number of whitespace chars before an attribute. NOTE: Using \\s* here throws Chrome into an infinite loop for some reason, so using \\s+|\\b instead\n\t\t\tnameEqualsValueRegex, // attr=\"value\" (with optional =\"value\" part)\n\t\t\t')*', '\\\\s*/?', // any trailing spaces and optional '/' before the closing '>'\n\t\t\t')', ')', '>', ')'].join(\"\"), 'gi');\n\t\t}(),\n\n\t\t/**\n   * @private\n   * @property {RegExp} htmlCharacterEntitiesRegex\n   *\n   * The regular expression that matches common HTML character entities.\n   *\n   * Ignoring &amp; as it could be part of a query string -- handling it separately.\n   */\n\t\thtmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,\n\n\t\t/**\n   * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes}\n   * to represent the HTML structure of the input string.\n   *\n   * @param {String} html The HTML to parse.\n   * @return {Autolinker.htmlParser.HtmlNode[]}\n   */\n\t\tparse: function (html) {\n\t\t\tvar htmlRegex = this.htmlRegex,\n\t\t\t    currentResult,\n\t\t\t    lastIndex = 0,\n\t\t\t    textAndEntityNodes,\n\t\t\t    nodes = []; // will be the result of the method\n\n\t\t\twhile ((currentResult = htmlRegex.exec(html)) !== null) {\n\t\t\t\tvar tagText = currentResult[0],\n\t\t\t\t    commentText = currentResult[3],\n\t\t\t\t    // if we've matched a comment\n\t\t\t\ttagName = currentResult[1] || currentResult[4] || currentResult[5],\n\t\t\t\t    // The <!DOCTYPE> tag (ex: \"!DOCTYPE\"), or another tag (ex: \"a\" or \"img\")\n\t\t\t\tisClosingTag = !!currentResult[2],\n\t\t\t\t    offset = currentResult.index,\n\t\t\t\t    inBetweenTagsText = html.substring(lastIndex, offset);\n\n\t\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\t\tif (inBetweenTagsText) {\n\t\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes(lastIndex, inBetweenTagsText);\n\t\t\t\t\tnodes.push.apply(nodes, textAndEntityNodes);\n\t\t\t\t}\n\n\t\t\t\t// Push the CommentNode or ElementNode\n\t\t\t\tif (commentText) {\n\t\t\t\t\tnodes.push(this.createCommentNode(offset, tagText, commentText));\n\t\t\t\t} else {\n\t\t\t\t\tnodes.push(this.createElementNode(offset, tagText, tagName, isClosingTag));\n\t\t\t\t}\n\n\t\t\t\tlastIndex = offset + tagText.length;\n\t\t\t}\n\n\t\t\t// Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.\n\t\t\tif (lastIndex < html.length) {\n\t\t\t\tvar text = html.substring(lastIndex);\n\n\t\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\t\tif (text) {\n\t\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes(lastIndex, text);\n\n\t\t\t\t\t// Note: the following 3 lines were previously:\n\t\t\t\t\t//   nodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t\t\t// but this was causing a \"Maximum Call Stack Size Exceeded\"\n\t\t\t\t\t// error on inputs with a large number of html entities.\n\t\t\t\t\ttextAndEntityNodes.forEach(function (node) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nodes;\n\t\t},\n\n\t\t/**\n   * Parses text and HTML entity nodes from a given string. The input string\n   * should not have any HTML tags (elements) within it.\n   *\n   * @private\n   * @param {Number} offset The offset of the text node match within the\n   *   original HTML string.\n   * @param {String} text The string of text to parse. This is from an HTML\n   *   text node.\n   * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to\n   *   represent the {@link Autolinker.htmlParser.TextNode TextNodes} and\n   *   {@link Autolinker.htmlParser.EntityNode EntityNodes} found.\n   */\n\t\tparseTextAndEntityNodes: function (offset, text) {\n\t\t\tvar nodes = [],\n\t\t\t    textAndEntityTokens = Autolinker.Util.splitAndCapture(text, this.htmlCharacterEntitiesRegex); // split at HTML entities, but include the HTML entities in the results array\n\n\t\t\t// Every even numbered token is a TextNode, and every odd numbered token is an EntityNode\n\t\t\t// For example: an input `text` of \"Test &quot;this&quot; today\" would turn into the\n\t\t\t//   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]\n\t\t\tfor (var i = 0, len = textAndEntityTokens.length; i < len; i += 2) {\n\t\t\t\tvar textToken = textAndEntityTokens[i],\n\t\t\t\t    entityToken = textAndEntityTokens[i + 1];\n\n\t\t\t\tif (textToken) {\n\t\t\t\t\tnodes.push(this.createTextNode(offset, textToken));\n\t\t\t\t\toffset += textToken.length;\n\t\t\t\t}\n\t\t\t\tif (entityToken) {\n\t\t\t\t\tnodes.push(this.createEntityNode(offset, entityToken));\n\t\t\t\t\toffset += entityToken.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nodes;\n\t\t},\n\n\t\t/**\n   * Factory method to create an {@link Autolinker.htmlParser.CommentNode CommentNode}.\n   *\n   * @private\n   * @param {Number} offset The offset of the match within the original HTML\n   *   string.\n   * @param {String} tagText The full text of the tag (comment) that was\n   *   matched, including its &lt;!-- and --&gt;.\n   * @param {String} commentText The full text of the comment that was matched.\n   */\n\t\tcreateCommentNode: function (offset, tagText, commentText) {\n\t\t\treturn new Autolinker.htmlParser.CommentNode({\n\t\t\t\toffset: offset,\n\t\t\t\ttext: tagText,\n\t\t\t\tcomment: Autolinker.Util.trim(commentText)\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.\n   *\n   * @private\n   * @param {Number} offset The offset of the match within the original HTML\n   *   string.\n   * @param {String} tagText The full text of the tag (element) that was\n   *   matched, including its attributes.\n   * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would\n   *   be passed to this method as \"img\".\n   * @param {Boolean} isClosingTag `true` if it's a closing tag, false\n   *   otherwise.\n   * @return {Autolinker.htmlParser.ElementNode}\n   */\n\t\tcreateElementNode: function (offset, tagText, tagName, isClosingTag) {\n\t\t\treturn new Autolinker.htmlParser.ElementNode({\n\t\t\t\toffset: offset,\n\t\t\t\ttext: tagText,\n\t\t\t\ttagName: tagName.toLowerCase(),\n\t\t\t\tclosing: isClosingTag\n\t\t\t});\n\t\t},\n\n\t\t/**\n   * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.\n   *\n   * @private\n   * @param {Number} offset The offset of the match within the original HTML\n   *   string.\n   * @param {String} text The text that was matched for the HTML entity (such\n   *   as '&amp;nbsp;').\n   * @return {Autolinker.htmlParser.EntityNode}\n   */\n\t\tcreateEntityNode: function (offset, text) {\n\t\t\treturn new Autolinker.htmlParser.EntityNode({ offset: offset, text: text });\n\t\t},\n\n\t\t/**\n   * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.\n   *\n   * @private\n   * @param {Number} offset The offset of the match within the original HTML\n   *   string.\n   * @param {String} text The text that was matched.\n   * @return {Autolinker.htmlParser.TextNode}\n   */\n\t\tcreateTextNode: function (offset, text) {\n\t\t\treturn new Autolinker.htmlParser.TextNode({ offset: offset, text: text });\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @abstract\n  * @class Autolinker.htmlParser.HtmlNode\n  *\n  * Represents an HTML node found in an input string. An HTML node is one of the\n  * following:\n  *\n  * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents\n  *    HTML tags.\n  * 2. A {@link Autolinker.htmlParser.CommentNode CommentNode}, which represents\n  *    HTML comments.\n  * 3. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text\n  *    outside or within HTML tags.\n  * 4. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents\n  *    one of the known HTML entities that Autolinker looks for. This includes\n  *    common ones such as &amp;quot; and &amp;nbsp;\n  */\n\tAutolinker.htmlParser.HtmlNode = Autolinker.Util.extend(Object, {\n\n\t\t/**\n   * @cfg {Number} offset (required)\n   *\n   * The offset of the HTML node in the original text that was parsed.\n   */\n\t\toffset: undefined,\n\n\t\t/**\n   * @cfg {String} text (required)\n   *\n   * The text that was matched for the HtmlNode.\n   *\n   * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode},\n   *   this will be the tag's text.\n   * - In the case of an {@link Autolinker.htmlParser.CommentNode CommentNode},\n   *   this will be the comment's text.\n   * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this\n   *   will be the text itself.\n   * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode},\n   *   this will be the text of the HTML entity.\n   */\n\t\ttext: undefined,\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   * specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.Util.assign(this, cfg);\n\n\t\t\tif (this.offset == null) throw new Error('`offset` cfg required');\n\t\t\tif (this.text == null) throw new Error('`text` cfg required');\n\t\t},\n\n\t\t/**\n   * Returns a string name for the type of node that this class represents.\n   *\n   * @abstract\n   * @return {String}\n   */\n\t\tgetType: Autolinker.Util.abstractMethod,\n\n\t\t/**\n   * Retrieves the {@link #offset} of the HtmlNode. This is the offset of the\n   * HTML node in the original string that was parsed.\n   *\n   * @return {Number}\n   */\n\t\tgetOffset: function () {\n\t\t\treturn this.offset;\n\t\t},\n\n\t\t/**\n   * Retrieves the {@link #text} for the HtmlNode.\n   *\n   * @return {String}\n   */\n\t\tgetText: function () {\n\t\t\treturn this.text;\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.htmlParser.CommentNode\n  * @extends Autolinker.htmlParser.HtmlNode\n  *\n  * Represents an HTML comment node that has been parsed by the\n  * {@link Autolinker.htmlParser.HtmlParser}.\n  *\n  * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more\n  * details.\n  */\n\tAutolinker.htmlParser.CommentNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n\n\t\t/**\n   * @cfg {String} comment (required)\n   *\n   * The text inside the comment tag. This text is stripped of any leading or\n   * trailing whitespace.\n   */\n\t\tcomment: '',\n\n\t\t/**\n   * Returns a string name for the type of node that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'comment';\n\t\t},\n\n\t\t/**\n   * Returns the comment inside the comment tag.\n   *\n   * @return {String}\n   */\n\t\tgetComment: function () {\n\t\t\treturn this.comment;\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.htmlParser.ElementNode\n  * @extends Autolinker.htmlParser.HtmlNode\n  *\n  * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n  *\n  * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more\n  * details.\n  */\n\tAutolinker.htmlParser.ElementNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n\n\t\t/**\n   * @cfg {String} tagName (required)\n   *\n   * The name of the tag that was matched.\n   */\n\t\ttagName: '',\n\n\t\t/**\n   * @cfg {Boolean} closing (required)\n   *\n   * `true` if the element (tag) is a closing tag, `false` if its an opening\n   * tag.\n   */\n\t\tclosing: false,\n\n\t\t/**\n   * Returns a string name for the type of node that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'element';\n\t\t},\n\n\t\t/**\n   * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag,\n   * returns \"img\".\n   *\n   * @return {String}\n   */\n\t\tgetTagName: function () {\n\t\t\treturn this.tagName;\n\t\t},\n\n\t\t/**\n   * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt;\n   * returns `false`, while &lt;/div&gt; returns `true`.\n   *\n   * @return {Boolean}\n   */\n\t\tisClosing: function () {\n\t\t\treturn this.closing;\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.htmlParser.EntityNode\n  * @extends Autolinker.htmlParser.HtmlNode\n  *\n  * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n  * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText}\n  * method.\n  *\n  * Note that this class will only be returned from the HtmlParser for the set of\n  * checked HTML entity nodes  defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.\n  *\n  * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more\n  * details.\n  */\n\tAutolinker.htmlParser.EntityNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n\n\t\t/**\n   * Returns a string name for the type of node that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'entity';\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.htmlParser.TextNode\n  * @extends Autolinker.htmlParser.HtmlNode\n  *\n  * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n  *\n  * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more\n  * details.\n  */\n\tAutolinker.htmlParser.TextNode = Autolinker.Util.extend(Autolinker.htmlParser.HtmlNode, {\n\n\t\t/**\n   * Returns a string name for the type of node that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'text';\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @abstract\n  * @class Autolinker.match.Match\n  *\n  * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n  * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n  *\n  * For example:\n  *\n  *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram)\n  *\n  *     var linkedText = Autolinker.link( input, {\n  *         replaceFn : function( match ) {\n  *             console.log( \"href = \", match.getAnchorHref() );\n  *             console.log( \"text = \", match.getAnchorText() );\n  *\n  *             switch( match.getType() ) {\n  *                 case 'url' :\n  *                     console.log( \"url: \", match.getUrl() );\n  *\n  *                 case 'email' :\n  *                     console.log( \"email: \", match.getEmail() );\n  *\n  *                 case 'mention' :\n  *                     console.log( \"mention: \", match.getMention() );\n  *             }\n  *         }\n  *     } );\n  *\n  * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n  */\n\tAutolinker.match.Match = Autolinker.Util.extend(Object, {\n\n\t\t/**\n   * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n   *\n   * Reference to the AnchorTagBuilder instance to use to generate an anchor\n   * tag for the Match.\n   */\n\n\t\t/**\n   * @cfg {String} matchedText (required)\n   *\n   * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n   */\n\n\t\t/**\n   * @cfg {Number} offset (required)\n   *\n   * The offset of where the match was made in the input string.\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tif (cfg.tagBuilder == null) throw new Error('`tagBuilder` cfg required');\n\t\t\tif (cfg.matchedText == null) throw new Error('`matchedText` cfg required');\n\t\t\tif (cfg.offset == null) throw new Error('`offset` cfg required');\n\n\t\t\tthis.tagBuilder = cfg.tagBuilder;\n\t\t\tthis.matchedText = cfg.matchedText;\n\t\t\tthis.offset = cfg.offset;\n\t\t},\n\n\t\t/**\n   * Returns a string name for the type of match that this class represents.\n   *\n   * @abstract\n   * @return {String}\n   */\n\t\tgetType: Autolinker.Util.abstractMethod,\n\n\t\t/**\n   * Returns the original text that was matched.\n   *\n   * @return {String}\n   */\n\t\tgetMatchedText: function () {\n\t\t\treturn this.matchedText;\n\t\t},\n\n\t\t/**\n   * Sets the {@link #offset} of where the match was made in the input string.\n   *\n   * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n   * and will therefore set an original offset that is relative to the HTML\n   * text node itself. However, we want this offset to be relative to the full\n   * HTML input string, and thus if using {@link Autolinker#parse} (rather\n   * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n   * offset is corrected after the Matcher itself has done its job.\n   *\n   * @param {Number} offset\n   */\n\t\tsetOffset: function (offset) {\n\t\t\tthis.offset = offset;\n\t\t},\n\n\t\t/**\n   * Returns the offset of where the match was made in the input string. This\n   * is the 0-based index of the match.\n   *\n   * @return {Number}\n   */\n\t\tgetOffset: function () {\n\t\t\treturn this.offset;\n\t\t},\n\n\t\t/**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @abstract\n   * @return {String}\n   */\n\t\tgetAnchorHref: Autolinker.Util.abstractMethod,\n\n\t\t/**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @abstract\n   * @return {String}\n   */\n\t\tgetAnchorText: Autolinker.Util.abstractMethod,\n\n\t\t/**\n   * Returns the CSS class suffix(es) for this match.\n   *\n   * A CSS class suffix is appended to the {@link Autolinker#className} in\n   * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n   * an anchor tag.\n   *\n   * For example, if {@link Autolinker#className} was configured as 'myLink',\n   * and this method returns `[ 'url' ]`, the final class name of the element\n   * will become: 'myLink myLink-url'.\n   *\n   * The match may provide multiple CSS class suffixes to be appended to the\n   * {@link Autolinker#className} in order to facilitate better styling\n   * options for different match criteria. See {@link Autolinker.match.Mention}\n   * for an example.\n   *\n   * By default, this method returns a single array with the match's\n   * {@link #getType type} name, but may be overridden by subclasses.\n   *\n   * @return {String[]}\n   */\n\t\tgetCssClassSuffixes: function () {\n\t\t\treturn [this.getType()];\n\t\t},\n\n\t\t/**\n   * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n   * Match.\n   *\n   * This can be used to easily generate anchor tags from matches, and either\n   * return their HTML string, or modify them before doing so.\n   *\n   * Example Usage:\n   *\n   *     var tag = match.buildTag();\n   *     tag.addClass( 'cordova-link' );\n   *     tag.setAttr( 'target', '_system' );\n   *\n   *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n   */\n\t\tbuildTag: function () {\n\t\t\treturn this.tagBuilder.build(this);\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.match.Email\n  * @extends Autolinker.match.Match\n  *\n  * Represents a Email match found in an input string which should be Autolinked.\n  *\n  * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n  */\n\tAutolinker.match.Email = Autolinker.Util.extend(Autolinker.match.Match, {\n\n\t\t/**\n   * @cfg {String} email (required)\n   *\n   * The email address that was matched.\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.match.Match.prototype.constructor.call(this, cfg);\n\n\t\t\tif (!cfg.email) throw new Error('`email` cfg required');\n\n\t\t\tthis.email = cfg.email;\n\t\t},\n\n\t\t/**\n   * Returns a string name for the type of match that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'email';\n\t\t},\n\n\t\t/**\n   * Returns the email address that was matched.\n   *\n   * @return {String}\n   */\n\t\tgetEmail: function () {\n\t\t\treturn this.email;\n\t\t},\n\n\t\t/**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorHref: function () {\n\t\t\treturn 'mailto:' + this.email;\n\t\t},\n\n\t\t/**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorText: function () {\n\t\t\treturn this.email;\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.match.Hashtag\n  * @extends Autolinker.match.Match\n  *\n  * Represents a Hashtag match found in an input string which should be\n  * Autolinked.\n  *\n  * See this class's superclass ({@link Autolinker.match.Match}) for more\n  * details.\n  */\n\tAutolinker.match.Hashtag = Autolinker.Util.extend(Autolinker.match.Match, {\n\n\t\t/**\n   * @cfg {String} serviceName\n   *\n   * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n   * for available values.\n   */\n\n\t\t/**\n   * @cfg {String} hashtag (required)\n   *\n   * The Hashtag that was matched, without the '#'.\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.match.Match.prototype.constructor.call(this, cfg);\n\n\t\t\t// TODO: if( !serviceName ) throw new Error( '`serviceName` cfg required' );\n\t\t\tif (!cfg.hashtag) throw new Error('`hashtag` cfg required');\n\n\t\t\tthis.serviceName = cfg.serviceName;\n\t\t\tthis.hashtag = cfg.hashtag;\n\t\t},\n\n\t\t/**\n   * Returns the type of match that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'hashtag';\n\t\t},\n\n\t\t/**\n   * Returns the configured {@link #serviceName} to point the Hashtag to.\n   * Ex: 'facebook', 'twitter'.\n   *\n   * @return {String}\n   */\n\t\tgetServiceName: function () {\n\t\t\treturn this.serviceName;\n\t\t},\n\n\t\t/**\n   * Returns the matched hashtag, without the '#' character.\n   *\n   * @return {String}\n   */\n\t\tgetHashtag: function () {\n\t\t\treturn this.hashtag;\n\t\t},\n\n\t\t/**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorHref: function () {\n\t\t\tvar serviceName = this.serviceName,\n\t\t\t    hashtag = this.hashtag;\n\n\t\t\tswitch (serviceName) {\n\t\t\t\tcase 'twitter':\n\t\t\t\t\treturn 'https://twitter.com/hashtag/' + hashtag;\n\t\t\t\tcase 'facebook':\n\t\t\t\t\treturn 'https://www.facebook.com/hashtag/' + hashtag;\n\t\t\t\tcase 'instagram':\n\t\t\t\t\treturn 'https://instagram.com/explore/tags/' + hashtag;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n\t\t\t\t\tthrow new Error('Unknown service name to point hashtag to: ', serviceName);\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorText: function () {\n\t\t\treturn '#' + this.hashtag;\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.match.Phone\n  * @extends Autolinker.match.Match\n  *\n  * Represents a Phone number match found in an input string which should be\n  * Autolinked.\n  *\n  * See this class's superclass ({@link Autolinker.match.Match}) for more\n  * details.\n  */\n\tAutolinker.match.Phone = Autolinker.Util.extend(Autolinker.match.Match, {\n\n\t\t/**\n   * @protected\n   * @property {String} number (required)\n   *\n   * The phone number that was matched, without any delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   */\n\n\t\t/**\n   * @protected\n   * @property  {Boolean} plusSign (required)\n   *\n   * `true` if the matched phone number started with a '+' sign. We'll include\n   * it in the `tel:` URL if so, as this is needed for international numbers.\n   *\n   * Ex: '+1 (123) 456 7879'\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.match.Match.prototype.constructor.call(this, cfg);\n\n\t\t\tif (!cfg.number) throw new Error('`number` cfg required');\n\t\t\tif (cfg.plusSign == null) throw new Error('`plusSign` cfg required');\n\n\t\t\tthis.number = cfg.number;\n\t\t\tthis.plusSign = cfg.plusSign;\n\t\t},\n\n\t\t/**\n   * Returns a string name for the type of match that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'phone';\n\t\t},\n\n\t\t/**\n   * Returns the phone number that was matched as a string, without any\n   * delimiter characters.\n   *\n   * Note: This is a string to allow for prefixed 0's.\n   *\n   * @return {String}\n   */\n\t\tgetNumber: function () {\n\t\t\treturn this.number;\n\t\t},\n\n\t\t/**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorHref: function () {\n\t\t\treturn 'tel:' + (this.plusSign ? '+' : '') + this.number;\n\t\t},\n\n\t\t/**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorText: function () {\n\t\t\treturn this.matchedText;\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.match.Mention\n  * @extends Autolinker.match.Match\n  *\n  * Represents a Mention match found in an input string which should be Autolinked.\n  *\n  * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n  */\n\tAutolinker.match.Mention = Autolinker.Util.extend(Autolinker.match.Match, {\n\n\t\t/**\n   * @cfg {String} serviceName\n   *\n   * The service to point mention matches to. See {@link Autolinker#mention}\n   * for available values.\n   */\n\n\t\t/**\n   * @cfg {String} mention (required)\n   *\n   * The Mention that was matched, without the '@' character.\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.match.Match.prototype.constructor.call(this, cfg);\n\n\t\t\tif (!cfg.serviceName) throw new Error('`serviceName` cfg required');\n\t\t\tif (!cfg.mention) throw new Error('`mention` cfg required');\n\n\t\t\tthis.mention = cfg.mention;\n\t\t\tthis.serviceName = cfg.serviceName;\n\t\t},\n\n\t\t/**\n   * Returns the type of match that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'mention';\n\t\t},\n\n\t\t/**\n   * Returns the mention, without the '@' character.\n   *\n   * @return {String}\n   */\n\t\tgetMention: function () {\n\t\t\treturn this.mention;\n\t\t},\n\n\t\t/**\n   * Returns the configured {@link #serviceName} to point the mention to.\n   * Ex: 'instagram', 'twitter'.\n   *\n   * @return {String}\n   */\n\t\tgetServiceName: function () {\n\t\t\treturn this.serviceName;\n\t\t},\n\n\t\t/**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorHref: function () {\n\t\t\tswitch (this.serviceName) {\n\t\t\t\tcase 'twitter':\n\t\t\t\t\treturn 'https://twitter.com/' + this.mention;\n\t\t\t\tcase 'instagram':\n\t\t\t\t\treturn 'https://instagram.com/' + this.mention;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n\t\t\t\t\tthrow new Error('Unknown service name to point mention to: ', this.serviceName);\n\t\t\t}\n\t\t},\n\n\t\t/**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorText: function () {\n\t\t\treturn '@' + this.mention;\n\t\t},\n\n\t\t/**\n   * Returns the CSS class suffixes that should be used on a tag built with\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n   * details.\n   *\n   * @return {String[]}\n   */\n\t\tgetCssClassSuffixes: function () {\n\t\t\tvar cssClassSuffixes = Autolinker.match.Match.prototype.getCssClassSuffixes.call(this),\n\t\t\t    serviceName = this.getServiceName();\n\n\t\t\tif (serviceName) {\n\t\t\t\tcssClassSuffixes.push(serviceName);\n\t\t\t}\n\t\t\treturn cssClassSuffixes;\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.match.Url\n  * @extends Autolinker.match.Match\n  *\n  * Represents a Url match found in an input string which should be Autolinked.\n  *\n  * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n  */\n\tAutolinker.match.Url = Autolinker.Util.extend(Autolinker.match.Match, {\n\n\t\t/**\n   * @cfg {String} url (required)\n   *\n   * The url that was matched.\n   */\n\n\t\t/**\n   * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n   *\n   * The type of URL match that this class represents. This helps to determine\n   * if the match was made in the original text with a prefixed scheme (ex:\n   * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n   * was matched by a known top-level domain (ex: 'google.com').\n   */\n\n\t\t/**\n   * @cfg {Boolean} protocolUrlMatch (required)\n   *\n   * `true` if the URL is a match which already has a protocol (i.e.\n   * 'http://'), `false` if the match was from a 'www' or known TLD match.\n   */\n\n\t\t/**\n   * @cfg {Boolean} protocolRelativeMatch (required)\n   *\n   * `true` if the URL is a protocol-relative match. A protocol-relative match\n   * is a URL that starts with '//', and will be either http:// or https://\n   * based on the protocol that the site is loaded under.\n   */\n\n\t\t/**\n   * @cfg {Object} stripPrefix (required)\n   *\n   * The Object form of {@link Autolinker#cfg-stripPrefix}.\n   */\n\n\t\t/**\n   * @cfg {Boolean} stripTrailingSlash (required)\n   * @inheritdoc Autolinker#cfg-stripTrailingSlash\n   */\n\n\t\t/**\n   * @cfg {Boolean} decodePercentEncoding (required)\n   * @inheritdoc Autolinker#cfg-decodePercentEncoding\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.match.Match.prototype.constructor.call(this, cfg);\n\n\t\t\tif (cfg.urlMatchType !== 'scheme' && cfg.urlMatchType !== 'www' && cfg.urlMatchType !== 'tld') throw new Error('`urlMatchType` cfg must be one of: \"scheme\", \"www\", or \"tld\"');\n\t\t\tif (!cfg.url) throw new Error('`url` cfg required');\n\t\t\tif (cfg.protocolUrlMatch == null) throw new Error('`protocolUrlMatch` cfg required');\n\t\t\tif (cfg.protocolRelativeMatch == null) throw new Error('`protocolRelativeMatch` cfg required');\n\t\t\tif (cfg.stripPrefix == null) throw new Error('`stripPrefix` cfg required');\n\t\t\tif (cfg.stripTrailingSlash == null) throw new Error('`stripTrailingSlash` cfg required');\n\t\t\tif (cfg.decodePercentEncoding == null) throw new Error('`decodePercentEncoding` cfg required');\n\n\t\t\tthis.urlMatchType = cfg.urlMatchType;\n\t\t\tthis.url = cfg.url;\n\t\t\tthis.protocolUrlMatch = cfg.protocolUrlMatch;\n\t\t\tthis.protocolRelativeMatch = cfg.protocolRelativeMatch;\n\t\t\tthis.stripPrefix = cfg.stripPrefix;\n\t\t\tthis.stripTrailingSlash = cfg.stripTrailingSlash;\n\t\t\tthis.decodePercentEncoding = cfg.decodePercentEncoding;\n\t\t},\n\n\t\t/**\n   * @private\n   * @property {RegExp} schemePrefixRegex\n   *\n   * A regular expression used to remove the 'http://' or 'https://' from\n   * URLs.\n   */\n\t\tschemePrefixRegex: /^(https?:\\/\\/)?/i,\n\n\t\t/**\n   * @private\n   * @property {RegExp} wwwPrefixRegex\n   *\n   * A regular expression used to remove the 'www.' from URLs.\n   */\n\t\twwwPrefixRegex: /^(https?:\\/\\/)?(www\\.)?/i,\n\n\t\t/**\n   * @private\n   * @property {RegExp} protocolRelativeRegex\n   *\n   * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n   * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n   */\n\t\tprotocolRelativeRegex: /^\\/\\//,\n\n\t\t/**\n   * @private\n   * @property {Boolean} protocolPrepended\n   *\n   * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n   * {@link #url} did not have a protocol)\n   */\n\t\tprotocolPrepended: false,\n\n\t\t/**\n   * Returns a string name for the type of match that this class represents.\n   *\n   * @return {String}\n   */\n\t\tgetType: function () {\n\t\t\treturn 'url';\n\t\t},\n\n\t\t/**\n   * Returns a string name for the type of URL match that this class\n   * represents.\n   *\n   * This helps to determine if the match was made in the original text with a\n   * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n   * 'www.google.com'), or was matched by a known top-level domain (ex:\n   * 'google.com').\n   *\n   * @return {\"scheme\"/\"www\"/\"tld\"}\n   */\n\t\tgetUrlMatchType: function () {\n\t\t\treturn this.urlMatchType;\n\t\t},\n\n\t\t/**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n\t\tgetUrl: function () {\n\t\t\tvar url = this.url;\n\n\t\t\t// if the url string doesn't begin with a protocol, assume 'http://'\n\t\t\tif (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n\t\t\t\turl = this.url = 'http://' + url;\n\n\t\t\t\tthis.protocolPrepended = true;\n\t\t\t}\n\n\t\t\treturn url;\n\t\t},\n\n\t\t/**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorHref: function () {\n\t\t\tvar url = this.getUrl();\n\n\t\t\treturn url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n\t\t},\n\n\t\t/**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\t\tgetAnchorText: function () {\n\t\t\tvar anchorText = this.getMatchedText();\n\n\t\t\tif (this.protocolRelativeMatch) {\n\t\t\t\t// Strip off any protocol-relative '//' from the anchor text\n\t\t\t\tanchorText = this.stripProtocolRelativePrefix(anchorText);\n\t\t\t}\n\t\t\tif (this.stripPrefix.scheme) {\n\t\t\t\tanchorText = this.stripSchemePrefix(anchorText);\n\t\t\t}\n\t\t\tif (this.stripPrefix.www) {\n\t\t\t\tanchorText = this.stripWwwPrefix(anchorText);\n\t\t\t}\n\t\t\tif (this.stripTrailingSlash) {\n\t\t\t\tanchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n\t\t\t}\n\t\t\tif (this.decodePercentEncoding) {\n\t\t\t\tanchorText = this.removePercentEncoding(anchorText);\n\t\t\t}\n\n\t\t\treturn anchorText;\n\t\t},\n\n\t\t// ---------------------------------------\n\n\t\t// Utility Functionality\n\n\t\t/**\n   * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n   * `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the url scheme.\n   * @return {String} The `url`, with the scheme stripped.\n   */\n\t\tstripSchemePrefix: function (url) {\n\t\t\treturn url.replace(this.schemePrefixRegex, '');\n\t\t},\n\n\t\t/**\n   * Strips the 'www' prefix from the given `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the 'www' if it exists.\n   * @return {String} The `url`, with the 'www' stripped.\n   */\n\t\tstripWwwPrefix: function (url) {\n\t\t\treturn url.replace(this.wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n\t\t},\n\n\t\t/**\n   * Strips any protocol-relative '//' from the anchor text.\n   *\n   * @private\n   * @param {String} text The text of the anchor that is being generated, for which to strip off the\n   *   protocol-relative prefix (such as stripping off \"//\")\n   * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n   */\n\t\tstripProtocolRelativePrefix: function (text) {\n\t\t\treturn text.replace(this.protocolRelativeRegex, '');\n\t\t},\n\n\t\t/**\n   * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n   *   slash ('/') that may exist.\n   * @return {String} The `anchorText`, with the trailing slash removed.\n   */\n\t\tremoveTrailingSlash: function (anchorText) {\n\t\t\tif (anchorText.charAt(anchorText.length - 1) === '/') {\n\t\t\t\tanchorText = anchorText.slice(0, -1);\n\t\t\t}\n\t\t\treturn anchorText;\n\t\t},\n\n\t\t/**\n   * Decodes percent-encoded characters from the given `anchorText`, in preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being generated, for which to decode any percent-encoded characters.\n   * @return {String} The `anchorText`, with the percent-encoded characters decoded.\n   */\n\t\tremovePercentEncoding: function (anchorText) {\n\t\t\ttry {\n\t\t\t\treturn decodeURIComponent(anchorText.replace(/%22/gi, '&quot;').replace(/%26/gi, '&amp;').replace(/%27/gi, '&#39;').replace(/%3C/gi, '&lt;').replace(/%3E/gi, '&gt;'));\n\t\t\t} catch (e) {\n\t\t\t\t// Invalid escape sequence.\n\t\t\t\treturn anchorText;\n\t\t\t}\n\t\t}\n\n\t});\n\t// NOTE: THIS IS A GENERATED FILE\n\t// To update with the latest TLD list, run `gulp update-tld-list`\n\n\t/*global Autolinker */\n\tAutolinker.tldRegex = /(?:xn--vermgensberatung-pwb|xn--vermgensberater-ctb|xn--clchc0ea0b2g2a9gcd|xn--w4r85el8fhu5dnra|northwesternmutual|travelersinsurance|vermögensberatung|xn--3oq18vl8pn36a|xn--5su34j936bgsg|xn--bck1b9a5dre4c|xn--mgbai9azgqp6j|xn--mgberp4a5d4ar|xn--xkc2dl3a5ee0h|vermögensberater|xn--fzys8d69uvgm|xn--mgba7c0bbn0a|xn--xkc2al3hye2a|americanexpress|kerryproperties|sandvikcoromant|xn--i1b6b1a6a2e|xn--kcrx77d1x4a|xn--lgbbat1ad8j|xn--mgba3a4f16a|xn--mgbc0a9azcg|xn--nqv7fs00ema|afamilycompany|americanfamily|bananarepublic|cancerresearch|cookingchannel|kerrylogistics|weatherchannel|xn--54b7fta0cc|xn--6qq986b3xl|xn--80aqecdr1a|xn--b4w605ferd|xn--fiq228c5hs|xn--jlq61u9w7b|xn--mgba3a3ejt|xn--mgbaam7a8h|xn--mgbayh7gpa|xn--mgbb9fbpob|xn--mgbbh1a71e|xn--mgbca7dzdo|xn--mgbi4ecexp|xn--mgbx4cd0ab|international|lifeinsurance|orientexpress|spreadbetting|travelchannel|wolterskluwer|xn--eckvdtc9d|xn--fpcrj9c3d|xn--fzc2c9e2c|xn--tiq49xqyj|xn--yfro4i67o|xn--ygbi2ammx|construction|lplfinancial|pamperedchef|scholarships|versicherung|xn--3e0b707e|xn--80adxhks|xn--80asehdb|xn--8y0a063a|xn--gckr3f0f|xn--mgb9awbf|xn--mgbab2bd|xn--mgbpl2fh|xn--mgbt3dhd|xn--mk1bu44c|xn--ngbc5azd|xn--ngbe9e0a|xn--ogbpf8fl|xn--qcka1pmc|accountants|barclaycard|blackfriday|blockbuster|bridgestone|calvinklein|contractors|creditunion|engineering|enterprises|foodnetwork|investments|kerryhotels|lamborghini|motorcycles|olayangroup|photography|playstation|productions|progressive|redumbrella|rightathome|williamhill|xn--11b4c3d|xn--1ck2e1b|xn--1qqw23a|xn--3bst00m|xn--3ds443g|xn--42c2d9a|xn--45brj9c|xn--55qw42g|xn--6frz82g|xn--80ao21a|xn--9krt00a|xn--cck2b3b|xn--czr694b|xn--d1acj3b|xn--efvy88h|xn--estv75g|xn--fct429k|xn--fjq720a|xn--flw351e|xn--g2xx48c|xn--gecrj9c|xn--gk3at1e|xn--h2brj9c|xn--hxt814e|xn--imr513n|xn--j6w193g|xn--jvr189m|xn--kprw13d|xn--kpry57d|xn--kpu716f|xn--mgbtx2b|xn--mix891f|xn--nyqy26a|xn--pbt977c|xn--pgbs0dh|xn--q9jyb4c|xn--rhqv96g|xn--rovu88b|xn--s9brj9c|xn--ses554g|xn--t60b56a|xn--vuq861b|xn--w4rs40l|xn--xhq521b|xn--zfr164b|சிங்கப்பூர்|accountant|apartments|associates|basketball|bnpparibas|boehringer|capitalone|consulting|creditcard|cuisinella|eurovision|extraspace|foundation|healthcare|immobilien|industries|management|mitsubishi|nationwide|newholland|nextdirect|onyourside|properties|protection|prudential|realestate|republican|restaurant|schaeffler|swiftcover|tatamotors|technology|telefonica|university|vistaprint|vlaanderen|volkswagen|xn--30rr7y|xn--3pxu8k|xn--45q11c|xn--4gbrim|xn--55qx5d|xn--5tzm5g|xn--80aswg|xn--90a3ac|xn--9dbq2a|xn--9et52u|xn--c2br7g|xn--cg4bki|xn--czrs0t|xn--czru2d|xn--fiq64b|xn--fiqs8s|xn--fiqz9s|xn--io0a7i|xn--kput3i|xn--mxtq1m|xn--o3cw4h|xn--pssy2u|xn--unup4y|xn--wgbh1c|xn--wgbl6a|xn--y9a3aq|accenture|alfaromeo|allfinanz|amsterdam|analytics|aquarelle|barcelona|bloomberg|christmas|community|directory|education|equipment|fairwinds|financial|firestone|fresenius|frontdoor|fujixerox|furniture|goldpoint|goodhands|hisamitsu|homedepot|homegoods|homesense|honeywell|institute|insurance|kuokgroup|ladbrokes|lancaster|landrover|lifestyle|marketing|marshalls|mcdonalds|melbourne|microsoft|montblanc|panasonic|passagens|pramerica|richardli|scjohnson|shangrila|solutions|statebank|statefarm|stockholm|travelers|vacations|xn--90ais|xn--c1avg|xn--d1alf|xn--e1a4c|xn--fhbei|xn--j1aef|xn--j1amh|xn--l1acc|xn--nqv7f|xn--p1acf|xn--tckwe|xn--vhquv|yodobashi|abudhabi|airforce|allstate|attorney|barclays|barefoot|bargains|baseball|boutique|bradesco|broadway|brussels|budapest|builders|business|capetown|catering|catholic|chrysler|cipriani|cityeats|cleaning|clinique|clothing|commbank|computer|delivery|deloitte|democrat|diamonds|discount|discover|download|engineer|ericsson|esurance|everbank|exchange|feedback|fidelity|firmdale|football|frontier|goodyear|grainger|graphics|guardian|hdfcbank|helsinki|holdings|hospital|infiniti|ipiranga|istanbul|jpmorgan|lighting|lundbeck|marriott|maserati|mckinsey|memorial|mortgage|movistar|observer|partners|pharmacy|pictures|plumbing|property|redstone|reliance|saarland|samsclub|security|services|shopping|showtime|softbank|software|stcgroup|supplies|symantec|telecity|training|uconnect|vanguard|ventures|verisign|woodside|xn--90ae|xn--node|xn--p1ai|xn--qxam|yokohama|السعودية|abogado|academy|agakhan|alibaba|android|athleta|auction|audible|auspost|avianca|banamex|bauhaus|bentley|bestbuy|booking|brother|bugatti|capital|caravan|careers|cartier|channel|chintai|citadel|clubmed|college|cologne|comcast|company|compare|contact|cooking|corsica|country|coupons|courses|cricket|cruises|dentist|digital|domains|exposed|express|farmers|fashion|ferrari|ferrero|finance|fishing|fitness|flights|florist|flowers|forsale|frogans|fujitsu|gallery|genting|godaddy|guitars|hamburg|hangout|hitachi|holiday|hosting|hoteles|hotmail|hyundai|iselect|ismaili|jewelry|juniper|kitchen|komatsu|lacaixa|lancome|lanxess|lasalle|latrobe|leclerc|liaison|limited|lincoln|markets|metlife|monster|netbank|netflix|network|neustar|okinawa|oldnavy|organic|origins|panerai|philips|pioneer|politie|realtor|recipes|rentals|reviews|rexroth|samsung|sandvik|schmidt|schwarz|science|shiksha|shriram|singles|spiegel|staples|starhub|statoil|storage|support|surgery|systems|temasek|theater|theatre|tickets|tiffany|toshiba|trading|walmart|wanggou|watches|weather|website|wedding|whoswho|windows|winners|xfinity|yamaxun|youtube|zuerich|католик|الجزائر|العليان|پاکستان|كاثوليك|موبايلي|இந்தியா|abarth|abbott|abbvie|active|africa|agency|airbus|airtel|alipay|alsace|alstom|anquan|aramco|author|bayern|beauty|berlin|bharti|blanco|bostik|boston|broker|camera|career|caseih|casino|center|chanel|chrome|church|circle|claims|clinic|coffee|comsec|condos|coupon|credit|cruise|dating|datsun|dealer|degree|dental|design|direct|doctor|dunlop|dupont|durban|emerck|energy|estate|events|expert|family|flickr|futbol|gallup|garden|george|giving|global|google|gratis|health|hermes|hiphop|hockey|hughes|imamat|insure|intuit|jaguar|joburg|juegos|kaufen|kinder|kindle|kosher|lancia|latino|lawyer|lefrak|living|locker|london|luxury|madrid|maison|makeup|market|mattel|mobile|mobily|monash|mormon|moscow|museum|mutual|nagoya|natura|nissan|nissay|norton|nowruz|office|olayan|online|oracle|orange|otsuka|pfizer|photos|physio|piaget|pictet|quebec|racing|realty|reisen|repair|report|review|rocher|rogers|ryukyu|safety|sakura|sanofi|school|schule|secure|select|shouji|soccer|social|stream|studio|supply|suzuki|swatch|sydney|taipei|taobao|target|tattoo|tennis|tienda|tjmaxx|tkmaxx|toyota|travel|unicom|viajes|viking|villas|virgin|vision|voting|voyage|vuelos|walter|warman|webcam|xihuan|xperia|yachts|yandex|zappos|москва|онлайн|ابوظبي|ارامكو|الاردن|المغرب|امارات|فلسطين|مليسيا|இலங்கை|ファッション|actor|adult|aetna|amfam|amica|apple|archi|audio|autos|azure|baidu|beats|bible|bingo|black|boats|boots|bosch|build|canon|cards|chase|cheap|chloe|cisco|citic|click|cloud|coach|codes|crown|cymru|dabur|dance|deals|delta|dodge|drive|dubai|earth|edeka|email|epost|epson|faith|fedex|final|forex|forum|gallo|games|gifts|gives|glade|glass|globo|gmail|green|gripe|group|gucci|guide|homes|honda|horse|house|hyatt|ikano|intel|irish|iveco|jetzt|koeln|kyoto|lamer|lease|legal|lexus|lilly|linde|lipsy|lixil|loans|locus|lotte|lotto|lupin|macys|mango|media|miami|money|mopar|movie|nadex|nexus|nikon|ninja|nokia|nowtv|omega|osaka|paris|parts|party|phone|photo|pizza|place|poker|praxi|press|prime|promo|quest|radio|rehab|reise|ricoh|rocks|rodeo|salon|sener|seven|sharp|shell|shoes|skype|sling|smart|smile|solar|space|stada|store|study|style|sucks|swiss|tatar|tires|tirol|tmall|today|tokyo|tools|toray|total|tours|trade|trust|tunes|tushu|ubank|vegas|video|vista|vodka|volvo|wales|watch|weber|weibo|works|world|xerox|yahoo|zippo|ایران|بازار|بھارت|سودان|سورية|همراه|संगठन|বাংলা|భారత్|嘉里大酒店|aarp|able|adac|aero|aigo|akdn|ally|amex|army|arpa|arte|asda|asia|audi|auto|baby|band|bank|bbva|beer|best|bike|bing|blog|blue|bofa|bond|book|buzz|cafe|call|camp|care|cars|casa|case|cash|cbre|cern|chat|citi|city|club|cool|coop|cyou|data|date|dclk|deal|dell|desi|diet|dish|docs|doha|duck|duns|dvag|erni|fage|fail|fans|farm|fast|fiat|fido|film|fire|fish|flir|food|ford|free|fund|game|gbiz|gent|ggee|gift|gmbh|gold|golf|goog|guge|guru|hair|haus|hdfc|help|here|hgtv|host|hsbc|icbc|ieee|imdb|immo|info|itau|java|jeep|jobs|jprs|kddi|kiwi|kpmg|kred|land|lego|lgbt|lidl|life|like|limo|link|live|loan|loft|love|ltda|luxe|maif|meet|meme|menu|mini|mint|mobi|moda|moto|mtpc|name|navy|news|next|nico|nike|ollo|open|page|pars|pccw|pics|ping|pink|play|plus|pohl|porn|post|prod|prof|qpon|raid|read|reit|rent|rest|rich|rmit|room|rsvp|ruhr|safe|sale|sapo|sarl|save|saxo|scor|scot|seat|seek|sexy|shaw|shia|shop|show|silk|sina|site|skin|sncf|sohu|song|sony|spot|star|surf|talk|taxi|team|tech|teva|tiaa|tips|town|toys|tube|vana|visa|viva|vivo|vote|voto|wang|weir|wien|wiki|wine|work|xbox|yoga|zara|zero|zone|дети|сайт|بيتك|تونس|شبكة|عراق|عمان|موقع|भारत|ভারত|ਭਾਰਤ|ભારત|ලංකා|グーグル|クラウド|ポイント|大众汽车|组织机构|電訊盈科|香格里拉|aaa|abb|abc|aco|ads|aeg|afl|aig|anz|aol|app|art|aws|axa|bar|bbc|bbt|bcg|bcn|bet|bid|bio|biz|bms|bmw|bnl|bom|boo|bot|box|buy|bzh|cab|cal|cam|car|cat|cba|cbn|cbs|ceb|ceo|cfa|cfd|com|crs|csc|dad|day|dds|dev|dhl|diy|dnp|dog|dot|dtv|dvr|eat|eco|edu|esq|eus|fan|fit|fly|foo|fox|frl|ftr|fun|fyi|gal|gap|gdn|gea|gle|gmo|gmx|goo|gop|got|gov|hbo|hiv|hkt|hot|how|htc|ibm|ice|icu|ifm|ing|ink|int|ist|itv|iwc|jcb|jcp|jio|jlc|jll|jmp|jnj|jot|joy|kfh|kia|kim|kpn|krd|lat|law|lds|lol|lpl|ltd|man|mba|mcd|med|men|meo|mil|mit|mlb|mls|mma|moe|moi|mom|mov|msd|mtn|mtr|nab|nba|nec|net|new|nfl|ngo|nhk|now|nra|nrw|ntt|nyc|obi|off|one|ong|onl|ooo|org|ott|ovh|pay|pet|pid|pin|pnc|pro|pru|pub|pwc|qvc|red|ren|ril|rio|rip|run|rwe|sap|sas|sbi|sbs|sca|scb|ses|sew|sex|sfr|ski|sky|soy|srl|srt|stc|tab|tax|tci|tdk|tel|thd|tjx|top|trv|tui|tvs|ubs|uno|uol|ups|vet|vig|vin|vip|wed|win|wme|wow|wtc|wtf|xin|xxx|xyz|you|yun|zip|бел|ком|қаз|мкд|мон|орг|рус|срб|укр|հայ|קום|قطر|كوم|مصر|कॉम|नेट|คอม|ไทย|ストア|セール|みんな|中文网|天主教|我爱你|新加坡|淡马锡|诺基亚|飞利浦|ac|ad|ae|af|ag|ai|al|am|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw|ελ|бг|ею|рф|გე|닷넷|닷컴|삼성|한국|コム|世界|中信|中国|中國|企业|佛山|信息|健康|八卦|公司|公益|台湾|台灣|商城|商店|商标|嘉里|在线|大拿|娱乐|家電|工行|广东|微博|慈善|手机|手表|政务|政府|新闻|时尚|書籍|机构|游戏|澳門|点看|珠宝|移动|网址|网店|网站|网络|联通|谷歌|购物|通販|集团|食品|餐厅|香港)/;\n\n\t/*global Autolinker */\n\t/**\n  * @abstract\n  * @class Autolinker.matcher.Matcher\n  *\n  * An abstract class and interface for individual matchers to find matches in\n  * an input string with linkified versions of them.\n  *\n  * Note that Matchers do not take HTML into account - they must be fed the text\n  * nodes of any HTML string, which is handled by {@link Autolinker#parse}.\n  */\n\tAutolinker.matcher.Matcher = Autolinker.Util.extend(Object, {\n\n\t\t/**\n   * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n   *\n   * Reference to the AnchorTagBuilder instance to use to generate HTML tags\n   * for {@link Autolinker.match.Match Matches}.\n   */\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Matcher\n   *   instance, specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tif (!cfg.tagBuilder) throw new Error('`tagBuilder` cfg required');\n\n\t\t\tthis.tagBuilder = cfg.tagBuilder;\n\t\t},\n\n\t\t/**\n   * Parses the input `text` and returns the array of {@link Autolinker.match.Match Matches}\n   * for the matcher.\n   *\n   * @abstract\n   * @param {String} text The text to scan and replace matches in.\n   * @return {Autolinker.match.Match[]}\n   */\n\t\tparseMatches: Autolinker.Util.abstractMethod\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.matcher.Email\n  * @extends Autolinker.matcher.Matcher\n  *\n  * Matcher to find email matches in an input string.\n  *\n  * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n  */\n\tAutolinker.matcher.Email = Autolinker.Util.extend(Autolinker.matcher.Matcher, {\n\n\t\t/**\n   * The regular expression to match email addresses. Example match:\n   *\n   *     person@place.com\n   *\n   * @private\n   * @property {RegExp} matcherRegex\n   */\n\t\tmatcherRegex: function () {\n\t\t\tvar alphaNumericChars = Autolinker.RegexLib.alphaNumericCharsStr,\n\t\t\t    specialCharacters = '!#$%&\\'*+\\\\-\\\\/=?^_`{|}~',\n\t\t\t    restrictedSpecialCharacters = '\\\\s\"(),:;<>@\\\\[\\\\]',\n\t\t\t    validCharacters = alphaNumericChars + specialCharacters,\n\t\t\t    validRestrictedCharacters = validCharacters + restrictedSpecialCharacters,\n\t\t\t    emailRegex = new RegExp('(?:[' + validCharacters + '](?:[' + validCharacters + ']|\\\\.(?!\\\\.|@))*|\\\\\"[' + validRestrictedCharacters + '.]+\\\\\")@'),\n\t\t\t    domainNameRegex = Autolinker.RegexLib.domainNameRegex,\n\t\t\t    tldRegex = Autolinker.tldRegex; // match our known top level domains (TLDs)\n\n\t\t\treturn new RegExp([emailRegex.source, domainNameRegex.source, '\\\\.', tldRegex.source // '.com', '.net', etc\n\t\t\t].join(\"\"), 'gi');\n\t\t}(),\n\n\t\t/**\n   * @inheritdoc\n   */\n\t\tparseMatches: function (text) {\n\t\t\tvar matcherRegex = this.matcherRegex,\n\t\t\t    tagBuilder = this.tagBuilder,\n\t\t\t    matches = [],\n\t\t\t    match;\n\n\t\t\twhile ((match = matcherRegex.exec(text)) !== null) {\n\t\t\t\tvar matchedText = match[0];\n\n\t\t\t\tmatches.push(new Autolinker.match.Email({\n\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\tmatchedText: matchedText,\n\t\t\t\t\toffset: match.index,\n\t\t\t\t\temail: matchedText\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.matcher.Hashtag\n  * @extends Autolinker.matcher.Matcher\n  *\n  * Matcher to find Hashtag matches in an input string.\n  */\n\tAutolinker.matcher.Hashtag = Autolinker.Util.extend(Autolinker.matcher.Matcher, {\n\n\t\t/**\n   * @cfg {String} serviceName\n   *\n   * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n   * for available values.\n   */\n\n\t\t/**\n   * The regular expression to match Hashtags. Example match:\n   *\n   *     #asdf\n   *\n   * @private\n   * @property {RegExp} matcherRegex\n   */\n\t\tmatcherRegex: new RegExp('#[_' + Autolinker.RegexLib.alphaNumericCharsStr + ']{1,139}', 'g'),\n\n\t\t/**\n   * The regular expression to use to check the character before a username match to\n   * make sure we didn't accidentally match an email address.\n   *\n   * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n   *\n   * @private\n   * @property {RegExp} nonWordCharRegex\n   */\n\t\tnonWordCharRegex: new RegExp('[^' + Autolinker.RegexLib.alphaNumericCharsStr + ']'),\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.matcher.Matcher.prototype.constructor.call(this, cfg);\n\n\t\t\tthis.serviceName = cfg.serviceName;\n\t\t},\n\n\t\t/**\n   * @inheritdoc\n   */\n\t\tparseMatches: function (text) {\n\t\t\tvar matcherRegex = this.matcherRegex,\n\t\t\t    nonWordCharRegex = this.nonWordCharRegex,\n\t\t\t    serviceName = this.serviceName,\n\t\t\t    tagBuilder = this.tagBuilder,\n\t\t\t    matches = [],\n\t\t\t    match;\n\n\t\t\twhile ((match = matcherRegex.exec(text)) !== null) {\n\t\t\t\tvar offset = match.index,\n\t\t\t\t    prevChar = text.charAt(offset - 1);\n\n\t\t\t\t// If we found the match at the beginning of the string, or we found the match\n\t\t\t\t// and there is a whitespace char in front of it (meaning it is not a '#' char\n\t\t\t\t// in the middle of a word), then it is a hashtag match.\n\t\t\t\tif (offset === 0 || nonWordCharRegex.test(prevChar)) {\n\t\t\t\t\tvar matchedText = match[0],\n\t\t\t\t\t    hashtag = match[0].slice(1); // strip off the '#' character at the beginning\n\n\t\t\t\t\tmatches.push(new Autolinker.match.Hashtag({\n\t\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\t\tmatchedText: matchedText,\n\t\t\t\t\t\toffset: offset,\n\t\t\t\t\t\tserviceName: serviceName,\n\t\t\t\t\t\thashtag: hashtag\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t}\n\n\t});\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.matcher.Phone\n  * @extends Autolinker.matcher.Matcher\n  *\n  * Matcher to find Phone number matches in an input string.\n  *\n  * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n  * details.\n  */\n\tAutolinker.matcher.Phone = Autolinker.Util.extend(Autolinker.matcher.Matcher, {\n\n\t\t/**\n   * The regular expression to match Phone numbers. Example match:\n   *\n   *     (123) 456-7890\n   *\n   * This regular expression has the following capturing groups:\n   *\n   * 1. The prefixed '+' sign, if there is one.\n   *\n   * @private\n   * @property {RegExp} matcherRegex\n   */\n\t\tmatcherRegex: /(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4}([,;]*[0-9]+#?)*/g,\n\n\t\t// ex: (123) 456-7890, 123 456 7890, 123-456-7890, +18004441234,,;,10226420346#, \n\t\t// +1 (800) 444 1234, 10226420346#, 1-800-444-1234,1022,64,20346#\n\n\t\t/**\n   * @inheritdoc\n   */\n\t\tparseMatches: function (text) {\n\t\t\tvar matcherRegex = this.matcherRegex,\n\t\t\t    tagBuilder = this.tagBuilder,\n\t\t\t    matches = [],\n\t\t\t    match;\n\n\t\t\twhile ((match = matcherRegex.exec(text)) !== null) {\n\t\t\t\t// Remove non-numeric values from phone number string\n\t\t\t\tvar matchedText = match[0],\n\t\t\t\t    cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''),\n\t\t\t\t    // strip out non-digit characters exclude comma semicolon and #\n\t\t\t\tplusSign = !!match[1]; // match[ 1 ] is the prefixed plus sign, if there is one\n\t\t\t\tif (this.testMatch(match[2]) && this.testMatch(matchedText)) {\n\t\t\t\t\tmatches.push(new Autolinker.match.Phone({\n\t\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\t\tmatchedText: matchedText,\n\t\t\t\t\t\toffset: match.index,\n\t\t\t\t\t\tnumber: cleanNumber,\n\t\t\t\t\t\tplusSign: plusSign\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\ttestMatch: function (text) {\n\t\t\treturn (/\\D/.test(text)\n\t\t\t);\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.matcher.Mention\n  * @extends Autolinker.matcher.Matcher\n  *\n  * Matcher to find/replace username matches in an input string.\n  */\n\tAutolinker.matcher.Mention = Autolinker.Util.extend(Autolinker.matcher.Matcher, {\n\n\t\t/**\n   * Hash of regular expression to match username handles. Example match:\n   *\n   *     @asdf\n   *\n   * @private\n   * @property {Object} matcherRegexes\n   */\n\t\tmatcherRegexes: {\n\t\t\t\"twitter\": new RegExp('@[_' + Autolinker.RegexLib.alphaNumericCharsStr + ']{1,20}', 'g'),\n\t\t\t\"instagram\": new RegExp('@[_.' + Autolinker.RegexLib.alphaNumericCharsStr + ']{1,50}', 'g')\n\t\t},\n\n\t\t/**\n   * The regular expression to use to check the character before a username match to\n   * make sure we didn't accidentally match an email address.\n   *\n   * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n   *\n   * @private\n   * @property {RegExp} nonWordCharRegex\n   */\n\t\tnonWordCharRegex: new RegExp('[^' + Autolinker.RegexLib.alphaNumericCharsStr + ']'),\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.matcher.Matcher.prototype.constructor.call(this, cfg);\n\n\t\t\tthis.serviceName = cfg.serviceName;\n\t\t},\n\n\t\t/**\n   * @inheritdoc\n   */\n\t\tparseMatches: function (text) {\n\t\t\tvar matcherRegex = this.matcherRegexes[this.serviceName],\n\t\t\t    nonWordCharRegex = this.nonWordCharRegex,\n\t\t\t    serviceName = this.serviceName,\n\t\t\t    tagBuilder = this.tagBuilder,\n\t\t\t    matches = [],\n\t\t\t    match;\n\n\t\t\tif (!matcherRegex) {\n\t\t\t\treturn matches;\n\t\t\t}\n\n\t\t\twhile ((match = matcherRegex.exec(text)) !== null) {\n\t\t\t\tvar offset = match.index,\n\t\t\t\t    prevChar = text.charAt(offset - 1);\n\n\t\t\t\t// If we found the match at the beginning of the string, or we found the match\n\t\t\t\t// and there is a whitespace char in front of it (meaning it is not an email\n\t\t\t\t// address), then it is a username match.\n\t\t\t\tif (offset === 0 || nonWordCharRegex.test(prevChar)) {\n\t\t\t\t\tvar matchedText = match[0].replace(/\\.+$/g, ''),\n\t\t\t\t\t    // strip off trailing .\n\t\t\t\t\tmention = matchedText.slice(1); // strip off the '@' character at the beginning\n\n\t\t\t\t\tmatches.push(new Autolinker.match.Mention({\n\t\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\t\tmatchedText: matchedText,\n\t\t\t\t\t\toffset: offset,\n\t\t\t\t\t\tserviceName: serviceName,\n\t\t\t\t\t\tmention: mention\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/**\n  * @class Autolinker.matcher.Url\n  * @extends Autolinker.matcher.Matcher\n  *\n  * Matcher to find URL matches in an input string.\n  *\n  * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n  */\n\tAutolinker.matcher.Url = Autolinker.Util.extend(Autolinker.matcher.Matcher, {\n\n\t\t/**\n   * @cfg {Object} stripPrefix (required)\n   *\n   * The Object form of {@link Autolinker#cfg-stripPrefix}.\n   */\n\n\t\t/**\n   * @cfg {Boolean} stripTrailingSlash (required)\n   * @inheritdoc Autolinker#stripTrailingSlash\n   */\n\n\t\t/**\n   * @cfg {Boolean} decodePercentEncoding (required)\n   * @inheritdoc Autolinker#decodePercentEncoding\n   */\n\n\t\t/**\n   * @private\n   * @property {RegExp} matcherRegex\n   *\n   * The regular expression to match URLs with an optional scheme, port\n   * number, path, query string, and hash anchor.\n   *\n   * Example matches:\n   *\n   *     http://google.com\n   *     www.google.com\n   *     google.com/path/to/file?q1=1&q2=2#myAnchor\n   *\n   *\n   * This regular expression will have the following capturing groups:\n   *\n   * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n   *     This is used to match scheme URLs with just a single word, such as\n   *     'http://localhost', where we won't double check that the domain name\n   *     has at least one dot ('.') in it.\n   * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n   *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n   *     'http://', 'ftp:', etc.)\n   * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n   *     URL. Will be an empty string if it is not a protocol-relative match.\n   *     We need to know the character before the '//' in order to determine\n   *     if it is a valid match or the // was in a string we don't want to\n   *     auto-link.\n   * 4.  Group that matches a known TLD (top level domain), when a scheme\n   *     or 'www.'-prefixed domain is not matched.\n   * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n   *     URL. Will be an empty string if it is not a protocol-relative match.\n   *     See #3 for more info.\n   */\n\t\tmatcherRegex: function () {\n\t\t\tvar schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]*:(?![A-Za-z][-.+A-Za-z0-9]*:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,\n\t\t\t    // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n\t\t\twwwRegex = /(?:www\\.)/,\n\t\t\t    // starting with 'www.'\n\t\t\tdomainNameRegex = Autolinker.RegexLib.domainNameRegex,\n\t\t\t    tldRegex = Autolinker.tldRegex,\n\t\t\t    // match our known top level domains (TLDs)\n\t\t\talphaNumericCharsStr = Autolinker.RegexLib.alphaNumericCharsStr,\n\n\n\t\t\t// Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n\t\t\t// http://blog.codinghorror.com/the-problem-with-urls/\n\t\t\turlSuffixRegex = new RegExp('[/?#](?:[' + alphaNumericCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]?!:,.;\\u2713]*[' + alphaNumericCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]\\u2713])?');\n\n\t\t\treturn new RegExp(['(?:', // parens to cover match for scheme (optional), and domain\n\t\t\t'(', // *** Capturing group $1, for a scheme-prefixed url (ex: http://google.com)\n\t\t\tschemeRegex.source, domainNameRegex.source, ')', '|', '(', // *** Capturing group $2, for a 'www.' prefixed url (ex: www.google.com)\n\t\t\t'(//)?', // *** Capturing group $3 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character (handled later)\n\t\t\twwwRegex.source, domainNameRegex.source, ')', '|', '(', // *** Capturing group $4, for known a TLD url (ex: google.com)\n\t\t\t'(//)?', // *** Capturing group $5 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character (handled later)\n\t\t\tdomainNameRegex.source + '\\\\.', tldRegex.source, '(?![-' + alphaNumericCharsStr + '])', // TLD not followed by a letter, behaves like unicode-aware \\b\n\t\t\t')', ')', '(?::[0-9]+)?', // port\n\n\t\t\t'(?:' + urlSuffixRegex.source + ')?' // match for path, query string, and/or hash anchor - optional\n\t\t\t].join(\"\"), 'gi');\n\t\t}(),\n\n\t\t/**\n   * A regular expression to use to check the character before a protocol-relative\n   * URL match. We don't want to match a protocol-relative URL if it is part\n   * of another word.\n   *\n   * For example, we want to match something like \"Go to: //google.com\",\n   * but we don't want to match something like \"abc//google.com\"\n   *\n   * This regular expression is used to test the character before the '//'.\n   *\n   * @private\n   * @type {RegExp} wordCharRegExp\n   */\n\t\twordCharRegExp: new RegExp('[' + Autolinker.RegexLib.alphaNumericCharsStr + ']'),\n\n\t\t/**\n   * The regular expression to match opening parenthesis in a URL match.\n   *\n   * This is to determine if we have unbalanced parenthesis in the URL, and to\n   * drop the final parenthesis that was matched if so.\n   *\n   * Ex: The text \"(check out: wikipedia.com/something_(disambiguation))\"\n   * should only autolink the inner \"wikipedia.com/something_(disambiguation)\"\n   * part, so if we find that we have unbalanced parenthesis, we will drop the\n   * last one for the match.\n   *\n   * @private\n   * @property {RegExp}\n   */\n\t\topenParensRe: /\\(/g,\n\n\t\t/**\n   * The regular expression to match closing parenthesis in a URL match. See\n   * {@link #openParensRe} for more information.\n   *\n   * @private\n   * @property {RegExp}\n   */\n\t\tcloseParensRe: /\\)/g,\n\n\t\t/**\n   * @constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\t\tconstructor: function (cfg) {\n\t\t\tAutolinker.matcher.Matcher.prototype.constructor.call(this, cfg);\n\n\t\t\tif (cfg.stripPrefix == null) throw new Error('`stripPrefix` cfg required');\n\t\t\tif (cfg.stripTrailingSlash == null) throw new Error('`stripTrailingSlash` cfg required');\n\n\t\t\tthis.stripPrefix = cfg.stripPrefix;\n\t\t\tthis.stripTrailingSlash = cfg.stripTrailingSlash;\n\t\t\tthis.decodePercentEncoding = cfg.decodePercentEncoding;\n\t\t},\n\n\t\t/**\n   * @inheritdoc\n   */\n\t\tparseMatches: function (text) {\n\t\t\tvar matcherRegex = this.matcherRegex,\n\t\t\t    stripPrefix = this.stripPrefix,\n\t\t\t    stripTrailingSlash = this.stripTrailingSlash,\n\t\t\t    decodePercentEncoding = this.decodePercentEncoding,\n\t\t\t    tagBuilder = this.tagBuilder,\n\t\t\t    matches = [],\n\t\t\t    match;\n\n\t\t\twhile ((match = matcherRegex.exec(text)) !== null) {\n\t\t\t\tvar matchStr = match[0],\n\t\t\t\t    schemeUrlMatch = match[1],\n\t\t\t\t    wwwUrlMatch = match[2],\n\t\t\t\t    wwwProtocolRelativeMatch = match[3],\n\n\t\t\t\t//tldUrlMatch = match[ 4 ],  -- not needed at the moment\n\t\t\t\ttldProtocolRelativeMatch = match[5],\n\t\t\t\t    offset = match.index,\n\t\t\t\t    protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n\t\t\t\t    prevChar = text.charAt(offset - 1);\n\n\t\t\t\tif (!Autolinker.matcher.UrlMatchValidator.isValid(matchStr, schemeUrlMatch)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If the match is preceded by an '@' character, then it is either\n\t\t\t\t// an email address or a username. Skip these types of matches.\n\t\t\t\tif (offset > 0 && prevChar === '@') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If it's a protocol-relative '//' match, but the character before the '//'\n\t\t\t\t// was a word character (i.e. a letter/number), then we found the '//' in the\n\t\t\t\t// middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n\t\t\t\t// match.\n\t\t\t\tif (offset > 0 && protocolRelativeMatch && this.wordCharRegExp.test(prevChar)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (/\\?$/.test(matchStr)) {\n\t\t\t\t\tmatchStr = matchStr.substr(0, matchStr.length - 1);\n\t\t\t\t}\n\n\t\t\t\t// Handle a closing parenthesis at the end of the match, and exclude\n\t\t\t\t// it if there is not a matching open parenthesis in the match\n\t\t\t\t// itself.\n\t\t\t\tif (this.matchHasUnbalancedClosingParen(matchStr)) {\n\t\t\t\t\tmatchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n\t\t\t\t} else {\n\t\t\t\t\t// Handle an invalid character after the TLD\n\t\t\t\t\tvar pos = this.matchHasInvalidCharAfterTld(matchStr, schemeUrlMatch);\n\t\t\t\t\tif (pos > -1) {\n\t\t\t\t\t\tmatchStr = matchStr.substr(0, pos); // remove the trailing invalid chars\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar urlMatchType = schemeUrlMatch ? 'scheme' : wwwUrlMatch ? 'www' : 'tld',\n\t\t\t\t    protocolUrlMatch = !!schemeUrlMatch;\n\n\t\t\t\tmatches.push(new Autolinker.match.Url({\n\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\tmatchedText: matchStr,\n\t\t\t\t\toffset: offset,\n\t\t\t\t\turlMatchType: urlMatchType,\n\t\t\t\t\turl: matchStr,\n\t\t\t\t\tprotocolUrlMatch: protocolUrlMatch,\n\t\t\t\t\tprotocolRelativeMatch: !!protocolRelativeMatch,\n\t\t\t\t\tstripPrefix: stripPrefix,\n\t\t\t\t\tstripTrailingSlash: stripTrailingSlash,\n\t\t\t\t\tdecodePercentEncoding: decodePercentEncoding\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t/**\n   * Determines if a match found has an unmatched closing parenthesis. If so,\n   * this parenthesis will be removed from the match itself, and appended\n   * after the generated anchor tag.\n   *\n   * A match may have an extra closing parenthesis at the end of the match\n   * because the regular expression must include parenthesis for URLs such as\n   * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n   *\n   * However, an extra parenthesis *will* be included when the URL itself is\n   * wrapped in parenthesis, such as in the case of \"(wikipedia.com/something_(disambiguation))\".\n   * In this case, the last closing parenthesis should *not* be part of the\n   * URL itself, and this method will return `true`.\n   *\n   * @private\n   * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n   * @return {Boolean} `true` if there is an unbalanced closing parenthesis at\n   *   the end of the `matchStr`, `false` otherwise.\n   */\n\t\tmatchHasUnbalancedClosingParen: function (matchStr) {\n\t\t\tvar lastChar = matchStr.charAt(matchStr.length - 1);\n\n\t\t\tif (lastChar === ')') {\n\t\t\t\tvar openParensMatch = matchStr.match(this.openParensRe),\n\t\t\t\t    closeParensMatch = matchStr.match(this.closeParensRe),\n\t\t\t\t    numOpenParens = openParensMatch && openParensMatch.length || 0,\n\t\t\t\t    numCloseParens = closeParensMatch && closeParensMatch.length || 0;\n\n\t\t\t\tif (numOpenParens < numCloseParens) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n   * Determine if there's an invalid character after the TLD in a URL. Valid\n   * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n   * check.\n   *\n   * @private\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} schemeUrlMatch The match URL string for a scheme\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Number} the position where the invalid character was found. If\n   *   no such character was found, returns -1\n   */\n\t\tmatchHasInvalidCharAfterTld: function (urlMatch, schemeUrlMatch) {\n\t\t\tif (!urlMatch) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tvar offset = 0;\n\t\t\tif (schemeUrlMatch) {\n\t\t\t\toffset = urlMatch.indexOf(':');\n\t\t\t\turlMatch = urlMatch.slice(offset);\n\t\t\t}\n\n\t\t\tvar alphaNumeric = Autolinker.RegexLib.alphaNumericCharsStr;\n\n\t\t\tvar re = new RegExp(\"^((.?\\/\\/)?[-.\" + alphaNumeric + \"]*[-\" + alphaNumeric + \"]\\\\.[-\" + alphaNumeric + \"]+)\");\n\t\t\tvar res = re.exec(urlMatch);\n\t\t\tif (res === null) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\toffset += res[1].length;\n\t\t\turlMatch = urlMatch.slice(res[1].length);\n\t\t\tif (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n\t\t\t\treturn offset;\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t}\n\n\t});\n\n\t/*global Autolinker */\n\t/*jshint scripturl:true */\n\t/**\n  * @private\n  * @class Autolinker.matcher.UrlMatchValidator\n  * @singleton\n  *\n  * Used by Autolinker to filter out false URL positives from the\n  * {@link Autolinker.matcher.Url UrlMatcher}.\n  *\n  * Due to the limitations of regular expressions (including the missing feature\n  * of look-behinds in JS regular expressions), we cannot always determine the\n  * validity of a given match. This class applies a bit of additional logic to\n  * filter out any false positives that have been matched by the\n  * {@link Autolinker.matcher.Url UrlMatcher}.\n  */\n\tAutolinker.matcher.UrlMatchValidator = {\n\n\t\t/**\n   * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n   *\n   * @private\n   * @property {RegExp} hasFullProtocolRegex\n   */\n\t\thasFullProtocolRegex: /^[A-Za-z][-.+A-Za-z0-9]*:\\/\\//,\n\n\t\t/**\n   * Regex to find the URI scheme, such as 'mailto:'.\n   *\n   * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n   *\n   * @private\n   * @property {RegExp} uriSchemeRegex\n   */\n\t\turiSchemeRegex: /^[A-Za-z][-.+A-Za-z0-9]*:/,\n\n\t\t/**\n   * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n   *\n   * @private\n   * @property {RegExp} hasWordCharAfterProtocolRegex\n   */\n\t\thasWordCharAfterProtocolRegex: new RegExp(\":[^\\\\s]*?[\" + Autolinker.RegexLib.alphaCharsStr + \"]\"),\n\n\t\t/**\n   * Regex to determine if the string is a valid IP address\n   *\n   * @private\n   * @property {RegExp} ipRegex\n   */\n\t\tipRegex: /[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?\\.[0-9][0-9]?[0-9]?(:[0-9]*)?\\/?$/,\n\n\t\t/**\n   * Determines if a given URL match found by the {@link Autolinker.matcher.Url UrlMatcher}\n   * is valid. Will return `false` for:\n   *\n   * 1) URL matches which do not have at least have one period ('.') in the\n   *    domain name (effectively skipping over matches like \"abc:def\").\n   *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n   * 2) URL matches which do not have at least one word character in the\n   *    domain name (effectively skipping over matches like \"git:1.0\").\n   * 3) A protocol-relative url match (a URL beginning with '//') whose\n   *    previous character is a word character (effectively skipping over\n   *    strings like \"abc//google.com\")\n   *\n   * Otherwise, returns `true`.\n   *\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} protocolUrlMatch The match URL string for a protocol\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Boolean} `true` if the match given is valid and should be\n   *   processed, or `false` if the match is invalid and/or should just not be\n   *   processed.\n   */\n\t\tisValid: function (urlMatch, protocolUrlMatch) {\n\t\t\tif (protocolUrlMatch && !this.isValidUriScheme(protocolUrlMatch) || this.urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n\t\t\tthis.urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) && // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n\t\t\t!this.isValidIpAddress(urlMatch) || // Except if it's an IP address\n\t\t\tthis.containsMultipleDots(urlMatch)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tisValidIpAddress: function (uriSchemeMatch) {\n\t\t\tvar newRegex = new RegExp(this.hasFullProtocolRegex.source + this.ipRegex.source);\n\t\t\tvar uriScheme = uriSchemeMatch.match(newRegex);\n\n\t\t\treturn uriScheme !== null;\n\t\t},\n\n\t\tcontainsMultipleDots: function (urlMatch) {\n\t\t\treturn urlMatch.indexOf(\"..\") > -1;\n\t\t},\n\n\t\t/**\n   * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n   * `false` if the scheme is 'javascript:' or 'vbscript:'\n   *\n   * @private\n   * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n   *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n   * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n   */\n\t\tisValidUriScheme: function (uriSchemeMatch) {\n\t\t\tvar uriScheme = uriSchemeMatch.match(this.uriSchemeRegex)[0].toLowerCase();\n\n\t\t\treturn uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n\t\t},\n\n\t\t/**\n   * Determines if a URL match does not have either:\n   *\n   * a) a full protocol (i.e. 'http://'), or\n   * b) at least one dot ('.') in the domain name (for a non-full-protocol\n   *    match).\n   *\n   * Either situation is considered an invalid URL (ex: 'git:d' does not have\n   * either the '://' part, or at least one dot in the domain name. If the\n   * match was 'git:abc.com', we would consider this valid.)\n   *\n   * @private\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} protocolUrlMatch The match URL string for a protocol\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Boolean} `true` if the URL match does not have a full protocol,\n   *   or at least one dot ('.') in a non-full-protocol match.\n   */\n\t\turlMatchDoesNotHaveProtocolOrDot: function (urlMatch, protocolUrlMatch) {\n\t\t\treturn !!urlMatch && (!protocolUrlMatch || !this.hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n\t\t},\n\n\t\t/**\n   * Determines if a URL match does not have at least one word character after\n   * the protocol (i.e. in the domain name).\n   *\n   * At least one letter character must exist in the domain name after a\n   * protocol match. Ex: skip over something like \"git:1.0\"\n   *\n   * @private\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} protocolUrlMatch The match URL string for a protocol\n   *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n   *   have a protocol in the URL string, in order to check for a word\n   *   character after the protocol separator (':').\n   * @return {Boolean} `true` if the URL match does not have at least one word\n   *   character in it after the protocol, `false` otherwise.\n   */\n\t\turlMatchDoesNotHaveAtLeastOneWordChar: function (urlMatch, protocolUrlMatch) {\n\t\t\tif (urlMatch && protocolUrlMatch) {\n\t\t\t\treturn !this.hasWordCharAfterProtocolRegex.test(urlMatch);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t};\n\n\t/*global Autolinker */\n\t/**\n  * A truncation feature where the ellipsis will be placed at the end of the URL.\n  *\n  * @param {String} anchorText\n  * @param {Number} truncateLen The maximum length of the truncated output URL string.\n  * @param {String} ellipsisChars The characters to place within the url, e.g. \"..\".\n  * @return {String} The truncated URL.\n  */\n\tAutolinker.truncate.TruncateEnd = function (anchorText, truncateLen, ellipsisChars) {\n\t\treturn Autolinker.Util.ellipsis(anchorText, truncateLen, ellipsisChars);\n\t};\n\n\t/*global Autolinker */\n\t/**\n  * Date: 2015-10-05\n  * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n  *\n  * A truncation feature, where the ellipsis will be placed in the dead-center of the URL.\n  *\n  * @param {String} url             A URL.\n  * @param {Number} truncateLen     The maximum length of the truncated output URL string.\n  * @param {String} ellipsisChars   The characters to place within the url, e.g. \"..\".\n  * @return {String} The truncated URL.\n  */\n\tAutolinker.truncate.TruncateMiddle = function (url, truncateLen, ellipsisChars) {\n\t\tif (url.length <= truncateLen) {\n\t\t\treturn url;\n\t\t}\n\n\t\tvar ellipsisLengthBeforeParsing;\n\t\tvar ellipsisLength;\n\n\t\tif (ellipsisChars == null) {\n\t\t\tellipsisChars = '&hellip;';\n\t\t\tellipsisLengthBeforeParsing = 8;\n\t\t\tellipsisLength = 3;\n\t\t} else {\n\t\t\tellipsisLengthBeforeParsing = ellipsisChars.length;\n\t\t\tellipsisLength = ellipsisChars.length;\n\t\t}\n\n\t\tvar availableLength = truncateLen - ellipsisLength;\n\t\tvar end = \"\";\n\t\tif (availableLength > 0) {\n\t\t\tend = url.substr(-1 * Math.floor(availableLength / 2));\n\t\t}\n\t\treturn (url.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t};\n\n\t/*global Autolinker */\n\t/**\n  * Date: 2015-10-05\n  * Author: Kasper Søfren <soefritz@gmail.com> (https://github.com/kafoso)\n  *\n  * A truncation feature, where the ellipsis will be placed at a section within\n  * the URL making it still somewhat human readable.\n  *\n  * @param {String} url\t\t\t\t\t\t A URL.\n  * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n  * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n  * @return {String} The truncated URL.\n  */\n\tAutolinker.truncate.TruncateSmart = function (url, truncateLen, ellipsisChars) {\n\n\t\tvar ellipsisLengthBeforeParsing;\n\t\tvar ellipsisLength;\n\n\t\tif (ellipsisChars == null) {\n\t\t\tellipsisChars = '&hellip;';\n\t\t\tellipsisLength = 3;\n\t\t\tellipsisLengthBeforeParsing = 8;\n\t\t} else {\n\t\t\tellipsisLength = ellipsisChars.length;\n\t\t\tellipsisLengthBeforeParsing = ellipsisChars.length;\n\t\t}\n\n\t\tvar parse_url = function (url) {\n\t\t\t// Functionality inspired by PHP function of same name\n\t\t\tvar urlObj = {};\n\t\t\tvar urlSub = url;\n\t\t\tvar match = urlSub.match(/^([a-z]+):\\/\\//i);\n\t\t\tif (match) {\n\t\t\t\turlObj.scheme = match[1];\n\t\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t\t}\n\t\t\tmatch = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n\t\t\tif (match) {\n\t\t\t\turlObj.host = match[1];\n\t\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t\t}\n\t\t\tmatch = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n\t\t\tif (match) {\n\t\t\t\turlObj.path = match[1];\n\t\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t\t}\n\t\t\tmatch = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n\t\t\tif (match) {\n\t\t\t\turlObj.query = match[1];\n\t\t\t\turlSub = urlSub.substr(match[0].length);\n\t\t\t}\n\t\t\tmatch = urlSub.match(/^#(.*?)$/i);\n\t\t\tif (match) {\n\t\t\t\turlObj.fragment = match[1];\n\t\t\t\t//urlSub = urlSub.substr(match[0].length);  -- not used. Uncomment if adding another block.\n\t\t\t}\n\t\t\treturn urlObj;\n\t\t};\n\n\t\tvar buildUrl = function (urlObj) {\n\t\t\tvar url = \"\";\n\t\t\tif (urlObj.scheme && urlObj.host) {\n\t\t\t\turl += urlObj.scheme + \"://\";\n\t\t\t}\n\t\t\tif (urlObj.host) {\n\t\t\t\turl += urlObj.host;\n\t\t\t}\n\t\t\tif (urlObj.path) {\n\t\t\t\turl += \"/\" + urlObj.path;\n\t\t\t}\n\t\t\tif (urlObj.query) {\n\t\t\t\turl += \"?\" + urlObj.query;\n\t\t\t}\n\t\t\tif (urlObj.fragment) {\n\t\t\t\turl += \"#\" + urlObj.fragment;\n\t\t\t}\n\t\t\treturn url;\n\t\t};\n\n\t\tvar buildSegment = function (segment, remainingAvailableLength) {\n\t\t\tvar remainingAvailableLengthHalf = remainingAvailableLength / 2,\n\t\t\t    startOffset = Math.ceil(remainingAvailableLengthHalf),\n\t\t\t    endOffset = -1 * Math.floor(remainingAvailableLengthHalf),\n\t\t\t    end = \"\";\n\t\t\tif (endOffset < 0) {\n\t\t\t\tend = segment.substr(endOffset);\n\t\t\t}\n\t\t\treturn segment.substr(0, startOffset) + ellipsisChars + end;\n\t\t};\n\t\tif (url.length <= truncateLen) {\n\t\t\treturn url;\n\t\t}\n\t\tvar availableLength = truncateLen - ellipsisLength;\n\t\tvar urlObj = parse_url(url);\n\t\t// Clean up the URL\n\t\tif (urlObj.query) {\n\t\t\tvar matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|\\#))(.*?)$/i);\n\t\t\tif (matchQuery) {\n\t\t\t\t// Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n\t\t\t\turlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n\t\t\t\turl = buildUrl(urlObj);\n\t\t\t}\n\t\t}\n\t\tif (url.length <= truncateLen) {\n\t\t\treturn url;\n\t\t}\n\t\tif (urlObj.host) {\n\t\t\turlObj.host = urlObj.host.replace(/^www\\./, \"\");\n\t\t\turl = buildUrl(urlObj);\n\t\t}\n\t\tif (url.length <= truncateLen) {\n\t\t\treturn url;\n\t\t}\n\t\t// Process and build the URL\n\t\tvar str = \"\";\n\t\tif (urlObj.host) {\n\t\t\tstr += urlObj.host;\n\t\t}\n\t\tif (str.length >= availableLength) {\n\t\t\tif (urlObj.host.length == truncateLen) {\n\t\t\t\treturn (urlObj.host.substr(0, truncateLen - ellipsisLength) + ellipsisChars).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t\t}\n\t\t\treturn buildSegment(str, availableLength).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t}\n\t\tvar pathAndQuery = \"\";\n\t\tif (urlObj.path) {\n\t\t\tpathAndQuery += \"/\" + urlObj.path;\n\t\t}\n\t\tif (urlObj.query) {\n\t\t\tpathAndQuery += \"?\" + urlObj.query;\n\t\t}\n\t\tif (pathAndQuery) {\n\t\t\tif ((str + pathAndQuery).length >= availableLength) {\n\t\t\t\tif ((str + pathAndQuery).length == truncateLen) {\n\t\t\t\t\treturn (str + pathAndQuery).substr(0, truncateLen);\n\t\t\t\t}\n\t\t\t\tvar remainingAvailableLength = availableLength - str.length;\n\t\t\t\treturn (str + buildSegment(pathAndQuery, remainingAvailableLength)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t\t} else {\n\t\t\t\tstr += pathAndQuery;\n\t\t\t}\n\t\t}\n\t\tif (urlObj.fragment) {\n\t\t\tvar fragment = \"#\" + urlObj.fragment;\n\t\t\tif ((str + fragment).length >= availableLength) {\n\t\t\t\tif ((str + fragment).length == truncateLen) {\n\t\t\t\t\treturn (str + fragment).substr(0, truncateLen);\n\t\t\t\t}\n\t\t\t\tvar remainingAvailableLength2 = availableLength - str.length;\n\t\t\t\treturn (str + buildSegment(fragment, remainingAvailableLength2)).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t\t\t} else {\n\t\t\t\tstr += fragment;\n\t\t\t}\n\t\t}\n\t\tif (urlObj.scheme && urlObj.host) {\n\t\t\tvar scheme = urlObj.scheme + \"://\";\n\t\t\tif ((str + scheme).length < availableLength) {\n\t\t\t\treturn (scheme + str).substr(0, truncateLen);\n\t\t\t}\n\t\t}\n\t\tif (str.length <= truncateLen) {\n\t\t\treturn str;\n\t\t}\n\t\tvar end = \"\";\n\t\tif (availableLength > 0) {\n\t\t\tend = str.substr(-1 * Math.floor(availableLength / 2));\n\t\t}\n\t\treturn (str.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(0, availableLength + ellipsisLengthBeforeParsing);\n\t};\n\n\treturn Autolinker;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!*************************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/media/chat-media.element.js ***!
  \*************************************************************************/
/*! exports provided: default */
/*! exports used: ChatMedia */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(/*! ./index */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css__ = __webpack_require__(/*! ./styles.css */ 19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_css__);\n\n // #ugly #todo\n\n\n// todo:\n// async image loading\n// intersection observer for loading and display toggling\n// help scrolling by showing media conditionally\n// add a video renderer\nclass ChatMedia extends HTMLElement {\n  createdCallback() {\n    if (this.getAttribute('image')) this.innerHTML = this.render();\n  }\n\n  attachedCallback() {}\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  render() {\n    return Object(__WEBPACK_IMPORTED_MODULE_1__index__[\"c\" /* MediaItem */])({\n      avatar: this.getAttribute('avatar'),\n      image: this.getAttribute('image')\n    });\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-media', ChatMedia);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9tZWRpYS9jaGF0LW1lZGlhLmVsZW1lbnQuanM/ZTE5NyJdLCJuYW1lcyI6WyJDaGF0TWVkaWEiLCJIVE1MRWxlbWVudCIsImNyZWF0ZWRDYWxsYmFjayIsImdldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsInJlbmRlciIsImF0dGFjaGVkQ2FsbGJhY2siLCJkZXRhY2hlZENhbGxiYWNrIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0ciIsIm9sZFZhbCIsIm5ld1ZhbCIsIk1lZGlhSXRlbSIsImF2YXRhciIsImltYWdlIiwiZG9jdW1lbnQiLCJyZWdpc3RlckVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtDQUNvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsTUFBTUEsU0FBTixTQUF3QkMsV0FBeEIsQ0FBb0M7QUFDakRDLG9CQUFrQjtBQUNoQixRQUFJLEtBQUtDLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBSixFQUNFLEtBQUtDLFNBQUwsR0FBaUIsS0FBS0MsTUFBTCxFQUFqQjtBQUNIOztBQUVEQyxxQkFBbUIsQ0FBRTtBQUNyQkMscUJBQW1CLENBQUU7QUFDckJDLDJCQUF5QkMsSUFBekIsRUFBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQyxDQUFFOztBQUVqRE4sV0FBUztBQUNQLFdBQU8saUVBQUFPLENBQVU7QUFDZkMsY0FBUSxLQUFLVixZQUFMLENBQWtCLFFBQWxCLENBRE87QUFFZlcsYUFBTyxLQUFLWCxZQUFMLENBQWtCLE9BQWxCO0FBRlEsS0FBVixDQUFQO0FBSUQ7QUFmZ0Q7QUFBQTtBQUFBOztBQWtCbkRZLFNBQVNDLGVBQVQsQ0FBeUIsWUFBekIsRUFBdUNoQixTQUF2QyIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICQgfSBmcm9tICd1dGlsaXRpZXMvc2hvcnRoYW5kcydcbmltcG9ydCB7IE1lZGlhSXRlbSB9IGZyb20gJy4vaW5kZXgnIC8vICN1Z2x5ICN0b2RvXG5pbXBvcnQgJy4vc3R5bGVzLmNzcydcblxuLy8gdG9kbzpcbi8vIGFzeW5jIGltYWdlIGxvYWRpbmdcbi8vIGludGVyc2VjdGlvbiBvYnNlcnZlciBmb3IgbG9hZGluZyBhbmQgZGlzcGxheSB0b2dnbGluZ1xuLy8gaGVscCBzY3JvbGxpbmcgYnkgc2hvd2luZyBtZWRpYSBjb25kaXRpb25hbGx5XG4vLyBhZGQgYSB2aWRlbyByZW5kZXJlclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhdE1lZGlhIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjcmVhdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCdpbWFnZScpKVxuICAgICAgdGhpcy5pbm5lckhUTUwgPSB0aGlzLnJlbmRlcigpXG4gIH1cblxuICBhdHRhY2hlZENhbGxiYWNrKCkge31cbiAgZGV0YWNoZWRDYWxsYmFjaygpIHt9XG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBvbGRWYWwsIG5ld1ZhbCkge31cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIE1lZGlhSXRlbSh7XG4gICAgICBhdmF0YXI6IHRoaXMuZ2V0QXR0cmlidXRlKCdhdmF0YXInKSxcbiAgICAgIGltYWdlOiB0aGlzLmdldEF0dHJpYnV0ZSgnaW1hZ2UnKVxuICAgIH0pXG4gIH1cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LW1lZGlhJywgQ2hhdE1lZGlhKVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvcmVuZGVyZXJzL21lZGlhL2NoYXQtbWVkaWEuZWxlbWVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!**************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/media/styles.css ***!
  \**************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9tZWRpYS9zdHlsZXMuY3NzP2RhMWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9yZW5kZXJlcnMvbWVkaWEvc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!*****************************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/gallery/chat-gallery.element.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/*! exports used: ChatGallery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(/*! ./index */ 4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css__ = __webpack_require__(/*! ./styles.css */ 21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_css__);\n\n // #ugly #todo\n\n\n// todo:\n// async image loading strategy\n// intersection observer for loading and display toggling\n// help scrolling by showing media conditionally\nclass ChatGallery extends HTMLElement {\n  createdCallback() {\n    if (this.hasAttribute('images')) {\n      this.seed_data = JSON.parse(this.getAttribute('images'));\n      this.innerHTML = this.render();\n    }\n  }\n\n  attachedCallback() {}\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  render() {\n    return `\n      <div sticky><chat-avatar src=\"${this.getAttribute('avatar')}\"></chat-avatar></div>\n      ${this.seed_data.reduce((images, image) => `\n        ${images}\n        ${Object(__WEBPACK_IMPORTED_MODULE_1__index__[\"c\" /* Image */])(image.src)}\n      `, '')}\n    `;\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-gallery', ChatGallery);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9nYWxsZXJ5L2NoYXQtZ2FsbGVyeS5lbGVtZW50LmpzP2EzM2IiXSwibmFtZXMiOlsiQ2hhdEdhbGxlcnkiLCJIVE1MRWxlbWVudCIsImNyZWF0ZWRDYWxsYmFjayIsImhhc0F0dHJpYnV0ZSIsInNlZWRfZGF0YSIsIkpTT04iLCJwYXJzZSIsImdldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsInJlbmRlciIsImF0dGFjaGVkQ2FsbGJhY2siLCJkZXRhY2hlZENhbGxiYWNrIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0ciIsIm9sZFZhbCIsIm5ld1ZhbCIsInJlZHVjZSIsImltYWdlcyIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJkb2N1bWVudCIsInJlZ2lzdGVyRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0NBQ2dDO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsTUFBTUEsV0FBTixTQUEwQkMsV0FBMUIsQ0FBc0M7QUFDbkRDLG9CQUFrQjtBQUNoQixRQUFJLEtBQUtDLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBSixFQUFpQztBQUMvQixXQUFLQyxTQUFMLEdBQWlCQyxLQUFLQyxLQUFMLENBQVcsS0FBS0MsWUFBTCxDQUFrQixRQUFsQixDQUFYLENBQWpCO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixLQUFLQyxNQUFMLEVBQWpCO0FBQ0Q7QUFDRjs7QUFFREMscUJBQW1CLENBQUU7QUFDckJDLHFCQUFtQixDQUFFO0FBQ3JCQywyQkFBeUJDLElBQXpCLEVBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0MsQ0FBRTs7QUFFakROLFdBQVM7QUFDUCxXQUFRO3NDQUMwQixLQUFLRixZQUFMLENBQWtCLFFBQWxCLENBQTRCO1FBQzFELEtBQUtILFNBQUwsQ0FBZVksTUFBZixDQUFzQixDQUFDQyxNQUFELEVBQVNDLEtBQVQsS0FBb0I7VUFDeENELE1BQU87VUFDUCw2REFBQUUsQ0FBTUQsTUFBTUUsR0FBWixDQUFpQjtPQUZuQixFQUdDLEVBSEQsQ0FHSztLQUxUO0FBT0Q7QUFwQmtEO0FBQUE7QUFBQTs7QUF1QnJEQyxTQUFTQyxlQUFULENBQXlCLGNBQXpCLEVBQXlDdEIsV0FBekMiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAkIH0gZnJvbSAndXRpbGl0aWVzL3Nob3J0aGFuZHMnXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4vaW5kZXgnIC8vICN1Z2x5ICN0b2RvXG5pbXBvcnQgJy4vc3R5bGVzLmNzcydcblxuLy8gdG9kbzpcbi8vIGFzeW5jIGltYWdlIGxvYWRpbmcgc3RyYXRlZ3lcbi8vIGludGVyc2VjdGlvbiBvYnNlcnZlciBmb3IgbG9hZGluZyBhbmQgZGlzcGxheSB0b2dnbGluZ1xuLy8gaGVscCBzY3JvbGxpbmcgYnkgc2hvd2luZyBtZWRpYSBjb25kaXRpb25hbGx5XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGF0R2FsbGVyeSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY3JlYXRlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZSgnaW1hZ2VzJykpIHtcbiAgICAgIHRoaXMuc2VlZF9kYXRhID0gSlNPTi5wYXJzZSh0aGlzLmdldEF0dHJpYnV0ZSgnaW1hZ2VzJykpXG4gICAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMucmVuZGVyKClcbiAgICB9XG4gIH1cblxuICBhdHRhY2hlZENhbGxiYWNrKCkge31cbiAgZGV0YWNoZWRDYWxsYmFjaygpIHt9XG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBvbGRWYWwsIG5ld1ZhbCkge31cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgc3RpY2t5PjxjaGF0LWF2YXRhciBzcmM9XCIke3RoaXMuZ2V0QXR0cmlidXRlKCdhdmF0YXInKX1cIj48L2NoYXQtYXZhdGFyPjwvZGl2PlxuICAgICAgJHt0aGlzLnNlZWRfZGF0YS5yZWR1Y2UoKGltYWdlcywgaW1hZ2UpID0+IGBcbiAgICAgICAgJHtpbWFnZXN9XG4gICAgICAgICR7SW1hZ2UoaW1hZ2Uuc3JjKX1cbiAgICAgIGAsICcnKX1cbiAgICBgXG4gIH1cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LWdhbGxlcnknLCBDaGF0R2FsbGVyeSlcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9nYWxsZXJ5L2NoYXQtZ2FsbGVyeS5lbGVtZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!****************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/gallery/styles.css ***!
  \****************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9nYWxsZXJ5L3N0eWxlcy5jc3M/ZmVlYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9nYWxsZXJ5L3N0eWxlcy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!************************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/card/chat-cards.element.js ***!
  \************************************************************************/
/*! exports provided: default */
/*! exports used: ChatCards */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(/*! ./index */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css__ = __webpack_require__(/*! ./styles.css */ 23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_css__);\n\n // #ugly #todo\n\n\nclass ChatCards extends HTMLElement {\n  createdCallback() {\n    if (this.hasAttribute('cards')) {\n      this.seed_data = JSON.parse(this.getAttribute('cards'));\n      this.innerHTML = this.render();\n    }\n  }\n\n  attachedCallback() {}\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  render() {\n    return `\n      <div sticky><chat-avatar src=\"${this.getAttribute('avatar')}\"></chat-avatar></div>\n      ${this.seed_data.reduce((cards, { image, text }) => `\n        ${cards}\n        ${Object(__WEBPACK_IMPORTED_MODULE_1__index__[\"a\" /* Card */])({ image, text })}\n      `, '')}\n      `;\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-cards', ChatCards);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9jYXJkL2NoYXQtY2FyZHMuZWxlbWVudC5qcz9lOWNiIl0sIm5hbWVzIjpbIkNoYXRDYXJkcyIsIkhUTUxFbGVtZW50IiwiY3JlYXRlZENhbGxiYWNrIiwiaGFzQXR0cmlidXRlIiwic2VlZF9kYXRhIiwiSlNPTiIsInBhcnNlIiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwicmVuZGVyIiwiYXR0YWNoZWRDYWxsYmFjayIsImRldGFjaGVkQ2FsbGJhY2siLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJhdHRyIiwib2xkVmFsIiwibmV3VmFsIiwicmVkdWNlIiwiY2FyZHMiLCJpbWFnZSIsInRleHQiLCJDYXJkIiwiZG9jdW1lbnQiLCJyZWdpc3RlckVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtDQUMrQjtBQUMvQjs7QUFFZSxNQUFNQSxTQUFOLFNBQXdCQyxXQUF4QixDQUFvQztBQUNqREMsb0JBQWtCO0FBQ2hCLFFBQUksS0FBS0MsWUFBTCxDQUFrQixPQUFsQixDQUFKLEVBQWdDO0FBQzlCLFdBQUtDLFNBQUwsR0FBaUJDLEtBQUtDLEtBQUwsQ0FBVyxLQUFLQyxZQUFMLENBQWtCLE9BQWxCLENBQVgsQ0FBakI7QUFDQSxXQUFLQyxTQUFMLEdBQWlCLEtBQUtDLE1BQUwsRUFBakI7QUFDRDtBQUNGOztBQUVEQyxxQkFBbUIsQ0FBRTtBQUNyQkMscUJBQW1CLENBQUU7QUFDckJDLDJCQUF5QkMsSUFBekIsRUFBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQyxDQUFFOztBQUVqRE4sV0FBUztBQUNQLFdBQVE7c0NBQzBCLEtBQUtGLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBNEI7UUFDMUQsS0FBS0gsU0FBTCxDQUFlWSxNQUFmLENBQXNCLENBQUNDLEtBQUQsRUFBUSxFQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBUixLQUEyQjtVQUMvQ0YsS0FBTTtVQUNOLDREQUFBRyxDQUFLLEVBQUNGLEtBQUQsRUFBUUMsSUFBUixFQUFMLENBQW9CO09BRnRCLEVBR0MsRUFIRCxDQUdLO09BTFQ7QUFPRDtBQXBCZ0Q7QUFBQTtBQUFBOztBQXVCbkRFLFNBQVNDLGVBQVQsQ0FBeUIsWUFBekIsRUFBdUN0QixTQUF2QyIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICQgfSBmcm9tICd1dGlsaXRpZXMvc2hvcnRoYW5kcydcbmltcG9ydCB7IENhcmQgfSBmcm9tICcuL2luZGV4JyAvLyAjdWdseSAjdG9kb1xuaW1wb3J0ICcuL3N0eWxlcy5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXRDYXJkcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY3JlYXRlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZSgnY2FyZHMnKSkge1xuICAgICAgdGhpcy5zZWVkX2RhdGEgPSBKU09OLnBhcnNlKHRoaXMuZ2V0QXR0cmlidXRlKCdjYXJkcycpKVxuICAgICAgdGhpcy5pbm5lckhUTUwgPSB0aGlzLnJlbmRlcigpXG4gICAgfVxuICB9XG5cbiAgYXR0YWNoZWRDYWxsYmFjaygpIHt9XG4gIGRldGFjaGVkQ2FsbGJhY2soKSB7fVxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHt9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBgXG4gICAgICA8ZGl2IHN0aWNreT48Y2hhdC1hdmF0YXIgc3JjPVwiJHt0aGlzLmdldEF0dHJpYnV0ZSgnYXZhdGFyJyl9XCI+PC9jaGF0LWF2YXRhcj48L2Rpdj5cbiAgICAgICR7dGhpcy5zZWVkX2RhdGEucmVkdWNlKChjYXJkcywge2ltYWdlLCB0ZXh0fSkgPT4gYFxuICAgICAgICAke2NhcmRzfVxuICAgICAgICAke0NhcmQoe2ltYWdlLCB0ZXh0fSl9XG4gICAgICBgLCAnJyl9XG4gICAgICBgXG4gIH1cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LWNhcmRzJywgQ2hhdENhcmRzKVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvcmVuZGVyZXJzL2NhcmQvY2hhdC1jYXJkcy5lbGVtZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/*!*************************************************************!*\
  !*** ./app/js/components/chat-ui/renderers/card/styles.css ***!
  \*************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9jYXJkL3N0eWxlcy5jc3M/YTIzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3JlbmRlcmVycy9jYXJkL3N0eWxlcy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/*!***************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-messagelist/styles.css ***!
  \***************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtbWVzc2FnZWxpc3Qvc3R5bGVzLmNzcz8zNjBmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvY2hhdC1tZXNzYWdlbGlzdC9zdHlsZXMuY3NzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/*!************************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-message/chat-message.element.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__renderers___ = __webpack_require__(/*! ../renderers/ */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css__ = __webpack_require__(/*! ./styles.css */ 26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__styles_css__);\n\n\n\nlet data = null;\n\n// TODO:\n// sending state\n// sent state\n// read state\nclass ChatMessage extends HTMLElement {\n  createdCallback() {\n    if (this.hasAttribute('message')) this.message = this.getAttribute('message');\n  }\n\n  attachedCallback() {\n    if (this.hasAttribute('new')) this.addEventListener('animationend', e => this.removeAttribute('new'));\n  }\n\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  set message(payload) {\n    if (!payload) return;\n\n    data = payload;\n    this.innerHTML = this.render();\n  }\n\n  set new(val) {\n    this.setAttribute('new', val);\n  }\n\n  render() {\n    return Object(__WEBPACK_IMPORTED_MODULE_0__renderers___[\"HTML\"])(data);\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-message', ChatMessage);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtbWVzc2FnZS9jaGF0LW1lc3NhZ2UuZWxlbWVudC5qcz9jNjYzIl0sIm5hbWVzIjpbImRhdGEiLCJDaGF0TWVzc2FnZSIsIkhUTUxFbGVtZW50IiwiY3JlYXRlZENhbGxiYWNrIiwiaGFzQXR0cmlidXRlIiwibWVzc2FnZSIsImdldEF0dHJpYnV0ZSIsImF0dGFjaGVkQ2FsbGJhY2siLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRldGFjaGVkQ2FsbGJhY2siLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJhdHRyIiwib2xkVmFsIiwibmV3VmFsIiwicGF5bG9hZCIsImlubmVySFRNTCIsInJlbmRlciIsIm5ldyIsInZhbCIsInNldEF0dHJpYnV0ZSIsIkhUTUwiLCJkb2N1bWVudCIsInJlZ2lzdGVyRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTs7QUFFQSxJQUFJQSxPQUFPLElBQVg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQyxXQUFOLFNBQTBCQyxXQUExQixDQUFzQztBQUNuREMsb0JBQWtCO0FBQ2hCLFFBQUksS0FBS0MsWUFBTCxDQUFrQixTQUFsQixDQUFKLEVBQ0UsS0FBS0MsT0FBTCxHQUFlLEtBQUtDLFlBQUwsQ0FBa0IsU0FBbEIsQ0FBZjtBQUNIOztBQUVEQyxxQkFBbUI7QUFDakIsUUFBSSxLQUFLSCxZQUFMLENBQWtCLEtBQWxCLENBQUosRUFDRSxLQUFLSSxnQkFBTCxDQUFzQixjQUF0QixFQUFzQ0MsS0FDcEMsS0FBS0MsZUFBTCxDQUFxQixLQUFyQixDQURGO0FBRUg7O0FBRURDLHFCQUFtQixDQUFFO0FBQ3JCQywyQkFBeUJDLElBQXpCLEVBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0MsQ0FBRTs7QUFFakQsTUFBSVYsT0FBSixDQUFZVyxPQUFaLEVBQXFCO0FBQ25CLFFBQUksQ0FBQ0EsT0FBTCxFQUFjOztBQUVkaEIsV0FBT2dCLE9BQVA7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtDLE1BQUwsRUFBakI7QUFDRDs7QUFFRCxNQUFJQyxHQUFKLENBQVFDLEdBQVIsRUFBYTtBQUNYLFNBQUtDLFlBQUwsQ0FBa0IsS0FBbEIsRUFBeUJELEdBQXpCO0FBQ0Q7O0FBRURGLFdBQVM7QUFDUCxXQUFPLHlEQUFBSSxDQUFLdEIsSUFBTCxDQUFQO0FBQ0Q7QUE1QmtEO0FBQUE7QUFBQTs7QUErQnJEdUIsU0FBU0MsZUFBVCxDQUF5QixjQUF6QixFQUF5Q3ZCLFdBQXpDIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRNTCB9IGZyb20gJy4uL3JlbmRlcmVycy8nXG5pbXBvcnQgJy4vc3R5bGVzLmNzcydcblxubGV0IGRhdGEgPSBudWxsXG5cbi8vIFRPRE86XG4vLyBzZW5kaW5nIHN0YXRlXG4vLyBzZW50IHN0YXRlXG4vLyByZWFkIHN0YXRlXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGF0TWVzc2FnZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY3JlYXRlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZSgnbWVzc2FnZScpKVxuICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ21lc3NhZ2UnKVxuICB9XG5cbiAgYXR0YWNoZWRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ25ldycpKVxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBlID0+XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCduZXcnKSlcbiAgfVxuXG4gIGRldGFjaGVkQ2FsbGJhY2soKSB7fVxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHt9XG5cbiAgc2V0IG1lc3NhZ2UocGF5bG9hZCkge1xuICAgIGlmICghcGF5bG9hZCkgcmV0dXJuXG5cbiAgICBkYXRhID0gcGF5bG9hZFxuICAgIHRoaXMuaW5uZXJIVE1MID0gdGhpcy5yZW5kZXIoKVxuICB9XG5cbiAgc2V0IG5ldyh2YWwpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnbmV3JywgdmFsKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBIVE1MKGRhdGEpXG4gIH1cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LW1lc3NhZ2UnLCBDaGF0TWVzc2FnZSlcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtbWVzc2FnZS9jaGF0LW1lc3NhZ2UuZWxlbWVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/*!***********************************************************!*\
  !*** ./app/js/components/chat-ui/chat-message/styles.css ***!
  \***********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtbWVzc2FnZS9zdHlsZXMuY3NzP2JjMzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9jaGF0LW1lc3NhZ2Uvc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/*!************************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-cluster/chat-cluster.element.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css__ = __webpack_require__(/*! ./styles.css */ 28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__styles_css__);\n\n\n\nclass ChatCluster extends HTMLElement {\n  createdCallback() {\n    this.classList.add('loading');\n\n    Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"c\" /* setAttributes */])(this, {\n      'grid': '',\n      'vertically-aligned': 'bottom'\n    });\n\n    if (this.hasAttribute('messages')) {\n      this.seed_data = JSON.parse(this.getAttribute('messages'));\n      this.innerHTML = this.render();\n    }\n  }\n\n  attachedCallback() {\n    this.Messages = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('section', this);\n    this.Messages.setAttribute('grid', 'rows');\n\n    this.classList.remove('loading');\n  }\n\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n\n  set author(data) {\n    this.author = data;\n  }\n\n  render() {\n    return `\n      <chat-avatar src='${this.getAttribute('avatar')}'></chat-avatar>\n      <section grid='rows'>\n        <h3>${this.getAttribute('username')}</h3>\n        ${this.seed_data.reduce((messages, message) => `${messages}\n          <chat-message message='${message}'></chat-message>\n        `, '')}\n      </section>\n    `;\n  }\n\n  add(message) {\n    this.Messages.appendChild(this.createMessage(message));\n  }\n\n  createMessage({ contents }) {\n    let node = document.createElement('chat-message');\n    node.new = true;\n    node.message = contents;\n    return node;\n  }\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-cluster', ChatCluster);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtY2x1c3Rlci9jaGF0LWNsdXN0ZXIuZWxlbWVudC5qcz80ZDc0Il0sIm5hbWVzIjpbIkNoYXRDbHVzdGVyIiwiSFRNTEVsZW1lbnQiLCJjcmVhdGVkQ2FsbGJhY2siLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGVzIiwiaGFzQXR0cmlidXRlIiwic2VlZF9kYXRhIiwiSlNPTiIsInBhcnNlIiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwicmVuZGVyIiwiYXR0YWNoZWRDYWxsYmFjayIsIk1lc3NhZ2VzIiwiJCIsInNldEF0dHJpYnV0ZSIsInJlbW92ZSIsImRldGFjaGVkQ2FsbGJhY2siLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJhdHRyIiwib2xkVmFsIiwibmV3VmFsIiwiYXV0aG9yIiwiZGF0YSIsInJlZHVjZSIsIm1lc3NhZ2VzIiwibWVzc2FnZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlTWVzc2FnZSIsImNvbnRlbnRzIiwibm9kZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5ldyIsInJlZ2lzdGVyRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTs7QUFFZSxNQUFNQSxXQUFOLFNBQTBCQyxXQUExQixDQUFzQztBQUNuREMsb0JBQWtCO0FBQ2hCLFNBQUtDLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixTQUFuQjs7QUFFQUMsSUFBQSxtRkFBQUEsQ0FBYyxJQUFkLEVBQW9CO0FBQ2xCLGNBQVEsRUFEVTtBQUVsQiw0QkFBc0I7QUFGSixLQUFwQjs7QUFLQSxRQUFJLEtBQUtDLFlBQUwsQ0FBa0IsVUFBbEIsQ0FBSixFQUFtQztBQUNqQyxXQUFLQyxTQUFMLEdBQWlCQyxLQUFLQyxLQUFMLENBQVcsS0FBS0MsWUFBTCxDQUFrQixVQUFsQixDQUFYLENBQWpCO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixLQUFLQyxNQUFMLEVBQWpCO0FBQ0Q7QUFDRjs7QUFFREMscUJBQW1CO0FBQ2pCLFNBQUtDLFFBQUwsR0FBZ0IsdUVBQUFDLENBQUUsU0FBRixFQUFhLElBQWIsQ0FBaEI7QUFDQSxTQUFLRCxRQUFMLENBQWNFLFlBQWQsQ0FBMkIsTUFBM0IsRUFBbUMsTUFBbkM7O0FBRUEsU0FBS2IsU0FBTCxDQUFlYyxNQUFmLENBQXNCLFNBQXRCO0FBQ0Q7O0FBRURDLHFCQUFtQixDQUFFO0FBQ3JCQywyQkFBeUJDLElBQXpCLEVBQStCQyxNQUEvQixFQUF1Q0MsTUFBdkMsRUFBK0MsQ0FBRTs7QUFFakQsTUFBSUMsTUFBSixDQUFXQyxJQUFYLEVBQWlCO0FBQ2YsU0FBS0QsTUFBTCxHQUFjQyxJQUFkO0FBQ0Q7O0FBRURaLFdBQVM7QUFDUCxXQUFROzBCQUNjLEtBQUtGLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBNEI7O2NBRXhDLEtBQUtBLFlBQUwsQ0FBa0IsVUFBbEIsQ0FBOEI7VUFDbEMsS0FBS0gsU0FBTCxDQUFla0IsTUFBZixDQUFzQixDQUFDQyxRQUFELEVBQVdDLE9BQVgsS0FDckIsR0FBRUQsUUFBUzttQ0FDYUMsT0FBUTtTQUZqQyxFQUdDLEVBSEQsQ0FHSzs7S0FQWDtBQVVEOztBQUVEdkIsTUFBSXVCLE9BQUosRUFBYTtBQUNYLFNBQUtiLFFBQUwsQ0FBY2MsV0FBZCxDQUNFLEtBQUtDLGFBQUwsQ0FBbUJGLE9BQW5CLENBREY7QUFFRDs7QUFFREUsZ0JBQWMsRUFBQ0MsUUFBRCxFQUFkLEVBQTBCO0FBQ3hCLFFBQUlDLE9BQVlDLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBaEI7QUFDQUYsU0FBS0csR0FBTCxHQUFnQixJQUFoQjtBQUNBSCxTQUFLSixPQUFMLEdBQWdCRyxRQUFoQjtBQUNBLFdBQU9DLElBQVA7QUFDRDtBQXBEa0Q7QUFBQTtBQUFBOztBQXVEckRDLFNBQVNHLGVBQVQsQ0FBeUIsY0FBekIsRUFBeUNuQyxXQUF6QyIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICQsIHNldEF0dHJpYnV0ZXMgfSBmcm9tICd1dGlsaXRpZXMvc2hvcnRoYW5kcydcbmltcG9ydCAnLi9zdHlsZXMuY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGF0Q2x1c3RlciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY3JlYXRlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbG9hZGluZycpXG4gICAgXG4gICAgc2V0QXR0cmlidXRlcyh0aGlzLCB7XG4gICAgICAnZ3JpZCc6ICcnLFxuICAgICAgJ3ZlcnRpY2FsbHktYWxpZ25lZCc6ICdib3R0b20nLFxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ21lc3NhZ2VzJykpIHtcbiAgICAgIHRoaXMuc2VlZF9kYXRhID0gSlNPTi5wYXJzZSh0aGlzLmdldEF0dHJpYnV0ZSgnbWVzc2FnZXMnKSlcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdGhpcy5yZW5kZXIoKVxuICAgIH1cbiAgfVxuXG4gIGF0dGFjaGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5NZXNzYWdlcyA9ICQoJ3NlY3Rpb24nLCB0aGlzKVxuICAgIHRoaXMuTWVzc2FnZXMuc2V0QXR0cmlidXRlKCdncmlkJywgJ3Jvd3MnKVxuXG4gICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdsb2FkaW5nJylcbiAgfVxuXG4gIGRldGFjaGVkQ2FsbGJhY2soKSB7fVxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgb2xkVmFsLCBuZXdWYWwpIHt9XG5cbiAgc2V0IGF1dGhvcihkYXRhKSB7XG4gICAgdGhpcy5hdXRob3IgPSBkYXRhXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGBcbiAgICAgIDxjaGF0LWF2YXRhciBzcmM9JyR7dGhpcy5nZXRBdHRyaWJ1dGUoJ2F2YXRhcicpfSc+PC9jaGF0LWF2YXRhcj5cbiAgICAgIDxzZWN0aW9uIGdyaWQ9J3Jvd3MnPlxuICAgICAgICA8aDM+JHt0aGlzLmdldEF0dHJpYnV0ZSgndXNlcm5hbWUnKX08L2gzPlxuICAgICAgICAke3RoaXMuc2VlZF9kYXRhLnJlZHVjZSgobWVzc2FnZXMsIG1lc3NhZ2UpID0+XG4gICAgICAgICAgYCR7bWVzc2FnZXN9XG4gICAgICAgICAgPGNoYXQtbWVzc2FnZSBtZXNzYWdlPScke21lc3NhZ2V9Jz48L2NoYXQtbWVzc2FnZT5cbiAgICAgICAgYCwgJycpfVxuICAgICAgPC9zZWN0aW9uPlxuICAgIGBcbiAgfVxuXG4gIGFkZChtZXNzYWdlKSB7XG4gICAgdGhpcy5NZXNzYWdlcy5hcHBlbmRDaGlsZChcbiAgICAgIHRoaXMuY3JlYXRlTWVzc2FnZShtZXNzYWdlKSlcbiAgfVxuXG4gIGNyZWF0ZU1lc3NhZ2Uoe2NvbnRlbnRzfSkge1xuICAgIGxldCBub2RlICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjaGF0LW1lc3NhZ2UnKVxuICAgIG5vZGUubmV3ICAgICAgPSB0cnVlXG4gICAgbm9kZS5tZXNzYWdlICA9IGNvbnRlbnRzXG4gICAgcmV0dXJuIG5vZGVcbiAgfVxufVxuXG5kb2N1bWVudC5yZWdpc3RlckVsZW1lbnQoJ2NoYXQtY2x1c3RlcicsIENoYXRDbHVzdGVyKVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9jb21wb25lbnRzL2NoYXQtdWkvY2hhdC1jbHVzdGVyL2NoYXQtY2x1c3Rlci5lbGVtZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/*!***********************************************************!*\
  !*** ./app/js/components/chat-ui/chat-cluster/styles.css ***!
  \***********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtY2x1c3Rlci9zdHlsZXMuY3NzPzkwMWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9jaGF0LWNsdXN0ZXIvc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/*!**********************************************************************!*\
  !*** ./app/js/components/chat-ui/chat-avatar/chat-avatar.element.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__styles_css__ = __webpack_require__(/*! ./styles.css */ 30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__styles_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__styles_css__);\n\n\nclass ChatAvatar extends HTMLElement {\n  createdCallback() {\n    if (this.hasAttribute('src')) {\n      this.classList.add('loading');\n\n      this.img = document.createElement('img');\n      this.img.src = this.getAttribute('src');\n    }\n  }\n\n  attachedCallback() {\n    this.img.onload = () => {\n      this.appendChild(this.img);\n      this.classList.remove('loading');\n    };\n  }\n\n  detachedCallback() {}\n  attributeChangedCallback(attr, oldVal, newVal) {}\n}\n/* unused harmony export default */\n\n\ndocument.registerElement('chat-avatar', ChatAvatar);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXZhdGFyL2NoYXQtYXZhdGFyLmVsZW1lbnQuanM/YTk1OSJdLCJuYW1lcyI6WyJDaGF0QXZhdGFyIiwiSFRNTEVsZW1lbnQiLCJjcmVhdGVkQ2FsbGJhY2siLCJoYXNBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbWciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRhY2hlZENhbGxiYWNrIiwib25sb2FkIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmUiLCJkZXRhY2hlZENhbGxiYWNrIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0ciIsIm9sZFZhbCIsIm5ld1ZhbCIsInJlZ2lzdGVyRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFZSxNQUFNQSxVQUFOLFNBQXlCQyxXQUF6QixDQUFxQztBQUNsREMsb0JBQWtCO0FBQ2hCLFFBQUksS0FBS0MsWUFBTCxDQUFrQixLQUFsQixDQUFKLEVBQThCO0FBQzVCLFdBQUtDLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixTQUFuQjs7QUFFQSxXQUFLQyxHQUFMLEdBQWdCQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0EsV0FBS0YsR0FBTCxDQUFTRyxHQUFULEdBQWdCLEtBQUtDLFlBQUwsQ0FBa0IsS0FBbEIsQ0FBaEI7QUFDRDtBQUNGOztBQUVEQyxxQkFBbUI7QUFDakIsU0FBS0wsR0FBTCxDQUFTTSxNQUFULEdBQWtCLE1BQU07QUFDdEIsV0FBS0MsV0FBTCxDQUFpQixLQUFLUCxHQUF0QjtBQUNBLFdBQUtGLFNBQUwsQ0FBZVUsTUFBZixDQUFzQixTQUF0QjtBQUNELEtBSEQ7QUFJRDs7QUFFREMscUJBQW1CLENBQUU7QUFDckJDLDJCQUF5QkMsSUFBekIsRUFBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQyxDQUFFO0FBbEJDO0FBQUE7QUFBQTs7QUFxQnBEWixTQUFTYSxlQUFULENBQXlCLGFBQXpCLEVBQXdDcEIsVUFBeEMiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vc3R5bGVzLmNzcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhdEF2YXRhciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY3JlYXRlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbG9hZGluZycpXG4gICAgICBcbiAgICAgIHRoaXMuaW1nICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKVxuICAgICAgdGhpcy5pbWcuc3JjICA9IHRoaXMuZ2V0QXR0cmlidXRlKCdzcmMnKVxuICAgIH1cbiAgfVxuXG4gIGF0dGFjaGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5pbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLmltZylcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGluZycpXG4gICAgfVxuICB9XG5cbiAgZGV0YWNoZWRDYWxsYmFjaygpIHt9XG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBvbGRWYWwsIG5ld1ZhbCkge31cbn1cblxuZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50KCdjaGF0LWF2YXRhcicsIENoYXRBdmF0YXIpXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2pzL2NvbXBvbmVudHMvY2hhdC11aS9jaGF0LWF2YXRhci9jaGF0LWF2YXRhci5lbGVtZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/*!**********************************************************!*\
  !*** ./app/js/components/chat-ui/chat-avatar/styles.css ***!
  \**********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXZhdGFyL3N0eWxlcy5jc3M/NDcyNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL2NoYXQtYXZhdGFyL3N0eWxlcy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/*!**********************************************!*\
  !*** ./app/js/components/chat-ui/styles.css ***!
  \**********************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3N0eWxlcy5jc3M/NWFhNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvanMvY29tcG9uZW50cy9jaGF0LXVpL3N0eWxlcy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/*!**********************************!*\
  !*** ./app/js/demo/narrative.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n\n\nlet ChatUI;\n\n// simulate loading\nsetTimeout(() => {\n  ChatUI = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-ui'); // dumb stashing it like this, need to tie into lifecycle hook\n\n  ChatUI.init();\n\n  ChatUI.addEventListener('outbound-message', payload => console.log('payload:', payload));\n}, 1500);\n\n// intro\nsetTimeout(() => {\n  ChatUI.writing();\n}, 3000);\n\nsetTimeout(() => {\n  ChatUI.newMessage({\n    mine: false,\n    type: 'HTML',\n    author: { avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif' },\n    contents: '<b>Hello</b>!<br>Look HTML works 👍<br>and links are clickable google.com!'\n  });\n}, 5000);\n\nsetTimeout(() => {\n  ChatUI.writing();\n}, 6000);\n\nsetTimeout(() => {\n  ChatUI.newMessage({\n    mine: false,\n    type: 'HTML',\n    author: { avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif' },\n    contents: 'In <pre><code>./js/utilities/narrative.js</code></pre> you can see the code running this ghost writing.'\n  });\n}, 8000);\n\n// // rando looks like bot is about to talk, but doesnt :troll:\n// setTimeout(() => {\n//   ChatUI.writing()\n// }, 25000)\n// setTimeout(() => {\n//   ChatUI.writing(false)\n// }, 28000)\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvZGVtby9uYXJyYXRpdmUuanM/ZmYzYSJdLCJuYW1lcyI6WyJDaGF0VUkiLCJzZXRUaW1lb3V0IiwiJCIsImluaXQiLCJhZGRFdmVudExpc3RlbmVyIiwicGF5bG9hZCIsImNvbnNvbGUiLCJsb2ciLCJ3cml0aW5nIiwibmV3TWVzc2FnZSIsIm1pbmUiLCJ0eXBlIiwiYXV0aG9yIiwiYXZhdGFyIiwiY29udGVudHMiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQSxJQUFJQSxNQUFKOztBQUVBO0FBQ0FDLFdBQVcsTUFBTTtBQUNmRCxXQUFTLHVFQUFBRSxDQUFFLFNBQUYsQ0FBVCxDQURlLENBQ087O0FBRXRCRixTQUFPRyxJQUFQOztBQUVBSCxTQUFPSSxnQkFBUCxDQUF3QixrQkFBeEIsRUFBNENDLFdBQzFDQyxRQUFRQyxHQUFSLENBQVksVUFBWixFQUF3QkYsT0FBeEIsQ0FERjtBQUVELENBUEQsRUFPRyxJQVBIOztBQVNBO0FBQ0FKLFdBQVcsTUFBTTtBQUNmRCxTQUFPUSxPQUFQO0FBQ0QsQ0FGRCxFQUVHLElBRkg7O0FBSUFQLFdBQVcsTUFBTTtBQUNmRCxTQUFPUyxVQUFQLENBQWtCO0FBQ2hCQyxVQUFNLEtBRFU7QUFFaEJDLFVBQU0sTUFGVTtBQUdoQkMsWUFBUSxFQUFFQyxRQUFRLDZFQUFWLEVBSFE7QUFJaEJDLGNBQVU7QUFKTSxHQUFsQjtBQU1ELENBUEQsRUFPRyxJQVBIOztBQVNBYixXQUFXLE1BQU07QUFDZkQsU0FBT1EsT0FBUDtBQUNELENBRkQsRUFFRyxJQUZIOztBQUlBUCxXQUFXLE1BQU07QUFDZkQsU0FBT1MsVUFBUCxDQUFrQjtBQUNoQkMsVUFBTSxLQURVO0FBRWhCQyxVQUFNLE1BRlU7QUFHaEJDLFlBQVEsRUFBRUMsUUFBUSw2RUFBVixFQUhRO0FBSWhCQyxjQUFVO0FBSk0sR0FBbEI7QUFNRCxDQVBELEVBT0csSUFQSDs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICQgfSBmcm9tICd1dGlsaXRpZXMvc2hvcnRoYW5kcydcblxubGV0IENoYXRVSVxuXG4vLyBzaW11bGF0ZSBsb2FkaW5nXG5zZXRUaW1lb3V0KCgpID0+IHtcbiAgQ2hhdFVJID0gJCgnY2hhdC11aScpIC8vIGR1bWIgc3Rhc2hpbmcgaXQgbGlrZSB0aGlzLCBuZWVkIHRvIHRpZSBpbnRvIGxpZmVjeWNsZSBob29rXG4gIFxuICBDaGF0VUkuaW5pdCgpXG5cbiAgQ2hhdFVJLmFkZEV2ZW50TGlzdGVuZXIoJ291dGJvdW5kLW1lc3NhZ2UnLCBwYXlsb2FkID0+XG4gICAgY29uc29sZS5sb2coJ3BheWxvYWQ6JywgcGF5bG9hZCkpXG59LCAxNTAwKVxuXG4vLyBpbnRyb1xuc2V0VGltZW91dCgoKSA9PiB7XG4gIENoYXRVSS53cml0aW5nKClcbn0sIDMwMDApXG5cbnNldFRpbWVvdXQoKCkgPT4ge1xuICBDaGF0VUkubmV3TWVzc2FnZSh7XG4gICAgbWluZTogZmFsc2UsIFxuICAgIHR5cGU6ICdIVE1MJyxcbiAgICBhdXRob3I6IHsgYXZhdGFyOiAnaHR0cHM6Ly9jZG4uZHJpYmJibGUuY29tL3VzZXJzLzM3NTMwL3NjcmVlbnNob3RzLzI5Mzc4NTgvZHJpYl9ibGlua19ib3QuZ2lmJyB9LFxuICAgIGNvbnRlbnRzOiAnPGI+SGVsbG88L2I+ITxicj5Mb29rIEhUTUwgd29ya3Mg8J+RjTxicj5hbmQgbGlua3MgYXJlIGNsaWNrYWJsZSBnb29nbGUuY29tISdcbiAgfSlcbn0sIDUwMDApXG5cbnNldFRpbWVvdXQoKCkgPT4ge1xuICBDaGF0VUkud3JpdGluZygpXG59LCA2MDAwKVxuXG5zZXRUaW1lb3V0KCgpID0+IHtcbiAgQ2hhdFVJLm5ld01lc3NhZ2Uoe1xuICAgIG1pbmU6IGZhbHNlLCBcbiAgICB0eXBlOiAnSFRNTCcsXG4gICAgYXV0aG9yOiB7IGF2YXRhcjogJ2h0dHBzOi8vY2RuLmRyaWJiYmxlLmNvbS91c2Vycy8zNzUzMC9zY3JlZW5zaG90cy8yOTM3ODU4L2RyaWJfYmxpbmtfYm90LmdpZicgfSxcbiAgICBjb250ZW50czogJ0luIDxwcmU+PGNvZGU+Li9qcy91dGlsaXRpZXMvbmFycmF0aXZlLmpzPC9jb2RlPjwvcHJlPiB5b3UgY2FuIHNlZSB0aGUgY29kZSBydW5uaW5nIHRoaXMgZ2hvc3Qgd3JpdGluZy4nXG4gIH0pXG59LCA4MDAwKVxuXG4vLyAvLyByYW5kbyBsb29rcyBsaWtlIGJvdCBpcyBhYm91dCB0byB0YWxrLCBidXQgZG9lc250IDp0cm9sbDpcbi8vIHNldFRpbWVvdXQoKCkgPT4ge1xuLy8gICBDaGF0VUkud3JpdGluZygpXG4vLyB9LCAyNTAwMClcbi8vIHNldFRpbWVvdXQoKCkgPT4ge1xuLy8gICBDaGF0VUkud3JpdGluZyhmYWxzZSlcbi8vIH0sIDI4MDAwKVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9qcy9kZW1vL25hcnJhdGl2ZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/*!********************************!*\
  !*** ./app/js/demo/samples.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__ = __webpack_require__(/*! utilities/shorthands */ 0);\n\n\nlet ChatUI;\n\nsetTimeout(() => {\n  ChatUI = Object(__WEBPACK_IMPORTED_MODULE_0_utilities_shorthands__[\"a\" /* $ */])('chat-ui');\n}, 1000);\n\nwindow.testCard = () => {\n  // !api changing\n  ChatUI.newMessage({\n    mine: false,\n    type: 'Card',\n    author: {\n      name: '${bot_name}',\n      avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif'\n    },\n    cards: [{\n      image: 'http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png',\n      text: 'test'\n    }]\n  });\n};\n\nwindow.testCards = () => {\n  ChatUI.newMessage({\n    mine: false,\n    type: 'Card',\n    author: {\n      name: '${bot_name}',\n      avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif'\n    },\n    cards: [{\n      image: 'http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png',\n      text: 'test'\n    }, {\n      image: 'http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png',\n      text: 'test'\n    }, {\n      image: 'http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png',\n      text: 'test'\n    }]\n  });\n};\n\nwindow.testImage = () => {\n  // !api changing\n  ChatUI.newMessage({\n    mine: false,\n    type: 'Image',\n    author: {\n      name: '${bot_name}',\n      avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif'\n    },\n    image: 'http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png'\n  });\n};\n\nwindow.testGallery = () => {\n  // !api changing\n  ChatUI.newMessage({\n    mine: false,\n    type: 'Gallery',\n    author: {\n      name: '${bot_name}',\n      avatar: 'https://cdn.dribbble.com/users/37530/screenshots/2937858/drib_blink_bot.gif'\n    },\n    images: [{ src: \"http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png\" }, { src: \"http://8bitdecals.com/wp-content/uploads/2012/06/shop_tokyo_fullsize.png\" }]\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvanMvZGVtby9zYW1wbGVzLmpzPzQyMDkiXSwibmFtZXMiOlsiQ2hhdFVJIiwic2V0VGltZW91dCIsIiQiLCJ3aW5kb3ciLCJ0ZXN0Q2FyZCIsIm5ld01lc3NhZ2UiLCJtaW5lIiwidHlwZSIsImF1dGhvciIsIm5hbWUiLCJhdmF0YXIiLCJjYXJkcyIsImltYWdlIiwidGV4dCIsInRlc3RDYXJkcyIsInRlc3RJbWFnZSIsInRlc3RHYWxsZXJ5IiwiaW1hZ2VzIiwic3JjIl0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUEsSUFBSUEsTUFBSjs7QUFFQUMsV0FBVyxNQUFNO0FBQ2ZELFdBQVMsdUVBQUFFLENBQUUsU0FBRixDQUFUO0FBQ0QsQ0FGRCxFQUVHLElBRkg7O0FBSUFDLE9BQU9DLFFBQVAsR0FBa0IsTUFBTTtBQUN0QjtBQUNBSixTQUFPSyxVQUFQLENBQWtCO0FBQ2hCQyxVQUFNLEtBRFU7QUFFaEJDLFVBQU0sTUFGVTtBQUdoQkMsWUFBUTtBQUNOQyxZQUFNLGFBREE7QUFFTkMsY0FBUTtBQUZGLEtBSFE7QUFPaEJDLFdBQU8sQ0FBQztBQUNOQyxhQUFPLDBFQUREO0FBRU5DLFlBQU07QUFGQSxLQUFEO0FBUFMsR0FBbEI7QUFZRCxDQWREOztBQWdCQVYsT0FBT1csU0FBUCxHQUFtQixNQUFNO0FBQ3ZCZCxTQUFPSyxVQUFQLENBQWtCO0FBQ2hCQyxVQUFNLEtBRFU7QUFFaEJDLFVBQU0sTUFGVTtBQUdoQkMsWUFBUTtBQUNOQyxZQUFNLGFBREE7QUFFTkMsY0FBUTtBQUZGLEtBSFE7QUFPaEJDLFdBQU8sQ0FBQztBQUNOQyxhQUFPLDBFQUREO0FBRU5DLFlBQU07QUFGQSxLQUFELEVBSVA7QUFDRUQsYUFBTywwRUFEVDtBQUVFQyxZQUFNO0FBRlIsS0FKTyxFQVFQO0FBQ0VELGFBQU8sMEVBRFQ7QUFFRUMsWUFBTTtBQUZSLEtBUk87QUFQUyxHQUFsQjtBQW9CRCxDQXJCRDs7QUF1QkFWLE9BQU9ZLFNBQVAsR0FBbUIsTUFBTTtBQUN2QjtBQUNBZixTQUFPSyxVQUFQLENBQWtCO0FBQ2hCQyxVQUFNLEtBRFU7QUFFaEJDLFVBQU0sT0FGVTtBQUdoQkMsWUFBUTtBQUNOQyxZQUFNLGFBREE7QUFFTkMsY0FBUTtBQUZGLEtBSFE7QUFPaEJFLFdBQU87QUFQUyxHQUFsQjtBQVNELENBWEQ7O0FBYUFULE9BQU9hLFdBQVAsR0FBcUIsTUFBTTtBQUN6QjtBQUNBaEIsU0FBT0ssVUFBUCxDQUFrQjtBQUNoQkMsVUFBTSxLQURVO0FBRWhCQyxVQUFNLFNBRlU7QUFHaEJDLFlBQVE7QUFDTkMsWUFBTSxhQURBO0FBRU5DLGNBQVE7QUFGRixLQUhRO0FBT2hCTyxZQUFRLENBQ04sRUFBQ0MsS0FBSSwwRUFBTCxFQURNLEVBRU4sRUFBQ0EsS0FBSSwwRUFBTCxFQUZNO0FBUFEsR0FBbEI7QUFZRCxDQWREIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCB9IGZyb20gJ3V0aWxpdGllcy9zaG9ydGhhbmRzJ1xuXG5sZXQgQ2hhdFVJXG5cbnNldFRpbWVvdXQoKCkgPT4ge1xuICBDaGF0VUkgPSAkKCdjaGF0LXVpJylcbn0sIDEwMDApXG5cbndpbmRvdy50ZXN0Q2FyZCA9ICgpID0+IHtcbiAgLy8gIWFwaSBjaGFuZ2luZ1xuICBDaGF0VUkubmV3TWVzc2FnZSh7XG4gICAgbWluZTogZmFsc2UsIFxuICAgIHR5cGU6ICdDYXJkJyxcbiAgICBhdXRob3I6IHtcbiAgICAgIG5hbWU6ICcke2JvdF9uYW1lfScsXG4gICAgICBhdmF0YXI6ICdodHRwczovL2Nkbi5kcmliYmJsZS5jb20vdXNlcnMvMzc1MzAvc2NyZWVuc2hvdHMvMjkzNzg1OC9kcmliX2JsaW5rX2JvdC5naWYnXG4gICAgfSxcbiAgICBjYXJkczogW3tcbiAgICAgIGltYWdlOiAnaHR0cDovLzhiaXRkZWNhbHMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEyLzA2L3Nob3BfdG9reW9fZnVsbHNpemUucG5nJyxcbiAgICAgIHRleHQ6ICd0ZXN0J1xuICAgIH1dXG4gIH0pXG59XG5cbndpbmRvdy50ZXN0Q2FyZHMgPSAoKSA9PiB7XG4gIENoYXRVSS5uZXdNZXNzYWdlKHtcbiAgICBtaW5lOiBmYWxzZSwgXG4gICAgdHlwZTogJ0NhcmQnLFxuICAgIGF1dGhvcjoge1xuICAgICAgbmFtZTogJyR7Ym90X25hbWV9JyxcbiAgICAgIGF2YXRhcjogJ2h0dHBzOi8vY2RuLmRyaWJiYmxlLmNvbS91c2Vycy8zNzUzMC9zY3JlZW5zaG90cy8yOTM3ODU4L2RyaWJfYmxpbmtfYm90LmdpZidcbiAgICB9LFxuICAgIGNhcmRzOiBbe1xuICAgICAgaW1hZ2U6ICdodHRwOi8vOGJpdGRlY2Fscy5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTIvMDYvc2hvcF90b2t5b19mdWxsc2l6ZS5wbmcnLFxuICAgICAgdGV4dDogJ3Rlc3QnXG4gICAgfSxcbiAgICB7XG4gICAgICBpbWFnZTogJ2h0dHA6Ly84Yml0ZGVjYWxzLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxMi8wNi9zaG9wX3Rva3lvX2Z1bGxzaXplLnBuZycsXG4gICAgICB0ZXh0OiAndGVzdCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGltYWdlOiAnaHR0cDovLzhiaXRkZWNhbHMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEyLzA2L3Nob3BfdG9reW9fZnVsbHNpemUucG5nJyxcbiAgICAgIHRleHQ6ICd0ZXN0J1xuICAgIH1dXG4gIH0pXG59XG5cbndpbmRvdy50ZXN0SW1hZ2UgPSAoKSA9PiB7XG4gIC8vICFhcGkgY2hhbmdpbmdcbiAgQ2hhdFVJLm5ld01lc3NhZ2Uoe1xuICAgIG1pbmU6IGZhbHNlLCBcbiAgICB0eXBlOiAnSW1hZ2UnLFxuICAgIGF1dGhvcjoge1xuICAgICAgbmFtZTogJyR7Ym90X25hbWV9JyxcbiAgICAgIGF2YXRhcjogJ2h0dHBzOi8vY2RuLmRyaWJiYmxlLmNvbS91c2Vycy8zNzUzMC9zY3JlZW5zaG90cy8yOTM3ODU4L2RyaWJfYmxpbmtfYm90LmdpZidcbiAgICB9LFxuICAgIGltYWdlOiAnaHR0cDovLzhiaXRkZWNhbHMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEyLzA2L3Nob3BfdG9reW9fZnVsbHNpemUucG5nJ1xuICB9KVxufVxuXG53aW5kb3cudGVzdEdhbGxlcnkgPSAoKSA9PiB7XG4gIC8vICFhcGkgY2hhbmdpbmdcbiAgQ2hhdFVJLm5ld01lc3NhZ2Uoe1xuICAgIG1pbmU6IGZhbHNlLCBcbiAgICB0eXBlOiAnR2FsbGVyeScsXG4gICAgYXV0aG9yOiB7XG4gICAgICBuYW1lOiAnJHtib3RfbmFtZX0nLFxuICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9jZG4uZHJpYmJibGUuY29tL3VzZXJzLzM3NTMwL3NjcmVlbnNob3RzLzI5Mzc4NTgvZHJpYl9ibGlua19ib3QuZ2lmJ1xuICAgIH0sXG4gICAgaW1hZ2VzOiBbXG4gICAgICB7c3JjOlwiaHR0cDovLzhiaXRkZWNhbHMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEyLzA2L3Nob3BfdG9reW9fZnVsbHNpemUucG5nXCJ9LFxuICAgICAge3NyYzpcImh0dHA6Ly84Yml0ZGVjYWxzLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxMi8wNi9zaG9wX3Rva3lvX2Z1bGxzaXplLnBuZ1wifVxuICAgIF1cbiAgfSlcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvanMvZGVtby9zYW1wbGVzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ })
/******/ ]);